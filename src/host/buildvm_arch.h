/*
** This file has been pre-processed with DynASM.
** https://luajit.org/dynasm.html
** DynASM version 1.4.0, DynASM e2k version 1.4.0
** DO NOT EDIT! The original file is in "vm_e2k.dasc".
*/

#line 1 "vm_e2k.dasc"
//|// Low-level VM code for E2K CPUs.
//|// Bytecode interpreter, fast functions and helper functions.
//|// Copyright (C) 2005-2021 Mike Pall. See Copyright Notice in luajit.h
//|
//|.arch e2k
#if DASM_VERSION != 10400
#error "Version mismatch between DynASM and included encoding engine"
#endif
#line 6 "vm_e2k.dasc"
//|.section code_op, code_sub
#define DASM_SECTION_CODE_OP	0
#define DASM_SECTION_CODE_SUB	1
#define DASM_MAXSECTION		2
#line 7 "vm_e2k.dasc"
//|
//|.actionlist build_actionlist
static const unsigned int build_actionlist[12713] = {
  0xff100001,0xff500014,0x00004001,0x40000000,0xff411015,0x04000111,0x2287d840,
  0x00000000,0x00000000,0xff810000,0x60011023,0xc0000440,0x0187d887,0x138bc88b,
  0xfffffff8,0x44e04960,0xe0000023,0x13848784,0x118b878b,0x11c0dc8f,0xfffeffff,
  0xffffffff,0x20000011,0x6784d887,0x00000000,0xfffffff8,0x80000001,0x27848b8f,
  0xff500016,0x24004023,0x11c0d880,0x118ec88e,0x40000000,0x00000000,0x00000000,
  0xff433017,0xff810000,0x24004023,0x2387d841,0x218ec040,0x80000000,0x00000000,
  0x00000000,0xff433018,0xff810000,0x10011012,0xc0000440,0x2686c08e,0x12600000,
  0x00001001,0xc0000841,0xff500019,0xf8004046,0x0987d887,0x13c0c88a,0x118bc003,
  0x138ec802,0x6786d18c,0x40000000,0x00000000,0x00000010,0x00000000,0xff445014,
  0xff810000,0x3c004035,0x2287d840,0x01878a8a,0x11c0d989,0x2102c041,0x80000000,
  0x00000000,0x00000000,0xff434002,0xff820000,0xff810000,0x34021034,0xc0000460,
  0x6686c88b,0x2688d889,0x138a8487,0x00000000,0x44600000,0x04601060,0xff830000,
  0x00004001,0xf0000000,0x24004013,0x6686c08e,0x13c08787,0x40000000,0xff412001,
  0x84001023,0xc0000841,0x198bc38b,0x278cd887,0x00000000,0x00000000,0xff810000,
  0xff50000b,0x60000092,0x6784038a,0x1302c802,0x00000000,0x40000001,0x2102c040,
  0xa0001023,0xc0000460,0x1184c884,0x2784d88a,0x00000000,0xfffffff0,0xff50000c,
  0x00004001,0x40000000,0xff411004,0x04000001,0x208b8e40,0x00001001,0xc0000460,
  0xff50000d,0x700000a3,0x11c0c080,0x6786d089,0x1384d184,0x00000010,0x00000020,
  0x80000011,0x278cd884,0x00000000,0x00000000,0xff810000,0x80001012,0xc0000c20,
  0x278cd889,0x00000000,0xff810000,0xff50000e,0x600040a3,0x678cd889,0x11c0d98a,
  0x40000000,0x00000000,0x00000000,0xff433005,0xff820000,0xff810000,0x04004012,
  0x208b8e20,0x80000000,0x00000000,0xff422006,0x20000081,0x21848961,0x00001001,
  0xc0000440,0x00004001,0x40000000,0xff41100e,0x20011022,0xc0000861,0x1384d089,
  0x00000000,0x00000010,0x44610000,0xe0004024,0x1184c884,0x108ec88e,0x2789c08a,
  0xf0000000,0x00000000,0x04000081,0x208b8e40,0x60011033,0xc0000460,0x6786d089,
  0x1384d184,0x00000000,0x00000010,0x00000020,0x44604860,0x84000092,0x11c0c080,
  0x278cd884,0x00000000,0xff810000,0x80001012,0xc0000c20,0x278cd889,0x00000000,
  0xff810000,0xff000000,0xff50000f,0x00004001,0x40000000,0xff41100d,0x04000001,
  0x208bc040,0x04011012,0xc0000440,0x138b8e8b,0x04e00000,0x04001012,0xc0000420,
  0x11848b84,0x00000000,0xff500010,0x00004001,0x40000000,0xff311000,0x9c000024,
  0x108bc001,0x118cc000,0x2686c08e,0x278cd884,0x00000000,0xff810000,0x00009012,
  0xc0000420,0x50000008,0x00000000,0x34004124,0x6686c08e,0x6686c88b,0x678cd884,
  0x40000000,0x00000000,0xff42300e,0xff810000,0x14004023,0x198bc38b,0x6786d089,
  0xf0000000,0x00000000,0x00000020,0x04000001,0x208b8e40,0x24011023,0xc0000460,
  0x11c0c080,0x1384d084,0x00000010,0x04604460,0x90001023,0xc0000c20,0x278cd889,
  0x278cd984,0x00000000,0x00000000,0xff820000,0xff810000,0xff50001a,0x0c008023,
  0x1180c086,0x1181c080,0x040000c8,0x00000000,0x00000190,0xff500017,0x04004112,
  0x6786d08c,0xf0000000,0x00000010,0x0c000122,0x678cd88c,0x11c0d989,0x00000000,
  0x00000000,0x00000000,0xff820000,0xff810000,0x10001012,0xc0000c20,0x268cd889,
  0x00000000,0xff810000,0xff50001b,0x04008022,0x0180d980,0x040000c8,0x00000000,
  0x00000000,0x00000190,0xff820000,0x04000001,0x1180c086,0xff50001c,0x24004023,
  0x6786d08c,0x11c0d98e,0x40000000,0x00000000,0x00000010,0xff433016,0xff820000,
  0x240000a2,0x11c0d889,0x11c0dd8b,0xffff7fff,0xffffffff,0x00000000,0xff810000,
  0x14000122,0x678cd888,0x678cd984,0x00000000,0x00000000,0x00000000,0xff820000,
  0xff810000,0x2c000123,0x6784d887,0x1188d988,0x6784c08c,0x00000000,0xfffffff8,
  0xff820000,0x90000022,0x2784d88c,0x2784d98b,0x00000000,0xfffffff0,0xfffffff8,
  0x30001023,0xc0000420,0x2688d989,0x13c0d08b,0x00000000,0x00000010,0xff820000,
  0xff000000,0xff50001d,0x00004001,0x40000000,0xff311000,0x0c000192,0x11c0d801,
  0x118cc000,0x00000000,0xff810000,0x00009012,0xc0000420,0x50000008,0x00000000,
  0xa0000122,0x678cd884,0x678cd98e,0x00000000,0x00000000,0x00000000,0xff820000,
  0xff810000,0x60000112,0x6784d88c,0x138e848e,0xfffffff0,0x60000022,0x018cdc8c,
  0x118ec88e,0x00000000,0x00007fff,0xffffffff,0x20000111,0x678cd887,0x00000000,
  0x00000000,0xff810000,0xa0000112,0x6687c08b,0x6487c089,0x00000000,0x2c000013,
  0x1989c389,0x1187c487,0x1b8bc58b,0x24000112,0x67898889,0x018bd08b,0x000007f8,
  0x04000001,0x61c089d1,0x00001001,0xc0000420,0xff50001e,0x2c000023,0x6487d88b,
  0x1187c487,0x138ed18e,0x00000010,0x00000000,0xff810000,0x00004001,0x40000000,
  0xff311000,0x90000022,0x2786d087,0x278cd984,0x00000000,0x00000000,0x00000018,
  0xff820000,0xa4009035,0xc0000420,0x118bc001,0x118cc000,0x278cd88e,0x50000008,
  0x00000000,0x00000000,0xff810000,0xa0000122,0x678cd884,0x678cd98e,0x00000000,
  0x00000000,0x00000000,0xff820000,0xff810000,0x60000112,0x6784d88c,0x138e848e,
  0xfffffff0,0x60000022,0x018cdc8c,0x118ec88e,0x00000000,0x00007fff,0xffffffff,
  0x20000111,0x678cd887,0x00000000,0x00000000,0xff810000,0xa0000112,0x6687c08b,
  0x6487c089,0x00000000,0x2c000013,0x1989c389,0x1187c487,0x1b8bc58b,0x24000112,
  0x67898889,0x018bd08b,0x000007f8,0x04000001,0x61c089d1,0x00001001,0xc0000420,
  0xff50001f,0x00004001,0x40000000,0xff311000,0x2c0000a3,0x6487d88b,0x1187c487,
  0x11848e8e,0x00000000,0x00000000,0xff810000,0xb0000023,0x2786d087,0x138ec88e,
  0x278cd984,0x00000000,0x00000018,0xff820000,0xa4000023,0x118bc001,0x118cc000,
  0x278cd88e,0x00000000,0x00000000,0xff810000,0x00009012,0xc0000420,0x50000008,
  0x00000000,0xa0000122,0x678cd884,0x678cd98e,0x00000000,0x00000000,0x00000000,
  0xff820000,0xff810000,0x60000112,0x6784d88c,0x138e848e,0xfffffff0,0x60000022,
  0x018cdc8c,0x118ec88e,0x00000000,0x00007fff,0xffffffff,0x20000111,0x678cd887,
  0x00000000,0x00000000,0xff810000,0xa0000112,0x6687c08b,0x6487c089,0x00000000,
  0x2c000013,0x1989c389,0x1187c487,0x1b8bc58b,0x24000112,0x67898889,0x018bd08b,
  0x000007f8,0x04000001,0x61c089d1,0x00001001,0xc0000420,0xff500020,0x0000c012,
  0x40000000,0x040000c8,0x00000190,0xff432002,0x0c100022,0x58ecd886,0x1180c08c,
  0x01c00000,0x00000000,0xffffffd0,0x1c000023,0x11c0c08e,0x11c0d887,0x678cd988,
  0x00000000,0x00000000,0xff820000,0xff810000,0x68000023,0x1181c08b,0x648cd889,
  0x1186d985,0x00000000,0x00000000,0xff820000,0xff810000,0x90000012,0x2786d08e,
  0x2686c88e,0x00000020,0x90000012,0x2686cc8e,0x278cd885,0x00000000,0xff810000,
  0x34000123,0x1188d888,0x2786d18e,0x2189c040,0x00000018,0x00000000,0xff810000,
  0x10001012,0xc0000440,0x2786d080,0x00000010,0xa0004023,0x678cd884,0x678cd98a,
  0x80000000,0x00000000,0x00000000,0xff433018,0xff820000,0xff810000,0x18004023,
  0x11c0d889,0x2788d98c,0x40000000,0x00000000,0x00000000,0xff433019,0xff820000,
  0xff810000,0x90000022,0x2688d889,0x248cd98e,0x00000000,0x00000000,0x00000000,
  0xff820000,0xff810000,0xe0000023,0x6784d887,0x138a8b8e,0x138b848b,0x00000000,
  0xfffffff8,0x20000001,0x118ec88e,0x10000001,0x2686c08e,0x04000111,0x2287d840,
  0x00000000,0x00000000,0xff810000,0x00001001,0xc0000840,0x00001001,0xc0000420,
  0xff000000,0xff500021,0x0000c012,0x40000000,0x040000c8,0x00000190,0xff432001,
  0x0c1000a2,0x58ecd886,0x11c0d987,0x01c00000,0x00000000,0xffffffd0,0xff820000,
  0x10001012,0xc0000420,0x2686cc83,0x00000000,0xff500022,0x00008011,0x040000c8,
  0x00000000,0x00000190,0x0c100022,0x58ecd886,0x11c0d987,0x01c00000,0x00000000,
  0xffffffd0,0xff820000,0xff50000b,0xf0000024,0x2786d080,0x1181c08b,0x1180c08c,
  0x2686c882,0x00000010,0x240001a2,0x678cd888,0x678cd985,0x00000000,0x00000000,
  0x00000000,0xff820000,0xff810000,0x90000022,0x2786d085,0x2786d18c,0x00000000,
  0x00000018,0x00000020,0x14000022,0x1188d888,0x278cd986,0x00000000,0x00000000,
  0x00000000,0xff820000,0xff810000,0xff50000c,0xac004045,0x11878b87,0x11c0d889,
  0x678cd984,0x678cda8e,0x40000000,0x00000000,0x00000000,0x00000000,0x00000000,
  0xff455023,0xff830000,0xff820000,0xff810000,0x10000011,0x2788d88c,0x00000000,
  0x00000000,0xff810000,0x140000a2,0x678bd88c,0x2688d989,0x00000000,0x00000000,
  0xfffffff0,0xff820000,0x24000012,0x13878487,0x118bc001,0x00000000,0x2c000033,
  0x1d8cd08f,0x018cdd8c,0x138e018e,0x00000000,0x00007fff,0xffffffff,0x0000002f,
  0x2c0000a3,0xe78cd800,0x208fd940,0x118ec88e,0x00000000,0x00000000,0xff820000,
  0xff810000,0x20011012,0xc0000460,0x1101c084,0x44600000,0x30000112,0x6400c08a,
  0x6600c08b,0x00000000,0x14000012,0x198ac38a,0x2784d887,0xfffffff8,0x2c000113,
  0x678a888a,0x1100c487,0x1b8bc58b,0x24000012,0x61c08ad1,0x018bd08b,0x000007f8,
  0x00001001,0xc0000420,0xff500024,0x00008011,0x040000c8,0x00000000,0x00000190,
  0x1c100033,0x58ecd886,0x1180c08c,0x6780d98a,0x01c00000,0x00000000,0x00000000,
  0xffffffd0,0xff820000,0x140000a2,0x678cd889,0x678cd988,0x00000000,0x00000000,
  0x00000000,0xff820000,0xff810000,0x14000012,0x61c083d1,0x2786d08c,0x00000010,
  0x1c000023,0x13898a89,0x11c0c08a,0x2786d08c,0x00000000,0x00000018,0x14000012,
  0x1188d888,0x2686cc8a,0x00000000,0xff810000,0x14000012,0x678cd889,0x2686c889,
  0x00000000,0xff810000,0x14000012,0x1180c000,0x2786d089,0x00000020,0x14000012,
  0x1181c001,0x278cd886,0x00000000,0xff810000,0x14009024,0xc0000420,0x1182c002,
  0x2788d88c,0x50000008,0x00000000,0xff810000,0x04000011,0xe786d089,0x00000000,
  0x00000020,0x00004001,0x40000000,0xff41100c,0x00000080,0x00000000,0x08004012,
  0x2100c040,0xf0000000,0x00000000,0x14010022,0x11c0c080,0x278cd889,0x00000000,
  0x00000000,0x04601060,0xff820000,0x00001001,0xc0000c40,0x0c001023,0xc0000420,
  0x1100c08b,0x11c0d887,0x00000000,0x00000000,0xff810000,0xff000000,0xff500015,
  0xf0004035,0x0187d887,0x11848b8b,0x1184c08c,0x11c0d989,0x80000000,0x00000000,
  0xfffffff8,0xff434001,0xff820000,0xe0004024,0x13848784,0x118b8e8a,0x118bc000,
  0x40000000,0x00000000,0xff423025,0x14004023,0x678cd887,0x678cd98b,0xc0000000,
  0xffffffe0,0xffffffe8,0xff433026,0x20000011,0xe784d801,0x00000000,0xfffffff0,
  0x8c000123,0x218bc160,0x218bc141,0x278ad889,0x00000000,0xfffffff8,0x00001001,
  0xc0000840,0x24000022,0x61c08bd1,0x0101dc85,0x00000000,0x00007fff,0xffffffff,
  0x20000111,0x6785d885,0x00000000,0x00000000,0xff810000,0x20000091,0x6785d885,
  0x00000000,0x00000000,0xff810000,0x00001001,0xc0000420,0xff50000b,0x04011012,
  0xc0000441,0x138c848c,0x04e10000,0x04001012,0xc0000c20,0x138cd08e,0x00000018,
  0xff500027,0x34004134,0x6487d802,0xe700c089,0x138cd18c,0x40000000,0x00000000,
  0x00000020,0xffffffff,0xff444028,0x20004012,0x1902c302,0x80000000,0x00000000,
  0xff422029,0x20000001,0x11840202,0x20000001,0x13028c02,0x20000101,0x2102c040,
  0x0c011023,0xc0000440,0x6786d000,0x13c00202,0x00000010,0x04e00000,0x1c000093,
  0x1b02c302,0x118cc001,0x278cc089,0x10001012,0xc0000820,0x2700d884,0x00000000,
  0xff810000,0xff50002a,0x1c000113,0x6687c089,0x1187c487,0x6487c08a,0xf0000024,
  0x198ac38a,0x1b89cd8e,0x1b89d08c,0x1b89c58b,0x00000015,0x70000123,0x678a888a,
  0x018ed88e,0x018bd18b,0x000007f8,0x0007fff8,0x64000023,0x61c08ad1,0x018cd08c,
  0x018ed18d,0x000007f8,0x000007f8,0x00001001,0xc0000420,0xff50002b,0x04004012,
  0xe487d800,0x40000000,0xffffffff,0xff422001,0x14000022,0x11c0d88f,0x6487d98a,
  0x00000000,0xfffffffc,0x00000000,0xff810000,0x1c000033,0x198fd08f,0x1188d989,
  0x1188da01,0x00000000,0x00000000,0x00000000,0x0000002f,0xff830000,0xff820000,
  0x1c000023,0x058d8f8d,0x11c0d88b,0x9900c300,0x00000000,0x00000000,0xff810000,
  0x1c000023,0x218ad840,0x198bd18b,0x2789c08d,0x0000002f,0x00000000,0xff810000,
  0x0c000012,0x1189c08d,0x058b8c8b,0x00000000,0x1c021034,0xc0000420,0x1184008c,
  0x1101c08c,0x2701c08b,0x00000000,0x10600000,0x04e00860,0xff50002c,0x14004123,
  0x6487d88a,0x6487d98c,0x40000000,0xffffffff,0xfffffffe,0xff433001,0x1c000023,
  0x3ec48a89,0x1188d88d,0x198cc38c,0x00000000,0x00000000,0xff810000,0x14001013,
  0xc0000420,0x11848c8c,0x278dc089,0xff50002d,0x14000122,0x6487d88d,0x6487d98c,
  0x00000000,0xffffffff,0xfffffffe,0x0c000012,0x198dc38d,0x198cc38c,0x00000000,
  0x0c000012,0x11848d8d,0x11848c8c,0x00000000,0xff000000,0xff50000b,0x00004001,
  0x40000000,0xff311001,0x1c000123,0x6786d000,0x118cc001,0x118dc002,0x00000000,
  0x00000010,0x30000012,0x2700d884,0x1100c08c,0x00000000,0xff810000,0x10009023,
  0xc0000420,0x2786d087,0x50000008,0x00000000,0x00000018,0x24004223,0x2100c040,
  0x678cd884,0xc0000000,0x00000000,0x00000000,0xff433002,0xff810000,0x00001001,
  0xc0000c40,0xff500028,0x14000092,0x6687c089,0x6487c08a,0x00000000,0x04000011,
  0x6487d802,0x00000000,0xfffffffd,0xf4000035,0x6700c001,0x198ac38a,0x1b89cd8e,
  0x1b89d08c,0x1b89c58b,0x00000000,0x00000015,0x7c000135,0x1902c302,0x1187c487,
  0x678a888a,0x018ed88e,0x018bd18b,0x000007f8,0x0007fff8,0x64000023,0x61c08ad1,
  0x018cd08c,0x018ed18d,0x000007f8,0x000007f8,0x10001012,0xc0000420,0x27840201,
  0x00000000,0xff50000c,0x20000111,0x678cd88b,0x00000000,0x00000000,0xff810000,
  0xc0000022,0x118bd887,0x278bd987,0x00000000,0xffffffe8,0x00000000,0xff810000,
  0x70000123,0x13878487,0x678bd88c,0x11c0d98e,0x00000000,0xfffffff0,0xff820000,
  0x60000022,0x018cdc8c,0x118bc084,0x00000000,0x00007fff,0xffffffff,0x80000011,
  0x2784d887,0x00000000,0xfffffff8,0x20000111,0x678cd887,0x00000000,0x00000000,
  0xff810000,0xa0000112,0x6687c08b,0x6487c089,0x00000000,0x2c000013,0x1989c389,
  0x1187c487,0x1b8bc58b,0x24000112,0x67898889,0x018bd08b,0x000007f8,0x04000001,
  0x61c089d1,0x00001001,0xc0000420,0xff50002e,0x00004001,0x40000000,0xff311002,
  0x0c000192,0x118cc000,0x108dc001,0x00000000,0x00009012,0xc0000420,0x50000008,
  0x00000000,0x14000012,0x6687c089,0x6487c08a,0x00000000,0x1c0000a3,0x6487d88b,
  0x2100c040,0xe700c08f,0x00000000,0xfffffffd,0x10000001,0x198ac38a,0x34010023,
  0x678a888a,0x11c0d88f,0x198bc38b,0x00000000,0x10600000,0xff820000,0xf8000035,
  0x1187c487,0x27848b8f,0x1b89cd8e,0x1b89d08c,0x1b89c58b,0x00000000,0x00000015,
  0x60000022,0x018ed88e,0x018bd18b,0x00000000,0x000007f8,0x0007fff8,0x64000023,
  0x61c08ad1,0x018cd08c,0x018ed18d,0x000007f8,0x000007f8,0x00001001,0xc0000420,
  0xff50002f,0x3c004045,0x6487d889,0x11c0d98f,0xe487da00,0x11c0db01,0x40000000,
  0x00000000,0xffffffff,0x00000000,0xfffffffc,0xff455001,0xff840000,0xff820000,
  0x0c000022,0x198fd08f,0x1901d101,0x00000000,0x0000002f,0x0000002f,0x0c000012,
  0x058d8f8a,0x1186d002,0x00000028,0x1c000123,0x2189d840,0x1900c300,0x2786d18a,
  0x00000028,0x00000000,0xff810000,0x1c020033,0x11840001,0x05018c8b,0x1188d801,
  0x00000000,0x00000000,0x10600000,0x04e00860,0xff830000,0x10011012,0xc0000420,
  0x2701c08b,0x10600000,0xff500030,0x14004123,0x6487d889,0x6487d98c,0x40000000,
  0xffffffff,0xfffffffe,0xff433001,0x0c000092,0x3ec48989,0x198cc38c,0x00000000,
  0x1c001034,0xc0000420,0x1186d002,0x11848c01,0x2786d189,0x00000000,0x00000028,
  0x00000028,0xff500031,0x14000122,0x6487d88d,0x6487d98c,0x00000000,0xffffffff,
  0xfffffffe,0x0c000012,0x198dc38d,0x198cc38c,0x00000000,0x0c000012,0x11848d02,
  0x11848c01,0x00000000,0xff50000b,0x00004001,0x40000000,0xff311003,0x04000111,
  0x6786d000,0x00000000,0x00000010,0x10000011,0x2786d087,0x00000000,0x00000018,
  0x14009024,0xc0000420,0x1100c08c,0x2700d884,0x50000008,0x00000000,0xff810000,
  0x04004212,0x2100c040,0x40000000,0x00000000,0xff422002,0x20001012,0xc0000440,
  0x678cd884,0x00000000,0xff810000,0x14000012,0x6687c089,0x6487c08a,0x00000000,
  0x04000111,0x6487d801,0x00000000,0xfffffffd,0xfc000036,0x1901c301,0x1187c487,
  0x198ac38a,0x1b89cd8e,0x1b89d08c,0x1b89c58b,0x00000015,0x14000112,0x67840102,
  0x678a888a,0x00000000,0x64000023,0x61c08ad1,0x018ed88e,0x018bd18b,0x000007f8,
  0x0007fff8,0x70001034,0xc0000420,0x2700c002,0x018cd08c,0x018ed18d,0x00000000,
  0x000007f8,0x000007f8,0xff000000,0xff50000c,0x14000122,0x678cd88b,0x6487d98d,
  0x00000000,0xfffffffd,0x00000000,0xff810000,0x30000012,0x278bd887,0x198dc38d,
  0xffffffe8,0x24000112,0x118bd887,0x67848d8c,0x00000000,0xff810000,0x14000012,
  0x13878487,0x278bd08c,0x00000010,0x600001a2,0x678bd88c,0x11c0d98e,0x00000000,
  0x00000000,0xfffffff0,0xff820000,0x60000022,0x018cdc8c,0x118bc084,0x00000000,
  0x00007fff,0xffffffff,0x0c000112,0x678cd887,0x1187c08a,0x00000000,0xff810000,
  0x04000101,0x6687c08b,0x8c000023,0x018bd089,0x1187c487,0x2784d98a,0xfffffff8,
  0x000000ff,0x04000001,0x1989c389,0x24000112,0x67898889,0x1b8bc58b,0x00000000,
  0x24000012,0x61c089d1,0x018bd08b,0x000007f8,0x00001001,0xc0000420,0xff500032,
  0x00004001,0x40000000,0xff311004,0x0c000092,0x6786d000,0x118cc001,0x00000010,
  0x14000092,0x108dc002,0x2786d087,0x00000018,0x10009023,0xc0000420,0x2700d884,
  0x50000008,0x00000000,0x00000000,0xff810000,0x3c0001a4,0x6687c089,0x1187c487,
  0x6487c08a,0x6487d801,0xfffffffd,0xf8000035,0x1901c301,0x198ac38a,0x1b89cd8e,
  0x1b89d08c,0x1b89c58b,0x00000000,0x00000015,0x74000134,0x6784018f,0x678a888a,
  0x018ed88e,0x018bd18b,0x00000000,0x000007f8,0x0007fff8,0x74000034,0x61c08ad1,
  0x2700c08f,0x018cd08c,0x018ed18d,0x00000000,0x000007f8,0x000007f8,0x00001001,
  0xc0000420,0xff500033,0x00004001,0x40000000,0xff311005,0x1c000023,0x6587d88e,
  0x1187c489,0x6487d98b,0xfffffffd,0xfffffffe,0x1c000033,0x6786d08c,0x1389d98a,
  0x6487da03,0x00000000,0xfffffffc,0x00000000,0x00000010,0xff820000,0x04000011,
  0x6589d889,0x00000000,0xfffffffe,0x1c000013,0x198ec38e,0x198bc38b,0x118cc000,
  0x1c000023,0x11848b01,0x11848e02,0x278cd884,0x00000000,0x00000000,0xff810000,
  0x14009024,0xc0000420,0x1989c289,0x2786d087,0x50000008,0x00000018,0x2c004224,
  0x2100c160,0x2100c121,0x678cd884,0x80000000,0x00000000,0xff423034,0xff810000,
  0x04011012,0xc0000860,0x1187c487,0x04600000,0x04010011,0x118a8987,0x00000000,
  0x04e10000,0x1c000113,0x6687c089,0x1187c487,0x6487c08a,0xf0000024,0x198ac38a,
  0x1b89cd8e,0x1b89d08c,0x1b89c58b,0x00000015,0x70000123,0x678a888a,0x018ed88e,
  0x018bd18b,0x000007f8,0x0007fff8,0x64000023,0x61c08ad1,0x018cd08c,0x018ed18d,
  0x000007f8,0x000007f8,0x00001001,0xc0000420,0xff500035,0x0c000012,0x6700c08f,
  0x1187c487,0x00000000,0x0c0000a2,0x6587d889,0x1387d98a,0x00000000,0x00000000,
  0xfffffffe,0xff820000,0x04000011,0x1d8fd08f,0x00000000,0x0000002f,0x0c000092,
  0x208fd820,0x1989c289,0x00000000,0xff810000,0x04010011,0x118a8987,0x00000000,
  0x04600000,0x1c000113,0x6687c089,0x1187c487,0x6487c08a,0xf0000024,0x198ac38a,
  0x1b89cd8e,0x1b89d08c,0x1b89c58b,0x00000015,0x70000123,0x678a888a,0x018ed88e,
  0x018bd18b,0x000007f8,0x0007fff8,0x64000023,0x61c08ad1,0x018cd08c,0x018ed18d,
  0x000007f8,0x000007f8,0x00001001,0xc0000420,0xff500036,0x0c000012,0x6700c08f,
  0x1187c487,0x00000000,0x0c0000a2,0x6587d889,0x1387d98a,0x00000000,0x00000000,
  0xfffffffe,0xff820000,0x04000011,0x1d8fd08f,0x00000000,0x0000002f,0x0c000092,
  0x208fd820,0x1989c289,0x00000000,0xff810000,0x04010011,0x118a8987,0x00000000,
  0x04e00000,0x1c000113,0x6687c089,0x1187c487,0x6487c08a,0xf0000024,0x198ac38a,
  0x1b89cd8e,0x1b89d08c,0x1b89c58b,0x00000015,0x70000123,0x678a888a,0x018ed88e,
  0x018bd18b,0x000007f8,0x0007fff8,0x64000023,0x61c08ad1,0x018cd08c,0x018ed18d,
  0x000007f8,0x000007f8,0x00001001,0xc0000420,0xff500037,0x00004001,0x40000000,
  0xff311006,0x2c000033,0x6786d08c,0x118cc003,0x018edd8e,0x00000000,0x00007fff,
  0xffffffff,0x00000010,0x1c0000a3,0x6587d889,0x1387d98a,0x1387c487,0x00000000,
  0xfffffffe,0xff820000,0x1c000023,0x118bc001,0x118cc000,0x278cd884,0x00000000,
  0x00000000,0xff810000,0x1c009035,0xc0000420,0x118ec002,0x1989c289,0x2786d087,
  0x50000008,0x00000000,0x00000018,0x3c004235,0x2100c160,0x2100c121,0x118ac48a,
  0x678cd884,0x80000000,0x00000000,0x00000000,0xff434034,0xff810000,0x04011012,
  0xc0000860,0x1187c487,0x04600000,0x04010011,0x118a8987,0x00000000,0x04e10000,
  0x1c000113,0x6687c089,0x1187c487,0x6487c08a,0xf0000024,0x198ac38a,0x1b89cd8e,
  0x1b89d08c,0x1b89c58b,0x00000015,0x70000123,0x678a888a,0x018ed88e,0x018bd18b,
  0x000007f8,0x0007fff8,0x64000023,0x61c08ad1,0x018cd08c,0x018ed18d,0x000007f8,
  0x000007f8,0x00001001,0xc0000420,0xff000000,0xff500038,0x00004001,0x40000000,
  0xff311007,0x0c000012,0x6786d08c,0x1387c487,0x00000010,0x140000a2,0x6687d801,
  0x6587d989,0x00000000,0xfffffffe,0xfffffffc,0x1c000023,0x1387d88a,0x118cc000,
  0x278cd984,0x00000000,0x00000000,0xff820000,0xff810000,0x1c009035,0xc0000420,
  0x118ac48a,0x1989c289,0x2786d087,0x50000008,0x00000000,0x00000018,0x2c004224,
  0x2100c160,0x2100c121,0x678cd884,0x80000000,0x00000000,0xff423034,0xff810000,
  0x04011012,0xc0000860,0x1187c487,0x04600000,0x04010011,0x118a8987,0x00000000,
  0x04e10000,0x1c000113,0x6687c089,0x1187c487,0x6487c08a,0xf0000024,0x198ac38a,
  0x1b89cd8e,0x1b89d08c,0x1b89c58b,0x00000015,0x70000123,0x678a888a,0x018ed88e,
  0x018bd18b,0x000007f8,0x0007fff8,0x64000023,0x61c08ad1,0x018cd08c,0x018ed18d,
  0x000007f8,0x000007f8,0x00001001,0xc0000420,0xff500039,0x00004001,0x40000000,
  0xff311008,0x04000111,0x6786d08c,0x00000000,0x00000010,0x1c000023,0x1b8ec302,
  0x1b8bc301,0x278cd884,0x00000000,0x00000000,0xff810000,0x18009024,0xc0000420,
  0x118cc000,0x2786d087,0x50000008,0x00000018,0x20000011,0x678cd884,0x00000000,
  0x00000000,0xff810000,0x1c000113,0x6687c089,0x1187c487,0x6487c08a,0xf0000024,
  0x198ac38a,0x1b89cd8e,0x1b89d08c,0x1b89c58b,0x00000015,0x70000123,0x678a888a,
  0x018ed88e,0x018bd18b,0x000007f8,0x0007fff8,0x64000023,0x61c08ad1,0x018cd08c,
  0x018ed18d,0x000007f8,0x000007f8,0x00001001,0xc0000420,0xff50003a,0xe0000013,
  0x11858d8d,0x11848c8c,0x11848b8b,0x00004001,0x40000000,0xff311009,0x1c000123,
  0x6487d804,0x118bc001,0x6786d100,0x00000010,0xfffffffc,0x1c000023,0x118dc003,
  0x118cc002,0x2700d884,0x00000000,0x00000000,0xff810000,0x14009024,0xc0000420,
  0x1100c08c,0x2786d087,0x50000008,0x00000018,0x60004023,0x678cd884,0x2100c040,
  0x80000000,0x00000000,0x00000000,0xff43302a,0xff810000,0x00004181,0x40000000,
  0xff411034,0x00001001,0xc0000840,0x00001001,0xc0000420,0xff50003b,0xe0000013,
  0x11858d8c,0x11848c8d,0x11848b8b,0x00004001,0x40000000,0xff311009,0x1c000123,
  0x6487d804,0x118bc001,0x6786d100,0x00000010,0xfffffffc,0x1c000023,0x118dc003,
  0x118cc002,0x2700d884,0x00000000,0x00000000,0xff810000,0x14009024,0xc0000420,
  0x1100c08c,0x2786d087,0x50000008,0x00000018,0x60004023,0x678cd884,0x2100c040,
  0x80000000,0x00000000,0x00000000,0xff43302a,0xff810000,0x00004181,0x40000000,
  0xff411034,0x00001001,0xc0000840,0x00001001,0xc0000420,0xff50003c,0xe0000013,
  0x11848e8d,0x11848e8c,0x11848b8b,0x00004001,0x40000000,0xff311009,0x1c000123,
  0x6487d804,0x118bc001,0x6786d100,0x00000010,0xfffffffc,0x1c000023,0x118dc003,
  0x118cc002,0x2700d884,0x00000000,0x00000000,0xff810000,0x14009024,0xc0000420,
  0x1100c08c,0x2786d087,0x50000008,0x00000018,0x60004023,0x678cd884,0x2100c040,
  0x80000000,0x00000000,0x00000000,0xff43302a,0xff810000,0x00004181,0x40000000,
  0xff411034,0x00001001,0xc0000840,0x00001001,0xc0000420,0xff000000,0xff50003d,
  0xe0000013,0x11848d8d,0x11848c8c,0x11848b8b,0x00004001,0x40000000,0xff311009,
  0x1c000123,0x6487d804,0x118bc001,0x6786d100,0x00000010,0xfffffffc,0x1c000023,
  0x118dc003,0x118cc002,0x2700d884,0x00000000,0x00000000,0xff810000,0x14009024,
  0xc0000420,0x1100c08c,0x2786d087,0x50000008,0x00000018,0x60004023,0x678cd884,
  0x2100c040,0x80000000,0x00000000,0x00000000,0xff43302a,0xff810000,0x00004181,
  0x40000000,0xff411034,0x00001001,0xc0000840,0x00001001,0xc0000420,0xff500034,
  0x0c000012,0x1100c08b,0x13008400,0x00000000,0x38000033,0x1100d887,0x278bd987,
  0x11c0da8e,0x00000000,0x00000000,0xffffffe8,0x00000000,0xff830000,0xff810000,
  0x04004112,0x678bd88c,0x40000000,0xfffffff0,0xff422023,0x60000022,0x1d8cd08f,
  0x018cdd8c,0x00007fff,0xffffffff,0x0000002f,0x20000111,0x208fd840,0x00000000,
  0x00000000,0xff810000,0x20011012,0xc0000460,0x118bc084,0x44600000,0x80000011,
  0x2784d887,0x00000000,0xfffffff8,0x20000111,0x678cd887,0x00000000,0x00000000,
  0xff810000,0xa0000112,0x6687c08b,0x6487c089,0x00000000,0x2c000013,0x1989c389,
  0x1187c487,0x1b8bc58b,0x24000112,0x67898889,0x018bd08b,0x000007f8,0x04000001,
  0x61c089d1,0x00001001,0xc0000420,0xff50003e,0x00004001,0x40000000,0xff31100a,
  0x14000122,0x6587d88e,0x6786d18c,0x00000000,0x00000010,0xfffffffe,0xa0000012,
  0x198ec38e,0x278cd884,0x00000000,0xff810000,0x70009035,0xc0000420,0x2786d087,
  0x11848e01,0x118cc000,0x50000008,0x00000000,0x00000018,0x20004212,0x678cd884,
  0x80000000,0x00000000,0xff422034,0xff810000,0xff000000,0x24004113,0x2100c040,
  0x67848e00,0x40000000,0xff41203f,0x00001001,0xc0000860,0x04001022,0xc0000420,
  0x0100dc00,0x00000000,0x00007fff,0xffffffff,0xff000000,0x00001001,0xc0000820,
  0xff000000,0xff500023,0x00004001,0x40000000,0xff31100b,0x1c000123,0x6786d000,
  0x138bd101,0x118b8e02,0x00000010,0x00000010,0x18000012,0x1302c802,0x2700d884,
  0x00000000,0xff810000,0x10009023,0xc0000420,0x2786d087,0x50000008,0x00000000,
  0x00000018,0x14004123,0x6786d089,0x678bd98c,0x80000000,0xfffffff0,0x00000010,
  0xff433040,0x60000112,0x6789d884,0x118ec88e,0x00000000,0xff810000,0x20000101,
  0x21858440,0x60011033,0xc0000840,0x018cdc8c,0x118bc084,0x00000000,0x00007fff,
  0xffffffff,0x44e04960,0x80000011,0x2784d887,0x00000000,0xfffffff8,0x20000111,
  0x678cd887,0x00000000,0x00000000,0xff810000,0xa0000112,0x6687c08b,0x6487c089,
  0x00000000,0x2c000013,0x1989c389,0x1187c487,0x1b8bc58b,0x24000112,0x67898889,
  0x018bd08b,0x000007f8,0x04000001,0x61c089d1,0x00001001,0xc0000420,0xff500041,
  0x00004001,0x40000000,0xff31100c,0x1c000123,0x6786d08c,0x118bc001,0xe687d989,
  0xfffffffc,0x00000010,0x3c000034,0x0189d08a,0x118cc000,0x278cd984,0x1b89c58b,
  0x00000000,0x00000000,0x000000ff,0xff820000,0x38009035,0xc0000420,0x198ac38a,
  0x2786d087,0x018bd18b,0x50000008,0x000007f8,0x00000018,0x04000001,0x11888a8a,
  0x24000122,0x678ad88a,0x678cd984,0x00000000,0x00000000,0x00000000,0xff820000,
  0xff810000,0x04000001,0x61c08ad1,0x00001001,0xc0000420,0xff500042,0x20004112,
  0x6784c08f,0x40000000,0x00000000,0xff422043,0x60004023,0x118fc08c,0x1d8fd08f,
  0x80000000,0x00000000,0x0000002f,0xff433044,0x600000a2,0x218ed820,0x208fd921,
  0x00000000,0x00000000,0x00000000,0xff820000,0xff810000,0x00040000,0x60616060,
  0x04001012,0xc0000460,0x6784d887,0xfffffff8,0xd0000023,0x2686c08e,0x138ed08e,
  0x2784d98c,0xfffffff0,0x00000010,0x20004112,0x218ec040,0x40000000,0x00000000,
  0xff422001,0x60011023,0xc0000840,0x118ed08e,0x1184c88b,0x00000010,0x44600000,
  0xff50000b,0x60000012,0x678bc08c,0x138ec88e,0x00000000,0x20000101,0x218ec040,
  0xc0011023,0xc0000460,0x118bc88b,0x278bd88c,0xfffffff0,0x49600000,0x04001112,
  0xc0000820,0x6686c08e,0x00000000,0xff500045,0x60004123,0x6784c08d,0x10c0d88c,
  0x40000000,0x00000000,0x00000000,0xff433043,0xff810000,0x60000022,0x1d8dd08d,
  0x218ed920,0x00000000,0x00000000,0x0000002f,0xff820000,0x40000081,0x208d8c21,
  0x60011033,0xc0000440,0x088cd88d,0x088dd98d,0x00000000,0xffffffff,0xffffffff,
  0x44614961,0x64004134,0x6784d887,0x6784d98c,0x188dc38d,0x80000000,0x00000000,
  0xfffffff0,0xfffffff8,0xff444044,0xe0000033,0x0cc68d8d,0x018cdc8c,0x11c0da8f,
  0x00000000,0x00000000,0x00007fff,0xffffffff,0xff830000,0x60000012,0x118c8d89,
  0x198fd08f,0x0000002f,0x20000111,0x6789d88d,0x00000000,0x00000000,0xff810000,
  0x20000001,0x058d8f8d,0xc0001023,0xc0000820,0x11c0d88e,0x2784d98d,0xfffffff0,
  0x00000000,0xff810000,0xff000000,0xff500046,0x20004012,0x6784c08c,0x40000000,
  0x00000000,0xff422043,0x240040a3,0x6784d887,0x218ed920,0x80000000,0x00000000,
  0xfffffff8,0xff433001,0xff820000,0x60000022,0x1d8cd08f,0x018cdd8c,0x00007fff,
  0xffffffff,0x0000002f,0x60001023,0xc0000440,0x208fd841,0x208fd942,0x00000000,
  0x00000000,0xff820000,0xff810000,0x600040a3,0xe78cd88c,0x208fd963,0x40000000,
  0x00000000,0x00000000,0xff433044,0xff820000,0xff810000,0x60050032,0x11c0d88f,
  0x11c0d98d,0x00000000,0x00000000,0x00000000,0x61626260,0x44630000,0xff840000,
  0xff830000,0x60001033,0xc0000860,0x198dd08d,0x098fdd8f,0x00000000,0xffffffff,
  0xffffffff,0x0000002f,0x04000001,0x198fc389,0x04000011,0x1189d889,0x00000000,
  0x00000000,0xff810000,0x04000101,0x6788898c,0xff50000b,0xe4000034,0xe788d88a,
  0x218cc040,0x11c0d989,0x058d8c8d,0x00000000,0x00000000,0x00000000,0xff820000,
  0xff810000,0xa0000022,0xe68cd88b,0xe78cd900,0x00000000,0x00000000,0x00000000,
  0xff820000,0xff810000,0x84010022,0x11c0d88f,0x2784d98d,0xfffffff0,0x00000000,
  0x52600000,0xff820000,0xc4011044,0xc0000440,0x198fd08f,0x11c0d98e,0x2784da89,
  0x00000000,0xfffffff0,0x00000000,0x0000002f,0x50600000,0xff830000,0x04000111,
  0x668ad889,0x00000000,0x00000000,0xff810000,0x0c004013,0x018b898b,0x058a8f8a,
  0x80000000,0xff412003,0x04100291,0x238bd88b,0x01c00000,0x00000000,0xff810000,
  0x04000001,0x118b008b,0xff50000c,0x04004112,0x678bd889,0xc0000000,0x00000000,
  0xff42200c,0xff810000,0x04000101,0x21898a40,0x04011122,0xc0000840,0x678bd88b,
  0x00000000,0x00000000,0x04e00000,0xff820000,0x04000101,0x218bc040,0x00001001,
  0xc0000c60,0x20001012,0xc0000420,0x11c0d88e,0x00000000,0xff810000,0xff000000,
  0xff50000d,0x24000122,0x678bd88c,0x11c0d98e,0x00000000,0x00000000,0x00000000,
  0xff820000,0xff810000,0x04000091,0x218cd840,0x00000000,0x00000000,0xff810000,
  0x80011022,0xc0000420,0x2784d88c,0x00000000,0xfffffff0,0x52600000,0xff500047,
  0x20004012,0x6784c08c,0x40000000,0x00000000,0xff422043,0x04000081,0x6784c88b,
  0xe0000033,0x118cc08a,0x1d8cd08f,0x018cdd8c,0x00000000,0x00007fff,0xffffffff,
  0x0000002f,0xe0000033,0x218ed820,0x208fd941,0xe78cda89,0x00000000,0x00000000,
  0x00000000,0x00000000,0xff830000,0xff820000,0xff810000,0x60000022,0x1d8bd08f,
  0x018bdd8b,0x00007fff,0xffffffff,0x0000002f,0x04040011,0x208fd842,0x00000000,
  0x60616060,0xff820000,0x20001092,0xc0000460,0xa189c041,0x00000000,0x00040000,
  0x61624060,0x34011044,0xc0000460,0x6784d887,0xe788d900,0xe48cda89,0x00000000,
  0x00000000,0x00000000,0xfffffff8,0x04600000,0xff840000,0xff830000,0x900040a3,
  0x278cd88b,0x2784d98a,0x40000000,0xfffffff0,0x00000000,0xff433044,0xff810000,
  0x60000122,0x2389d840,0x0189d989,0x00000000,0x00000000,0x00000000,0xff820000,
  0xff810000,0xa0011033,0xc0000440,0x11c0d88e,0x248cd989,0x00000000,0x00000000,
  0x00000000,0x44605260,0xff830000,0xff820000,0x90001023,0xc0000420,0x2788d88c,
  0x278cd900,0x00000000,0x00000000,0xff820000,0xff810000,0xff500048,0x300040a3,
  0x6786d000,0x6784c001,0x80000000,0x00000000,0x00000010,0xff433043,0x00004001,
  0x40000000,0xff31100d,0x60000022,0x1d01d08f,0x0101dd01,0x00007fff,0xffffffff,
  0x0000002f,0x600000a2,0x218ed820,0x208fd941,0x00000000,0x00000000,0x00000000,
  0xff820000,0xff810000,0x00040000,0x60616060,0x00001001,0xc0000860,0x20009013,
  0xc0000420,0x1184c802,0x50000008,0x14004223,0x6700c08c,0x6784d887,0x80000000,
  0x00000000,0xfffffff8,0xff433044,0xc0001023,0xc0000820,0x11c0d88e,0x2784d98c,
  0xfffffff0,0x00000000,0xff810000,0xff000000,0xff500049,0x20004112,0x6784c08c,
  0x40000000,0x00000000,0xff422043,0x20004012,0x1d8cd08f,0x80000000,0x0000002f,
  0xff422044,0x600000a2,0x218ed840,0x208fd961,0x00000000,0x00000000,0x00000000,
  0xff820000,0xff810000,0x00040000,0x60614060,0x04011022,0xc0000460,0x6784d887,
  0x00000000,0xfffffff8,0x04600000,0xc0001023,0xc0000820,0x11c0d88e,0x2784d98c,
  0xfffffff0,0x00000000,0xff810000,0xff50004a,0x34004134,0x6784d887,0x6788d989,
  0x6784c08c,0x40000000,0x00000000,0x00000000,0xfffffff8,0xff444043,0xff820000,
  0xe0004034,0x2189c043,0x218ed820,0x1d8cd18f,0x80000000,0x00000000,0x0000002f,
  0x00000000,0xff444044,0xff810000,0x600000a2,0x208fd841,0x208fd962,0x00000000,
  0x00000000,0x00000000,0xff820000,0xff810000,0x000c0010,0x000064a2,0x626350e0,
  0x60616080,0x00001001,0xc0000460,0xc0011033,0xc0000841,0x11c0d88e,0x2784d98c,
  0x00000000,0xfffffff0,0x00000000,0x49625061,0xff820000,0x14004023,0x6788d88a,
  0x6788d989,0x80000000,0x00000000,0x00000000,0xff433001,0xff820000,0xff810000,
  0x04000011,0x6786d000,0x00000000,0x00000010,0x00004001,0x40000000,0xff31100e,
  0x04004112,0x218a8920,0xc0000000,0x00000000,0xff422043,0x70021034,0xc0000840,
  0x2786d087,0x11848e8e,0x1100c08c,0x00000018,0x49600000,0x126044e0,0x30000012,
  0x2700d884,0x138ec88e,0x00000000,0xff810000,0x10009023,0xc0000420,0x2700d88e,
  0x50000008,0x00000000,0x00000000,0xff810000,0xa0004123,0x678cd884,0x678cd98e,
  0xc0000000,0x00000000,0x00000000,0xff433043,0xff820000,0xff810000,0x20000001,
  0x138e848e,0x20000001,0x118ec88e,0xff000000,0xff50000b,0x00004001,0x40000000,
  0xff31100f,0x20000191,0x6786d08c,0x00000000,0x00000010,0xb8009046,0xc0000420,
  0x1184c001,0x2786d087,0x118cc000,0x278cd984,0x50000008,0x00000000,0x00000000,
  0x00000018,0xff820000,0x30004023,0x11c0d88a,0x678cd984,0x80000000,0x00000000,
  0x00000000,0xff433044,0xff820000,0xff810000,0x04000011,0x198ad08a,0x00000000,
  0x0000002f,0x04000001,0x058a008a,0x10000011,0x2784d88a,0x00000000,0xfffffff0,
  0x20000011,0x11c0d88e,0x00000000,0x00000000,0xff810000,0x00001001,0xc0000820,
  0xff50004b,0x30004023,0xe786d08c,0xe784c001,0x80000000,0x00000000,0x00000010,
  0xff433043,0x600000a2,0x218ed820,0x218ed941,0x00000000,0x00000000,0x00000000,
  0xff820000,0xff810000,0x60000022,0x9d01d08f,0x8101dd01,0x00007fff,0xffffffff,
  0x0000002f,0x24000022,0x11c0d889,0xa08fd942,0x00000000,0x00000000,0x00000000,
  0xff820000,0xff810000,0x00004001,0x40000000,0xff311010,0x80050011,0x2784c889,
  0x60626060,0x50610000,0x04011022,0xc0000860,0x6784d887,0x00000000,0xfffffff8,
  0x04600000,0x900000a2,0x278cd884,0x278cd984,0x00000000,0x00000000,0x00000000,
  0xff820000,0xff810000,0x1c009035,0xc0000420,0x1184c802,0x118cc000,0x2786d087,
  0x50000008,0x00000000,0x00000018,0xa4004024,0x2100c040,0x678cd884,0xe784c88a,
  0x80000000,0x00000000,0xff423044,0xff810000,0x0c0001a2,0xe784d001,0x11c0d989,
  0x00000000,0x00000000,0x00000010,0xff820000,0xc0011033,0xc0000840,0x11c0d88e,
  0x2784d989,0x00000000,0xfffffff0,0x00000000,0x48605060,0xff820000,0xd0001034,
  0xc0000820,0x2784d88a,0x11c0d98e,0x2784da01,0xfffffff8,0x00000000,0xfffffff0,
  0xff820000,0xff50004c,0xa0004123,0x6784c08c,0xe784d800,0x40000000,0x00000000,
  0xfffffff0,0xff433043,0xe0000033,0x118cc08a,0x1d8cd08f,0x018cdd8c,0x00000000,
  0x00007fff,0xffffffff,0x0000002f,0xe0000033,0x218ed820,0x208fd941,0xe78cda89,
  0x00000000,0x00000000,0x00000000,0x00000000,0xff830000,0xff820000,0xff810000,
  0x60004033,0x11c0d88f,0x8100dd00,0x80000000,0x00000000,0x00007fff,0xffffffff,
  0x00000000,0xff454044,0xff810000,0x60040022,0xe700d801,0x198fd18f,0x0000002f,
  0x00000000,0x60616060,0xff820000,0x00001001,0xc0000460,0xff000000,0x20000101,
  0x2189c040,0x00001001,0xc0000460,0xff000000,0x2c000023,0x6784d887,0x11c0d989,
  0x05018f01,0x00000000,0xfffffff8,0xff820000,0x90000022,0x2784d801,0x2784d98a,
  0x00000000,0xfffffff8,0xfffffff0,0xc0001023,0xc0000820,0x11c0d88e,0x2784c089,
  0x00000000,0x00000000,0xff810000,0xff50004d,0xe0004124,0xe784c08c,0x218ed820,
  0x6784c889,0x40000000,0x00000000,0xff423043,0xff810000,0x60004033,0x1d89d08a,
  0x3189dd89,0x80000000,0x00000000,0x3ff00000,0x00000000,0x0000002f,0xff454001,
  0x60001033,0xc0000440,0x1d8cd08f,0x018cdd8c,0x00000000,0x00007fff,0xffffffff,
  0x0000002f,0xe00040b4,0x208fd840,0x208ad921,0x668cda02,0xc0000000,0x00000000,
  0x00000000,0x00000000,0xff444044,0xff830000,0xff820000,0xff810000,0x20040011,
  0xe68cd803,0x00000000,0x60614060,0xff820000,0x20011022,0xc0000460,0x6784d887,
  0x00000000,0xfffffff8,0x44600000,0xe0000023,0xe78cd88e,0x3fc28901,0x2784d989,
  0xfffffff0,0x00000000,0xff810000,0x60000092,0x20010220,0x0cc20101,0x00000000,
  0x20000001,0x1901c38b,0x20011012,0xc0000860,0x118e8b8e,0x44600000,0xa0000112,
  0x668ec089,0xe78ec08c,0x00000000,0x20000091,0x2089d840,0x00000000,0x00000000,
  0xff810000,0x20011022,0xc0000c40,0x11c0d88e,0x00000000,0x00000000,0x44600000,
  0xff820000,0xa0001023,0xc0000c20,0x11c0d88e,0x2784d98c,0xfffffff8,0x00000000,
  0xff810000,0xff50000b,0x00004001,0x40000000,0xff311002,0x60000112,0x2103c040,
  0x118cc000,0x00000000,0x20011022,0xc0000c40,0x11c0d88e,0x00000000,0x00000000,
  0x44600000,0xff820000,0x00009012,0xc0000420,0x50000008,0x00000000,0x1c004124,
  0xe700c08c,0x2100c040,0xe600c089,0xc0000000,0x00000000,0xff423044,0x08000091,
  0xa089d841,0x00000000,0x00000000,0xff810000,0x00040000,0x60616260,0x20011022,
  0xc0000c60,0x11c0d88e,0x00000000,0x00000000,0x44e00000,0xff820000,0xa0001023,
  0xc0000c20,0x11c0d88e,0x2784d98c,0xfffffff8,0x00000000,0xff810000,0xff50004e,
  0xe0004134,0x6784c08c,0x11c0dc01,0xe784da00,0x40000000,0xfffffff0,0x00007fff,
  0xffffffff,0xff444043,0xf0000024,0x01000100,0x118cc08a,0x1d8cd08f,0x018c018c,
  0x0000002f,0xe0000033,0x218ed820,0x208fd941,0xe78cda89,0x00000000,0x00000000,
  0x00000000,0x00000000,0xff830000,0xff820000,0xff810000,0x0c000022,0xe700d801,
  0x11c0d98f,0x00000000,0x00000000,0x00000000,0xff820000,0xff810000,0x04040011,
  0x198fd08f,0x0000002f,0x60616060,0x00001001,0xc0000460,0xff000000,0x20000101,
  0x2189c040,0x00001001,0xc0000460,0xff000000,0x0c004023,0x6784d887,0x05018f01,
  0x40000000,0x00000000,0xfffffff8,0xff433044,0x98000023,0x11c0c089,0x2784d88a,
  0x2784d901,0xfffffff0,0xfffffff8,0xc0001023,0xc0000420,0x11c0d88e,0x2784c089,
  0x00000000,0x00000000,0xff810000,0xff50004f,0x30004123,0xe488d88c,0x218ed920,
  0x40000000,0x00000000,0x00000000,0xff433043,0xff820000,0xff810000,0x24004023,
  0x9b8cd88c,0x1184d18b,0x80000000,0x00000010,0x00000000,0xff433001,0xff810000,
  0x04000001,0x818cc18c,0x24011023,0xc0000440,0x11c0d887,0x138ec88e,0x00000000,
  0x04e044e0,0xff820000,0x64000013,0x11878c87,0x138ec885,0x118b8e89,0xff50000b,
  0x60000112,0x6789d88c,0x2185c060,0xffffffe8,0xe0011034,0xc0000860,0x118b8589,
  0x1385c885,0x2789d88c,0x00000000,0xfffffff0,0x44e04960,0x20004112,0x678bd88c,
  0x40000000,0xfffffff0,0xff422023,0x60000022,0x1d8cd08f,0x018cdd8c,0x00007fff,
  0xffffffff,0x0000002f,0x60000122,0xe78cd800,0x208fd940,0x00000000,0x00000000,
  0x00000000,0xff820000,0xff810000,0xe0011024,0xc0000460,0xe600c089,0x118bc084,
  0xe400c08a,0x48600000,0x80000091,0x2784d887,0x00000000,0xfffffff8,0x2c000013,
  0x198ac38a,0x1100c487,0x1b89c58b,0x24000112,0x678a888a,0x018bd08b,0x000007f8,
  0x04000001,0x61c08ad1,0x00001001,0xc0000420,0xff500050,0xa0004113,0x6784c88b,
  0x6784c08c,0x40000000,0xff412043,0x20000011,0x1d8bd08f,0x00000000,0x0000002f,
  0x600000a2,0x218ed820,0x208fd941,0x00000000,0x00000000,0x00000000,0xff820000,
  0xff810000,0x00040000,0x60616060,0x98021034,0xc0000460,0x11c0d887,0x2784c08b,
  0x2784c88c,0x00000000,0x50600000,0x08601060,0xff830000,0x04004092,0x6488d88c,
  0x80000000,0x00000000,0xff422001,0xff810000,0x60000022,0x1184d08b,0x138ed18e,
  0x00000000,0x00000010,0x00000018,0x24000012,0x1b8cd88c,0x118ec085,0x00000000,
  0xff810000,0x24000012,0x018cc18c,0x118b8589,0x00000000,0x24000012,0x11878c87,
  0x1385c885,0x00000000,0xff50000b,0x60000112,0x6789d88c,0x2185c060,0xffffffe8,
  0xe0011034,0xc0000860,0x118b8589,0x1385c885,0x2789d88c,0x00000000,0xfffffff0,
  0x44e04960,0x20004112,0x678bd88c,0x40000000,0xfffffff0,0xff422023,0x60000022,
  0x1d8cd08f,0x018cdd8c,0x00007fff,0xffffffff,0x0000002f,0x60000122,0xe78cd800,
  0x208fd940,0x00000000,0x00000000,0x00000000,0xff820000,0xff810000,0xe0011024,
  0xc0000460,0xe600c089,0x118bc084,0xe400c08a,0x48600000,0x80000091,0x2784d887,
  0x00000000,0xfffffff8,0x2c000013,0x198ac38a,0x1100c487,0x1b89c58b,0x24000112,
  0x678a888a,0x018bd08b,0x000007f8,0x04000001,0x61c08ad1,0x00001001,0xc0000420,
  0xff000000,0xff500051,0xa0004123,0x6784d887,0x6784c08c,0x40000000,0x00000000,
  0xfffffff8,0xff433043,0x60000022,0x1d8cd08f,0x018cdd8c,0x00007fff,0xffffffff,
  0x0000002f,0x600000a2,0x218ed820,0x208fd941,0x00000000,0x00000000,0x00000000,
  0xff820000,0xff810000,0x00040000,0x60616060,0x10011022,0xc0000460,0x2786d087,
  0x00000000,0x00000018,0x10600000,0xe0000023,0x678cd889,0x118cc08a,0xe48cd900,
  0x00000000,0x00000000,0xff820000,0xff810000,0x20004092,0xe78cd88b,0x40000000,
  0x00000000,0xff422043,0xff810000,0xe0000023,0x2189c040,0xa100d861,0xe78cd989,
  0x00000000,0x00000000,0xff820000,0xff810000,0x20000011,0x2100d842,0x00000000,
  0x00000000,0xff810000,0x00040000,0x60614060,0x20001092,0xc0000460,0x218b8961,
  0x00000000,0x04080021,0xe78cd889,0x00000000,0x00000000,0x00006261,0x61624260,
  0xff830000,0x20011122,0xc0000440,0x678bd887,0x00000000,0xfffffff8,0x44610000,
  0xc0010012,0x118bc88b,0x278bc087,0x48615061,0x20000001,0x118b8e87,0x04000011,
  0x1387d087,0x00000000,0x00000010,0x14004123,0x21878960,0x6786d000,0x80000000,
  0x00000000,0x00000010,0xff433002,0x90011033,0xc0000460,0x2700d884,0x278cd987,
  0x00000000,0x00000000,0x00000000,0x10605060,0xff830000,0xff820000,0x20000001,
  0x1184c884,0x10004012,0x2700d884,0xc0000000,0x00000000,0xff422001,0xff810000,
  0x20000001,0x11848e8c,0x20000011,0x138cd08c,0x00000000,0x00000018,0x24004113,
  0x21878b40,0x138c878c,0x40000000,0xff412020,0x00001001,0xc0000840,0xff50000b,
  0x04000101,0x67878c8d,0x18000012,0x1387c887,0x2787d88d,0xfffffff8,0x04000101,
  0x21878b40,0x00001001,0xc0000c60,0xff50000c,0x0c009024,0xc0000420,0x118bc001,
  0x118ac000,0x50000008,0x00000000,0x1c004134,0x6786d08c,0x118ac087,0x11c0d989,
  0x80000000,0x00000000,0x00000000,0x00000010,0xff444007,0xff820000,0x20000111,
  0x678cd884,0x00000000,0x00000000,0xff810000,0x94000133,0x2100d860,0x2688d989,
  0x2788da8c,0x00000000,0x00000000,0x00000000,0x00000000,0xff830000,0xff820000,
  0xff810000,0x00001001,0xc0000860,0xff000000,0xff50000d,0x34004134,0x6787d88b,
  0x6787d985,0xe78cda89,0x40000000,0x00000000,0x00000000,0x00000000,0xff444005,
  0xff830000,0xff820000,0xff810000,0x30004023,0x2787d88b,0x13858b87,0x80000000,
  0x00000000,0x00000000,0xff433008,0xff810000,0x20004112,0x2187c040,0xc0000000,
  0x00000000,0xff422004,0x20011012,0xc0000440,0x1184878e,0x44e00000,0x60000112,
  0x218e8960,0x1184c000,0x00000000,0x20011012,0xc0000860,0x13008b8c,0x44600000,
  0xff50000e,0x20000101,0x678bc08e,0xc0000012,0x118bc88b,0x278b8c8e,0x00000000,
  0x20000101,0x218b8540,0x00001001,0xc0000c60,0xff50000f,0x60000022,0x1187d88e,
  0x11c0dd8f,0xfffeffff,0xffffffff,0x00000000,0xff810000,0x80000011,0x2784d88f,
  0x00000000,0xfffffff8,0xff500010,0x04004012,0x6786d087,0x40000000,0x00000018,
  0xff422018,0x10004012,0x2686c08e,0x80000000,0x00000000,0xff422019,0x20000001,
  0x13c0c88b,0x04000111,0x2287d840,0x00000000,0x00000000,0xff810000,0x00001001,
  0xc0000440,0x00001001,0xc0000820,0xff500011,0x0c0040b3,0x6787d88b,0x11c0dd8f,
  0x40000000,0x00000000,0xffff7fff,0xffffffff,0x00000000,0xff454010,0xff810000,
  0x80000011,0x2784d88f,0x00000000,0xfffffff8,0x04000001,0x138bc88b,0x10000011,
  0x2787d88b,0x00000000,0x00000000,0xff810000,0x04000101,0x678bc08e,0xc0001023,
  0xc0000420,0x11c0d88e,0x2784c08e,0x00000000,0x00000000,0xff810000,0xff500012,
  0x00004001,0x40000000,0xff311000,0x0c000192,0x118ac08b,0x1b87c387,0x00000000,
  0x1c009035,0xc0000420,0x1187c001,0x118cc000,0x278bd885,0x50000008,0x00000000,
  0x00000000,0xff810000,0x20004212,0x678cd884,0x80000000,0x00000000,0xff42200d,
  0xff810000,0x04001012,0xc0000820,0x118ac087,0x00000000,0xff000000,0xff500052,
  0xa0000122,0x6784d88c,0x6784d987,0x00000000,0xfffffff8,0xfffffff0,0x20000011,
  0x018cdc8c,0x00007fff,0xffffffff,0x20000111,0x678cd88c,0x00000000,0x00000000,
  0xff810000,0x30000022,0x2786d087,0x018cdd8c,0x00007fff,0xffffffff,0x00000018,
  0xe0000023,0x678cd889,0x118cc08a,0xe48cd900,0x00000000,0x00000000,0xff820000,
  0xff810000,0x20004092,0xe78cd88b,0x40000000,0x00000000,0xff422043,0xff810000,
  0xe0000023,0x2189c040,0xa100d861,0xe78cd989,0x00000000,0x00000000,0xff820000,
  0xff810000,0x20000011,0x2100d842,0x00000000,0x00000000,0xff810000,0x00040000,
  0x60614060,0x20001092,0xc0000460,0x218b8961,0x00000000,0x04080021,0xe78cd889,
  0x00000000,0x00000000,0x00006261,0x61624260,0xff830000,0x20011122,0xc0000440,
  0x678bd887,0x00000000,0xfffffff8,0x44610000,0xc0010012,0x118bc88b,0x278bc087,
  0x48615061,0x20000001,0x118b8e87,0x04000001,0x1387c887,0x14004123,0x21878960,
  0x6786d000,0x80000000,0x00000000,0x00000010,0xff433002,0x90011033,0xc0000460,
  0x2700d884,0x278cd987,0x00000000,0x00000000,0x00000000,0x10605060,0xff830000,
  0xff820000,0x10004012,0x2700d884,0xc0000000,0x00000000,0xff422001,0xff810000,
  0x20000001,0x11848e8c,0x20000011,0x138cd08c,0x00000000,0x00000010,0x24004113,
  0x21878b40,0x138c878c,0x40000000,0xff412020,0x00001001,0xc0000840,0xff50000b,
  0x04000101,0x67878c8d,0x18000012,0x1387c887,0x2787d88d,0xfffffff8,0x04000101,
  0x21878b40,0x00001001,0xc0000c60,0xff50000c,0x0c009024,0xc0000420,0x118bc001,
  0x118ac000,0x50000008,0x00000000,0x1c004134,0x6786d08c,0x118ac087,0x11c0d989,
  0x80000000,0x00000000,0x00000000,0x00000010,0xff444007,0xff820000,0x20000111,
  0x678cd884,0x00000000,0x00000000,0xff810000,0x94000133,0x2100d860,0x2688d989,
  0x2788da8c,0x00000000,0x00000000,0x00000000,0x00000000,0xff830000,0xff820000,
  0xff810000,0x00001001,0xc0000860,0xff000000,0xff50000d,0x34004134,0x6787d88b,
  0x6787d985,0xe78cda89,0x40000000,0x00000000,0x00000000,0x00000000,0xff444005,
  0xff830000,0xff820000,0xff810000,0x30004023,0x2787d88b,0x13858b87,0x80000000,
  0x00000000,0x00000000,0xff433008,0xff810000,0x20004112,0x2187c040,0xc0000000,
  0x00000000,0xff422004,0x20011012,0xc0000440,0x1184878e,0x44e00000,0x60000112,
  0x218e8960,0x1184c000,0x00000000,0x20011012,0xc0000860,0x13008b8c,0x44600000,
  0xff50000e,0x20000101,0x678bc08e,0xc0000012,0x118bc88b,0x278b8c8e,0x00000000,
  0x20000101,0x218b8540,0x00001001,0xc0000c60,0xff50000f,0x20000011,0x1187d88e,
  0x00000000,0x00000000,0xff810000,0xff500010,0x04004012,0x6786d087,0x40000000,
  0x00000018,0xff422018,0x10004012,0x2686c08e,0x80000000,0x00000000,0xff422019,
  0x20000001,0x11c0c08b,0x04000111,0x2287d840,0x00000000,0x00000000,0xff810000,
  0x00001001,0xc0000440,0x00001001,0xc0000820,0xff500011,0x00004001,0x40000000,
  0xff311011,0x0c000192,0x1187c001,0x118cc000,0x00000000,0x00009012,0xc0000420,
  0x50000008,0x00000000,0xff500012,0x00004001,0x40000000,0xff311000,0x0c000192,
  0x118ac08b,0x1b87c387,0x00000000,0x1c009035,0xc0000420,0x1187c001,0x118cc000,
  0x278bd885,0x50000008,0x00000000,0x00000000,0xff810000,0x20004212,0x678cd884,
  0x80000000,0x00000000,0xff42200d,0xff810000,0x04001012,0xc0000820,0x118ac087,
  0x00000000,0xff500053,0x04004112,0x6786d08c,0x40000000,0x00000010,0xff422043,
  0x24004123,0x678cd889,0x11848e8a,0xf0000000,0x00000000,0x00000000,0xff810000,
  0x04000111,0x2389d840,0x00000000,0x00000000,0xff810000,0x00001001,0xc0000440,
  0x30000012,0x278cd884,0x138ac88e,0x00000000,0xff810000,0x30000012,0x278cd88e,
  0x11c0c08e,0x00000000,0xff810000,0x14000022,0x11c0d880,0x278cd98e,0x00000000,
  0x00000000,0x00000000,0xff820000,0xff810000,0x10001012,0xc0000c20,0x248cd880,
  0x00000000,0xff810000,0xff000000,0xff500054,0x20004112,0x6784c08c,0x40000000,
  0x00000000,0xff422043,0x60000012,0x1d8cd08f,0x198cc18c,0x0000002f,0xe00000a3,
  0x218ed820,0x208fd921,0x1b8cc18c,0x00000000,0x00000000,0xff820000,0xff810000,
  0x00040000,0x60616060,0x00001001,0xc0000460,0x04004212,0x6784d887,0x40000000,
  0xfffffff8,0xff422044,0xa0001023,0xc0000420,0x11c0d88e,0x2784d98c,0xfffffff0,
  0x00000000,0xff810000,0xff500055,0x20004112,0x6784c000,0x40000000,0x00000000,
  0xff422043,0xa2000012,0x1d00d08f,0x4dc0008a,0x0000002f,0x60000022,0x218ed820,
  0x208fd921,0x00000000,0x00000000,0x00000000,0xff820000,0xff810000,0x00040000,
  0x60616060,0x00001001,0xc0000460,0x82000001,0x51008a89,0xff500056,0x04000111,
  0x6784d887,0x00000000,0xfffffff8,0xa0000022,0x11c0d88e,0x2784d989,0x00000000,
  0xfffffff0,0x00000000,0xff810000,0xff500044,0xb4004035,0x2387d840,0xe487c003,
  0x11c0d98a,0x2686c08e,0x40000000,0x00000000,0x00000000,0xff434019,0xff820000,
  0xff810000,0xa00140a3,0x6487d88c,0x6687c002,0x80000000,0xffffffff,0x44605060,
  0xff433002,0x20010011,0x6487d88b,0xfffffffd,0x44600000,0x6c024045,0x1903c303,
  0x1187c487,0x13c0d08b,0x198cc38c,0xc0000000,0x00000000,0x00000010,0x44e04860,
  0x04600860,0xff455001,0x24011023,0xc0000460,0x67038803,0xa18c8e61,0x00000000,
  0x04600000,0x20001012,0xc0000841,0x198bc304,0x00000000,0xff50000b,0x60000012,
  0x138ed089,0x118ec88e,0x00000018,0xa0000012,0x218c8e61,0x2784898a,0x00000000,
  0x00001001,0xc0000c61,0xff50000c,0x24000012,0x61c003d1,0x1384d084,0x00000010,
  0xe0000023,0x1b02c58b,0x1b02d08c,0x1b02cd8e,0x00000000,0x00000015,0xe0000023,
  0x13840484,0x018ed88e,0x018bd18b,0x000007f8,0x0007fff8,0x60001023,0xc0000420,
  0x018cd08c,0x018ed18d,0x000007f8,0x000007f8,0xff500057,0x20004092,0x6784c000,
  0x80000000,0x00000000,0xff422043,0x00004001,0x40000000,0xff411058,0x20000011,
  0x1d00d08f,0x00000000,0x0000002f,0x04000111,0x208fd820,0x00000000,0x00000000,
  0xff810000,0x00001001,0xc0000860,0x00009012,0xc0000420,0x50000008,0x00000000,
  0x04004212,0x1100c089,0x40000000,0x00000000,0xff422056,0x00001001,0xc0000420,
  0xff000000,0xff500059,0x20004092,0x6784c000,0x80000000,0x00000000,0xff422043,
  0x00004001,0x40000000,0xff41105a,0x20000011,0x1d00d08f,0x00000000,0x0000002f,
  0x04000111,0x208fd820,0x00000000,0x00000000,0xff810000,0x00001001,0xc0000860,
  0x00009012,0xc0000420,0x50000008,0x00000000,0x04004212,0x1100c089,0x40000000,
  0x00000000,0xff422056,0x00001001,0xc0000420,0xff50005b,0x20004092,0x6784c000,
  0x80000000,0x00000000,0xff422043,0x00004001,0x40000000,0xff311012,0x20000011,
  0x1d00d08f,0x00000000,0x0000002f,0x600000a2,0x218ed840,0x208fd921,0x00000000,
  0x00000000,0x00000000,0xff820000,0xff810000,0x00040000,0x60614060,0x00001001,
  0xc0000860,0x00009012,0xc0000420,0x50000008,0x00000000,0x04004212,0x1100c089,
  0x80000000,0x00000000,0xff422056,0x00001001,0xc0000820,0xff50005c,0x20004092,
  0x6784c000,0x80000000,0x00000000,0xff422043,0x00004001,0x40000000,0xff311013,
  0x20000011,0x1d00d08f,0x00000000,0x0000002f,0x600000a2,0x218ed820,0x208fd921,
  0x00000000,0x00000000,0x00000000,0xff820000,0xff810000,0x00040000,0x60616060,
  0x00001001,0xc0000860,0x00009012,0xc0000420,0x50000008,0x00000000,0x04004212,
  0x1100c089,0x80000000,0x00000000,0xff422056,0x00001001,0xc0000820,0xff50005d,
  0x20004092,0x6784c000,0x80000000,0x00000000,0xff422043,0x00004001,0x40000000,
  0xff311014,0x20000011,0x1d00d08f,0x00000000,0x0000002f,0x600000a2,0x218ed820,
  0x208fd921,0x00000000,0x00000000,0x00000000,0xff820000,0xff810000,0x00040000,
  0x60616060,0x00001001,0xc0000860,0x00009012,0xc0000420,0x50000008,0x00000000,
  0x04004212,0x1100c089,0x80000000,0x00000000,0xff422056,0x00001001,0xc0000820,
  0xff50005e,0x20004092,0x6784c000,0x80000000,0x00000000,0xff422043,0x00004001,
  0x40000000,0xff311015,0x20000011,0x1d00d08f,0x00000000,0x0000002f,0x600000a2,
  0x218ed820,0x208fd921,0x00000000,0x00000000,0x00000000,0xff820000,0xff810000,
  0x00040000,0x60616060,0x00001001,0xc0000860,0x00009012,0xc0000420,0x50000008,
  0x00000000,0x04004212,0x1100c089,0x80000000,0x00000000,0xff422056,0x00001001,
  0xc0000820,0xff000000,0xff50005f,0x20004092,0x6784c000,0x80000000,0x00000000,
  0xff422043,0x00004001,0x40000000,0xff311016,0x20000011,0x1d00d08f,0x00000000,
  0x0000002f,0x600000a2,0x218ed820,0x208fd921,0x00000000,0x00000000,0x00000000,
  0xff820000,0xff810000,0x00040000,0x60616060,0x00001001,0xc0000860,0x00009012,
  0xc0000420,0x50000008,0x00000000,0x04004212,0x1100c089,0x80000000,0x00000000,
  0xff422056,0x00001001,0xc0000820,0xff500060,0x20004092,0x6784c000,0x80000000,
  0x00000000,0xff422043,0x00004001,0x40000000,0xff311017,0x20000011,0x1d00d08f,
  0x00000000,0x0000002f,0x600000a2,0x218ed820,0x208fd921,0x00000000,0x00000000,
  0x00000000,0xff820000,0xff810000,0x00040000,0x60616060,0x00001001,0xc0000860,
  0x00009012,0xc0000420,0x50000008,0x00000000,0x04004212,0x1100c089,0x80000000,
  0x00000000,0xff422056,0x00001001,0xc0000820,0xff500061,0x20004092,0x6784c000,
  0x80000000,0x00000000,0xff422043,0x00004001,0x40000000,0xff311018,0x20000011,
  0x1d00d08f,0x00000000,0x0000002f,0x600000a2,0x218ed820,0x208fd921,0x00000000,
  0x00000000,0x00000000,0xff820000,0xff810000,0x00040000,0x60616060,0x00001001,
  0xc0000860,0x00009012,0xc0000420,0x50000008,0x00000000,0x04004212,0x1100c089,
  0x80000000,0x00000000,0xff422056,0x00001001,0xc0000820,0xff500062,0x20004092,
  0x6784c000,0x80000000,0x00000000,0xff422043,0x00004001,0x40000000,0xff311019,
  0x20000011,0x1d00d08f,0x00000000,0x0000002f,0x600000a2,0x218ed820,0x208fd921,
  0x00000000,0x00000000,0x00000000,0xff820000,0xff810000,0x00040000,0x60616060,
  0x00001001,0xc0000860,0x00009012,0xc0000420,0x50000008,0x00000000,0x04004212,
  0x1100c089,0x80000000,0x00000000,0xff422056,0x00001001,0xc0000820,0xff000000,
  0xff500063,0x20004092,0x6784c000,0x80000000,0x00000000,0xff422043,0x00004001,
  0x40000000,0xff31101a,0x20000011,0x1d00d08f,0x00000000,0x0000002f,0x600000a2,
  0x218ed820,0x208fd921,0x00000000,0x00000000,0x00000000,0xff820000,0xff810000,
  0x00040000,0x60616060,0x00001001,0xc0000860,0x00009012,0xc0000420,0x50000008,
  0x00000000,0x04004212,0x1100c089,0x80000000,0x00000000,0xff422056,0x00001001,
  0xc0000820,0xff500064,0x20004092,0x6784c000,0x80000000,0x00000000,0xff422043,
  0x00004001,0x40000000,0xff31101b,0x20000011,0x1d00d08f,0x00000000,0x0000002f,
  0x600000a2,0x218ed820,0x208fd921,0x00000000,0x00000000,0x00000000,0xff820000,
  0xff810000,0x00040000,0x60616060,0x00001001,0xc0000860,0x00009012,0xc0000420,
  0x50000008,0x00000000,0x04004212,0x1100c089,0x80000000,0x00000000,0xff422056,
  0x00001001,0xc0000820,0xff500065,0x20004092,0x6784c000,0x80000000,0x00000000,
  0xff422043,0x00004001,0x40000000,0xff31101c,0x20000011,0x1d00d08f,0x00000000,
  0x0000002f,0x600000a2,0x218ed820,0x208fd921,0x00000000,0x00000000,0x00000000,
  0xff820000,0xff810000,0x00040000,0x60616060,0x00001001,0xc0000860,0x00009012,
  0xc0000420,0x50000008,0x00000000,0x04004212,0x1100c089,0x80000000,0x00000000,
  0xff422056,0x00001001,0xc0000820,0xff500066,0x20004092,0x6784c000,0x80000000,
  0x00000000,0xff422043,0x00004001,0x40000000,0xff31101d,0x20000011,0x1d00d08f,
  0x00000000,0x0000002f,0x600000a2,0x218ed820,0x208fd921,0x00000000,0x00000000,
  0x00000000,0xff820000,0xff810000,0x00040000,0x60616060,0x00001001,0xc0000860,
  0x00009012,0xc0000420,0x50000008,0x00000000,0x04004212,0x1100c089,0x80000000,
  0x00000000,0xff422056,0x00001001,0xc0000820,0xff000000,0xff500067,0xe00040a4,
  0x6784c000,0x11c0d089,0x6784c801,0x80000000,0x0000002f,0xff423043,0x00004001,
  0x40000000,0xff31101e,0xe0000023,0x218ed820,0x1d00898f,0x1d01898a,0x00000000,
  0x00000000,0xff810000,0x600000a2,0x208fd821,0x208ad922,0x00000000,0x00000000,
  0x00000000,0xff820000,0xff810000,0x00080010,0x00000000,0x620050a0,0x60616040,
  0x00001001,0xc0000860,0x00009012,0xc0000420,0x50000008,0x00000000,0x20004012,
  0x1100c089,0x40000000,0x00000000,0xff422056,0x00001001,0xc0000420,0xff500068,
  0xe00040a4,0x6784c000,0x11c0d089,0x6784c801,0x80000000,0x0000002f,0xff423043,
  0x00004001,0x40000000,0xff31101f,0xe0000023,0x218ed820,0x1d00898f,0x1d01898a,
  0x00000000,0x00000000,0xff810000,0x600000a2,0x208fd821,0x208ad922,0x00000000,
  0x00000000,0x00000000,0xff820000,0xff810000,0x00080010,0x00000000,0x620050a0,
  0x60616040,0x00001001,0xc0000860,0x00009012,0xc0000420,0x50000008,0x00000000,
  0x20004012,0x1100c089,0x40000000,0x00000000,0xff422056,0x00001001,0xc0000420,
  0xff500069,0xe00040a4,0x6784c000,0x11c0d089,0x6784c801,0x80000000,0x0000002f,
  0xff423043,0x00004001,0x40000000,0xff311020,0xe0000023,0x218ed820,0x1d00898f,
  0x1d01898a,0x00000000,0x00000000,0xff810000,0x600000a2,0x208fd821,0x208ad922,
  0x00000000,0x00000000,0x00000000,0xff820000,0xff810000,0x00080010,0x00000000,
  0x620050a0,0x60616040,0x00001001,0xc0000860,0x00009012,0xc0000420,0x50000008,
  0x00000000,0x20004012,0x1100c089,0x40000000,0x00000000,0xff422056,0x00001001,
  0xc0000420,0xff50006a,0xe0004124,0x6784c089,0x11c0d001,0x6784c88a,0x40000000,
  0x0000002f,0xff423043,0xe0004024,0x218ed820,0x1d89018f,0x1d8a0100,0x80000000,
  0x00000000,0xff423044,0xff810000,0x60000022,0x208fd821,0x2000d922,0x00000000,
  0x00000000,0x00000000,0xff820000,0xff810000,0x20000001,0x3dc28a8a,0x00080010,
  0x00000000,0x620050a0,0x60616040,0x41001012,0xc0000460,0x25898a89,0x01c00000,
  0x04000111,0x6784d887,0x00000000,0xfffffff8,0xa0001023,0xc0000820,0x11c0d88e,
  0x2784d989,0xfffffff0,0x00000000,0xff810000,0xff000000,0xff50006b,0x20004092,
  0x6784c000,0x80000000,0x00000000,0xff422043,0x00004001,0x40000000,0xff311021,
  0x20000011,0x1d00d08f,0x00000000,0x0000002f,0x600000a2,0x218ed820,0x208fd921,
  0x00000000,0x00000000,0x00000000,0xff820000,0xff810000,0x00040000,0x60616060,
  0x00001001,0xc0000860,0x04009023,0xc0000420,0x1186d001,0x50000008,0x00000000,
  0x00000028,0x14004123,0x6784d887,0x6686d189,0x40000000,0x00000028,0xfffffff8,
  0xff433044,0x84000012,0x3ec48989,0x2784d800,0xfffffff0,0xa0001023,0xc0000420,
  0x11c0d88e,0x2784d989,0xfffffff8,0x00000000,0xff810000,0xff50006c,0x20004092,
  0x6784c000,0x80000000,0x00000000,0xff422043,0x00004001,0x40000000,0xff311022,
  0x20000011,0x1d00d08f,0x00000000,0x0000002f,0x600000a2,0x218ed820,0x208fd921,
  0x00000000,0x00000000,0x00000000,0xff820000,0xff810000,0x00040000,0x60616060,
  0x00001001,0xc0000860,0x20009023,0xc0000420,0x1384d001,0x50000008,0x00000000,
  0x00000010,0x04004112,0x6784d887,0x80000000,0xfffffff8,0xff422044,0xc0001023,
  0xc0000820,0x11c0d88e,0x2784d900,0xfffffff8,0x00000000,0xff810000,0xff50006d,
  0x20004112,0x6784c089,0x40000000,0x00000000,0xff422043,0x20004012,0x1d89d08f,
  0x80000000,0x0000002f,0xff422056,0x600040a3,0x218ed820,0x208fd921,0xc0000000,
  0x00000000,0x00000000,0xff433001,0xff820000,0xff810000,0x00040000,0x60616060,
  0x20001012,0xc0000460,0x11c0d08b,0x00000010,0xff50000b,0x60000012,0x208b8e20,
  0x11848b8a,0x00000000,0x20000091,0xe78ad88a,0x00000000,0xfffffff8,0x00001001,
  0xc0000860,0x20000011,0x1d8ad08f,0x00000000,0x0000002f,0x20000111,0x208fd820,
  0x00000000,0x00000000,0xff810000,0x00001001,0xc0000460,0x60001013,0xc0000c20,
  0x35898a89,0x118bc88b,0xff50006e,0x20004112,0x6784c089,0x40000000,0x00000000,
  0xff422043,0x20004012,0x1d89d08f,0x80000000,0x0000002f,0xff422056,0x600040a3,
  0x218ed820,0x208fd921,0xc0000000,0x00000000,0x00000000,0xff433001,0xff820000,
  0xff810000,0x00040000,0x60616060,0x20001012,0xc0000460,0x11c0d08b,0x00000010,
  0xff000000,0xff50000b,0x60000012,0x208b8e20,0x11848b8a,0x00000000,0x20000091,
  0xe78ad88a,0x00000000,0xfffffff8,0x00001001,0xc0000860,0x20000011,0x1d8ad08f,
  0x00000000,0x0000002f,0x20000111,0x208fd820,0x00000000,0x00000000,0xff810000,
  0x00001001,0xc0000460,0x60001013,0xc0000c20,0x37898a89,0x118bc88b,0xff50006f,
  0x20004112,0x6784c08c,0x40000000,0x00000000,0xff422043,0x60004033,0x1d8cd08f,
  0x018cdd8c,0x80000000,0x00000000,0x00007fff,0xffffffff,0x0000002f,0xff454044,
  0x60004023,0x218ed840,0x208fd941,0xc0000000,0x00000000,0x00000000,0xff433056,
  0xff820000,0xff810000,0x20000011,0xe68cd889,0x00000000,0x00000000,0xff810000,
  0x00040000,0x60614060,0x00001001,0xc0000460,0x70000123,0x6784d887,0xe48cd98c,
  0xa089c121,0x00000000,0xfffffff8,0xff820000,0x30011023,0xc0000841,0x11c0d88e,
  0x3ec48c89,0x00000000,0x10610000,0xff820000,0x00001001,0xc0000c20,0xff500070,
  0x14004023,0x6788d88a,0x6788d989,0x80000000,0x00000000,0x00000000,0xff433001,
  0xff820000,0xff810000,0x04000011,0x6786d000,0x00000000,0x00000010,0x00004001,
  0x40000000,0xff31100e,0x04004112,0x218a8920,0xc0000000,0x00000000,0xff422043,
  0x70021034,0xc0000840,0x2786d087,0x11848e8e,0x1100c08c,0x00000018,0x49600000,
  0x126044e0,0x30000012,0x2700d884,0x138ec88e,0x00000000,0xff810000,0x10009023,
  0xc0000420,0x2700d88e,0x50000008,0x00000000,0x00000000,0xff810000,0xa0004123,
  0x678cd884,0x678cd98e,0xc0000000,0x00000000,0x00000000,0xff433043,0xff820000,
  0xff810000,0x20000001,0x138e848e,0x20000001,0x118ec88e,0xff50000b,0x60000112,
  0x6784c089,0x11c0c18a,0x00000000,0x60000012,0x1d89d08f,0x3fc2898c,0x0000002f,
  0x60000022,0x218ed840,0x208fd921,0x00000000,0x00000000,0x00000000,0xff820000,
  0xff810000,0x00040000,0x60614060,0x20001112,0xc0000c60,0x208cd061,0x000000ff,
  0x30011033,0xc0000c61,0x2686d08c,0x1186d18e,0x00000000,0x00000028,0x00000028,
  0x10614461,0xff000000,0xff500071,0x00004001,0x40000000,0xff311023,0x0c000112,
  0x6786d08c,0x0cc28a02,0x00000010,0x1c000023,0x118ec001,0x118cc000,0x278cd884,
  0x00000000,0x00000000,0xff810000,0x10009023,0xc0000420,0x2786d087,0x50000008,
  0x00000000,0x00000018,0x30004123,0x11c0d88f,0x678cd984,0x40000000,0x00000000,
  0x00000000,0xff433044,0xff820000,0xff810000,0x04000011,0x198fd08f,0x00000000,
  0x0000002f,0x30000012,0x05008f00,0x6784d887,0xfffffff8,0x84001023,0xc0000420,
  0x11c0d88e,0x2784d900,0xfffffff0,0x00000000,0xff810000,0xff500072,0x14004023,
  0x6788d88a,0x6788d989,0x80000000,0x00000000,0x00000000,0xff433001,0xff820000,
  0xff810000,0x04000011,0x6786d000,0x00000000,0x00000010,0x00004001,0x40000000,
  0xff31100e,0x04004112,0x218a8920,0xc0000000,0x00000000,0xff422043,0x70021034,
  0xc0000840,0x2786d087,0x11848e8e,0x1100c08c,0x00000018,0x49600000,0x126044e0,
  0x30000012,0x2700d884,0x138ec88e,0x00000000,0xff810000,0x10009023,0xc0000420,
  0x2700d88e,0x50000008,0x00000000,0x00000000,0xff810000,0xa0004123,0x678cd884,
  0x678cd98e,0xc0000000,0x00000000,0x00000000,0xff433043,0xff820000,0xff810000,
  0x20000001,0x138e848e,0x20000001,0x118ec88e,0xff50000b,0xe00000a3,0xe784d089,
  0x11c0c08b,0x10c0d98a,0xffffffff,0x00000010,0x60000022,0x218ed820,0x218ed961,
  0x00000000,0x00000000,0x00000000,0xff820000,0xff810000,0x80000011,0x9d89d08f,
  0x00000000,0x0000002f,0x20000091,0xa08fd822,0x00000000,0x00000000,0xff810000,
  0x00080010,0x00000000,0x620064a1,0x606160a0,0x20011012,0xc0000c60,0x3fc2898a,
  0x44610000,0xe0000123,0x6784c08c,0x11c0dc00,0x6784c889,0x00007fff,0xffffffff,
  0xe0000023,0x1d8cd08f,0x018c008c,0x1d89d100,0x0000002f,0x0000002f,0xe00040b4,
  0x208fd840,0x2000d921,0xe68cda8d,0x40000000,0x00000000,0x00000000,0x00000000,
  0xff444002,0xff830000,0xff820000,0xff810000,0x20044012,0x3fc2898b,0x80000000,
  0x60614060,0xff422002,0xe0001024,0xc0000c60,0xa08d8a21,0xa08d8ac2,0x108ac100,
  0x00000000,0x60004013,0x208bc0e3,0x208bc044,0x80000000,0xff412071,0x00080010,
  0x00000000,0x00004261,0x61624060,0x00040000,0x63644262,0xe0021034,0xc0000462,
  0x10008d8a,0x108dc08a,0x10c0c18b,0x00000000,0x50640000,0x44614860,0x20000001,
  0x108b8d8b,0x20000001,0x108bc18b,0x20000001,0x208bc0e0,0x20010011,0x10c0c18b,
  0x00000000,0x44600000,0xff000000,0xff50000c,0x60000012,0x128a8b8a,0x118c8b00,
  0x00000000,0x20000081,0x208ac0c0,0xe0021034,0xc0000820,0x088a8a8a,0x108ac18a,
  0x1100d88e,0x00000000,0x52600000,0x44604960,0xff830000,0xff500073,0x14004023,
  0xe788d88c,0xe788d989,0x40000000,0x00000000,0x00000000,0xff433043,0xff820000,
  0xff810000,0x24004123,0x6786d000,0x218ed920,0x80000000,0x00000000,0x00000010,
  0xff433001,0xff820000,0x00001001,0xc0000440,0x04000081,0xa18c8921,0x00004001,
  0x40000000,0xff31100e,0xb0021044,0xc0000841,0x2700d884,0x11848e8e,0x2786d187,
  0x00000000,0x00000018,0x00000000,0x52610000,0x126144e1,0xff830000,0x20000101,
  0x138ec88e,0xa0009024,0xc0000420,0x1100c08c,0x2700d88e,0x50000008,0x00000000,
  0xff810000,0xa0000122,0x678cd884,0x678cd98e,0x00000000,0x00000000,0x00000000,
  0xff820000,0xff810000,0x20000001,0x138e848e,0x20000001,0x118ec88e,0xff50000b,
  0xa4004034,0x1188d800,0x6784c001,0x6786d18c,0x80000000,0x00000000,0x00000010,
  0x00000000,0xff444043,0xff810000,0x04000011,0x6700d88d,0x00000000,0x00000000,
  0xff810000,0x00004001,0x40000000,0xff311024,0x60000022,0x1d01d08f,0x0101dd01,
  0x00007fff,0xffffffff,0x0000002f,0x20000111,0x208fd840,0x00000000,0x00000000,
  0xff810000,0x00001001,0xc0000860,0x90000022,0x2700d88c,0x278cd984,0x00000000,
  0x00000000,0x00000000,0xff820000,0xff810000,0x90009034,0xc0000420,0x2700d88d,
  0x2786d187,0x50000008,0x00000000,0x00000018,0x00000000,0xff810000,0x00004001,
  0x40000000,0xff311025,0x04009013,0xc0000420,0x1100c000,0x50000008,0x24004023,
  0x11c0d88f,0x678cd984,0x40000000,0x00000000,0x00000000,0xff433044,0xff820000,
  0xff810000,0x04000011,0x198fd08f,0x00000000,0x0000002f,0x04000001,0x05008f00,
  0x20000011,0x6784d887,0x00000000,0xfffffff8,0xa0001023,0xc0000420,0x11c0d88e,
  0x2784d900,0xfffffff0,0x00000000,0xff810000,0xff000000,0xff500074,0x14004023,
  0xe788d88c,0xe788d989,0x40000000,0x00000000,0x00000000,0xff433043,0xff820000,
  0xff810000,0x24004123,0x6786d000,0x218ed920,0x80000000,0x00000000,0x00000010,
  0xff433001,0xff820000,0x00001001,0xc0000440,0x04000081,0xa18c8921,0x00004001,
  0x40000000,0xff31100e,0xb0021044,0xc0000841,0x2700d884,0x11848e8e,0x2786d187,
  0x00000000,0x00000018,0x00000000,0x52610000,0x126144e1,0xff830000,0x20000101,
  0x138ec88e,0xa0009024,0xc0000420,0x1100c08c,0x2700d88e,0x50000008,0x00000000,
  0xff810000,0xa0000122,0x678cd884,0x678cd98e,0x00000000,0x00000000,0x00000000,
  0xff820000,0xff810000,0x20000001,0x138e848e,0x20000001,0x118ec88e,0xff50000b,
  0xa4004034,0x1188d800,0x6784c001,0x6786d18c,0x80000000,0x00000000,0x00000010,
  0x00000000,0xff444043,0xff810000,0x04000011,0x6700d88d,0x00000000,0x00000000,
  0xff810000,0x00004001,0x40000000,0xff311026,0x60000022,0x1d01d08f,0x0101dd01,
  0x00007fff,0xffffffff,0x0000002f,0x20000111,0x208fd840,0x00000000,0x00000000,
  0xff810000,0x00001001,0xc0000860,0x90000022,0x2700d88c,0x278cd984,0x00000000,
  0x00000000,0x00000000,0xff820000,0xff810000,0x90009034,0xc0000420,0x2700d88d,
  0x2786d187,0x50000008,0x00000000,0x00000018,0x00000000,0xff810000,0x00004001,
  0x40000000,0xff311025,0x04009013,0xc0000420,0x1100c000,0x50000008,0x24004023,
  0x11c0d88f,0x678cd984,0x40000000,0x00000000,0x00000000,0xff433044,0xff820000,
  0xff810000,0x04000011,0x198fd08f,0x00000000,0x0000002f,0x04000001,0x05008f00,
  0x20000011,0x6784d887,0x00000000,0xfffffff8,0xa0001023,0xc0000420,0x11c0d88e,
  0x2784d900,0xfffffff0,0x00000000,0xff810000,0xff000000,0xff500075,0x14004023,
  0xe788d88c,0xe788d989,0x40000000,0x00000000,0x00000000,0xff433043,0xff820000,
  0xff810000,0x24004123,0x6786d000,0x218ed920,0x80000000,0x00000000,0x00000010,
  0xff433001,0xff820000,0x00001001,0xc0000440,0x04000081,0xa18c8921,0x00004001,
  0x40000000,0xff31100e,0xb0021044,0xc0000841,0x2700d884,0x11848e8e,0x2786d187,
  0x00000000,0x00000018,0x00000000,0x52610000,0x126144e1,0xff830000,0x20000101,
  0x138ec88e,0xa0009024,0xc0000420,0x1100c08c,0x2700d88e,0x50000008,0x00000000,
  0xff810000,0xa0000122,0x678cd884,0x678cd98e,0x00000000,0x00000000,0x00000000,
  0xff820000,0xff810000,0x20000001,0x138e848e,0x20000001,0x118ec88e,0xff50000b,
  0xa4004034,0x1188d800,0x6784c001,0x6786d18c,0x80000000,0x00000000,0x00000010,
  0x00000000,0xff444043,0xff810000,0x04000011,0x6700d88d,0x00000000,0x00000000,
  0xff810000,0x00004001,0x40000000,0xff311027,0x60000022,0x1d01d08f,0x0101dd01,
  0x00007fff,0xffffffff,0x0000002f,0x20000111,0x208fd840,0x00000000,0x00000000,
  0xff810000,0x00001001,0xc0000860,0x90000022,0x2700d88c,0x278cd984,0x00000000,
  0x00000000,0x00000000,0xff820000,0xff810000,0x90009034,0xc0000420,0x2700d88d,
  0x2786d187,0x50000008,0x00000000,0x00000018,0x00000000,0xff810000,0x00004001,
  0x40000000,0xff311025,0x04009013,0xc0000420,0x1100c000,0x50000008,0x24004023,
  0x11c0d88f,0x678cd984,0x40000000,0x00000000,0x00000000,0xff433044,0xff820000,
  0xff810000,0x04000011,0x198fd08f,0x00000000,0x0000002f,0x04000001,0x05008f00,
  0x20000011,0x6784d887,0x00000000,0xfffffff8,0xa0001023,0xc0000420,0x11c0d88e,
  0x2784d900,0xfffffff0,0x00000000,0xff810000,0xff000000,0xff500076,0x60004123,
  0xe784c089,0x218ed820,0x40000000,0x00000000,0x00000000,0xff433043,0xff810000,
  0x60004033,0x9d89d08f,0xb189dd89,0x80000000,0x00000000,0x43380000,0x00000000,
  0x0000002f,0xff454056,0x20000191,0xa08fd821,0x00000000,0x00000000,0xff810000,
  0x00001001,0xc0000440,0x20011012,0xc0000461,0x1089c08c,0x44610000,0x60004013,
  0x118ec08a,0x11848e8e,0x40000000,0xff412043,0x20000011,0x138ed08e,0x00000000,
  0x00000010,0xff50000b,0xe0004124,0x3ec48c89,0x218e8460,0xe78ec000,0xc0000000,
  0x00000000,0xff42300b,0x60001033,0xc0000840,0x9d00d08f,0xb100dd00,0x00000000,
  0x43380000,0x00000000,0x0000002f,0x20000111,0x208fd820,0x00000000,0x00000000,
  0xff810000,0x20011012,0xc0000460,0x118ac08e,0x44e00000,0x60000012,0x1000c08b,
  0x138ec88e,0x00000000,0x20001012,0xc0000c20,0x008c8b8c,0x00000000,0xff500077,
  0x60004123,0xe784c089,0x218ed820,0x40000000,0x00000000,0x00000000,0xff433043,
  0xff810000,0x60004033,0x9d89d08f,0xb189dd89,0x80000000,0x00000000,0x43380000,
  0x00000000,0x0000002f,0xff454056,0x20000191,0xa08fd821,0x00000000,0x00000000,
  0xff810000,0x00001001,0xc0000440,0x20011012,0xc0000461,0x1089c08c,0x44610000,
  0x60004013,0x118ec08a,0x11848e8e,0x40000000,0xff412043,0x20000011,0x138ed08e,
  0x00000000,0x00000010,0xff50000b,0xe0004124,0x3ec48c89,0x218e8460,0xe78ec000,
  0xc0000000,0x00000000,0xff42300b,0x60001033,0xc0000840,0x9d00d08f,0xb100dd00,
  0x00000000,0x43380000,0x00000000,0x0000002f,0x20000111,0x208fd820,0x00000000,
  0x00000000,0xff810000,0x20011012,0xc0000460,0x118ac08e,0x44e00000,0x60000012,
  0x1000c08b,0x138ec88e,0x00000000,0x20001012,0xc0000c20,0x048c8b8c,0x00000000,
  0xff500078,0x60004123,0xe784c089,0x218ed820,0x40000000,0x00000000,0x00000000,
  0xff433043,0xff810000,0x60004033,0x9d89d08f,0xb189dd89,0x80000000,0x00000000,
  0x43380000,0x00000000,0x0000002f,0xff454056,0x20000191,0xa08fd821,0x00000000,
  0x00000000,0xff810000,0x00001001,0xc0000440,0x20011012,0xc0000461,0x1089c08c,
  0x44610000,0x60004013,0x118ec08a,0x11848e8e,0x40000000,0xff412043,0x20000011,
  0x138ed08e,0x00000000,0x00000010,0xff000000,0xff50000b,0xe0004124,0x3ec48c89,
  0x218e8460,0xe78ec000,0xc0000000,0x00000000,0xff42300b,0x60001033,0xc0000840,
  0x9d00d08f,0xb100dd00,0x00000000,0x43380000,0x00000000,0x0000002f,0x20000111,
  0x208fd820,0x00000000,0x00000000,0xff810000,0x20011012,0xc0000460,0x118ac08e,
  0x44e00000,0x60000012,0x1000c08b,0x138ec88e,0x00000000,0x20001012,0xc0000c20,
  0x088c8b8c,0x00000000,0xff500079,0x60004123,0xe784c089,0x218ed820,0x40000000,
  0x00000000,0x00000000,0xff433043,0xff810000,0x60004033,0x9d89d08f,0xb189dd89,
  0x80000000,0x00000000,0x43380000,0x00000000,0x0000002f,0xff454056,0x20000191,
  0xa08fd821,0x00000000,0x00000000,0xff810000,0x00001001,0xc0000440,0x20011012,
  0xc0000461,0x1089c08c,0x44610000,0x20001012,0xc0000820,0x3ec48c89,0x00000000,
  0xff50007a,0x60004123,0xe784c089,0x218ed820,0x40000000,0x00000000,0x00000000,
  0xff433043,0xff810000,0x60004033,0x9d89d08f,0xb189dd89,0x80000000,0x00000000,
  0x43380000,0x00000000,0x0000002f,0xff454056,0x20000191,0xa08fd821,0x00000000,
  0x00000000,0xff810000,0x00001001,0xc0000440,0x20011012,0xc0000461,0x1089c08c,
  0x44610000,0x60000022,0x0cc68c8c,0x11c0dc89,0x00000000,0x80808080,0x00010203,
  0x20800191,0x4d8c8c8c,0x0f890000,0x00000000,0x20001012,0xc0000820,0x3ec48c89,
  0x00000000,0xff50007b,0x60004123,0xe784c089,0x218ed820,0x40000000,0x00000000,
  0x00000000,0xff433043,0xff810000,0x60004033,0x9d89d08f,0xb189dd89,0x80000000,
  0x00000000,0x43380000,0x00000000,0x0000002f,0xff454056,0x20000191,0xa08fd821,
  0x00000000,0x00000000,0xff810000,0x00001001,0xc0000440,0x20011012,0xc0000461,
  0x1089c08c,0x44610000,0x20000011,0x088cd88c,0x00000000,0xffffffff,0x20001012,
  0xc0000820,0x3ec48c89,0x00000000,0xff50007c,0xe0004024,0xe784c000,0x218ed820,
  0xe784c801,0x40000000,0x00000000,0xff423043,0xff810000,0x200040a2,0x11c0dc8a,
  0x80000000,0x00000000,0x43380000,0x00000000,0xff443056,0x60000022,0x9d00d089,
  0x9d01d18f,0x00000000,0x0000002f,0x0000002f,0x60000012,0xb1008a00,0xb1018a01,
  0x00000000,0x600010a3,0xc0000440,0xa089d821,0xa08fd922,0x00000000,0x00000000,
  0xff820000,0xff810000,0x00040000,0x61624060,0x60011023,0xc0000460,0x1000c08c,
  0x0001d08b,0x000000ff,0x44604860,0x20000001,0x188c8b8c,0x20001012,0xc0000820,
  0x3ec48c89,0x00000000,0xff000000,0xff50007d,0xe0004024,0xe784c000,0x218ed820,
  0xe784c801,0x40000000,0x00000000,0xff423043,0xff810000,0x200040a2,0x11c0dc8a,
  0x80000000,0x00000000,0x43380000,0x00000000,0xff443056,0x60000022,0x9d00d089,
  0x9d01d18f,0x00000000,0x0000002f,0x0000002f,0x60000012,0xb1008a00,0xb1018a01,
  0x00000000,0x600010a3,0xc0000440,0xa089d821,0xa08fd922,0x00000000,0x00000000,
  0xff820000,0xff810000,0x00040000,0x61624060,0x60011023,0xc0000460,0x1000c08c,
  0x0001d08b,0x000000ff,0x44604860,0x20000001,0x1a8c8b8c,0x20001012,0xc0000820,
  0x3ec48c89,0x00000000,0xff50007e,0xe0004024,0xe784c000,0x218ed820,0xe784c801,
  0x40000000,0x00000000,0xff423043,0xff810000,0x200040a2,0x11c0dc8a,0x80000000,
  0x00000000,0x43380000,0x00000000,0xff443056,0x60000022,0x9d00d089,0x9d01d18f,
  0x00000000,0x0000002f,0x0000002f,0x60000012,0xb1008a00,0xb1018a01,0x00000000,
  0x600010a3,0xc0000440,0xa089d821,0xa08fd922,0x00000000,0x00000000,0xff820000,
  0xff810000,0x00040000,0x61624060,0x60011023,0xc0000460,0x1000c08c,0x0001d08b,
  0x000000ff,0x44604860,0x20000001,0x1c8c8b8c,0x20001012,0xc0000820,0x3ec48c89,
  0x00000000,0xff50007f,0xe0004024,0xe784c000,0x218ed820,0xe784c801,0x40000000,
  0x00000000,0xff423043,0xff810000,0x200040a2,0x11c0dc8a,0x80000000,0x00000000,
  0x43380000,0x00000000,0xff443056,0x60000022,0x9d00d089,0x9d01d18f,0x00000000,
  0x0000002f,0x0000002f,0x60000012,0xb1008a00,0xb1018a01,0x00000000,0x600010a3,
  0xc0000440,0xa089d821,0xa08fd922,0x00000000,0x00000000,0xff820000,0xff810000,
  0x00040000,0x61624060,0x60011023,0xc0000460,0x1000c08c,0x0001d08b,0x000000ff,
  0x44604860,0x20000001,0x148c8b8c,0x20001012,0xc0000820,0x3ec48c89,0x00000000,
  0xff500080,0xe0004024,0xe784c000,0x218ed820,0xe784c801,0x40000000,0x00000000,
  0xff423043,0xff810000,0x200040a2,0x11c0dc8a,0x80000000,0x00000000,0x43380000,
  0x00000000,0xff443056,0x60000022,0x9d00d089,0x9d01d18f,0x00000000,0x0000002f,
  0x0000002f,0x60000012,0xb1008a00,0xb1018a01,0x00000000,0x600010a3,0xc0000440,
  0xa089d821,0xa08fd922,0x00000000,0x00000000,0xff820000,0xff810000,0x00040000,
  0x61624060,0x60011023,0xc0000460,0x1000c08c,0x0001d08b,0x000000ff,0x44604860,
  0x20000001,0x168c8b8c,0x20001012,0xc0000820,0x3ec48c89,0x00000000,0xff000000,
  0xff500043,0xe4004145,0x6786d08c,0x6784d987,0x11848e8e,0x6784da8a,0x80000000,
  0x00000000,0xfffffff0,0xfffffff8,0x00000010,0xff455005,0x30000022,0x018adc8a,
  0x678cda89,0x00000000,0x00007fff,0xffffffff,0xff830000,0x24000012,0xe78ad88f,
  0x138ec88e,0x00000000,0xff810000,0xa0000022,0x118ed88b,0x278cd98e,0x00000000,
  0x00000000,0x00000000,0xff820000,0xff810000,0xf00000b4,0x2786d087,0x218b8960,
  0x118cc000,0x278cd984,0x00000000,0x00000000,0x00000018,0xff820000,0x04000001,
  0xe1c08fd1,0x00001001,0xc0000860,0x00009012,0xc0000420,0x50000008,0x00000000,
  0x60004023,0x678cd884,0x1900c38e,0x80000000,0x00000000,0x00000000,0xff433044,
  0xff810000,0x20000101,0x2100c0e0,0x00001001,0xc0000860,0xff50000b,0xe0004134,
  0x678cd88b,0x2100c040,0x6784d98c,0x40000000,0x00000000,0xfffffff0,0x00000000,
  0xff444026,0xff810000,0x60000022,0x138b848b,0x018cdc8c,0x00000000,0x00007fff,
  0xffffffff,0x20001012,0xc0000460,0x118bc88e,0x00000000,0x20000111,0x678cd887,
  0x00000000,0x00000000,0xff810000,0xa0000112,0x6687c08b,0x6487c089,0x00000000,
  0x2c000013,0x1989c389,0x1187c487,0x1b8bc58b,0x24000112,0x67898889,0x018bd08b,
  0x000007f8,0x04000001,0x61c089d1,0x00001001,0xc0000420,0xff500026,0x34004134,
  0x2287d840,0xe487d98c,0x1184c08b,0x40000000,0x00000000,0xfffffffd,0x00000000,
  0xff444003,0xff810000,0x600040a3,0xe78bd88a,0x93c08c8c,0x80000000,0x00000000,
  0xfffffff0,0xff433023,0x20001012,0xc0000460,0x998cc389,0x00000000,0x60000012,
  0x11848984,0x1d8ad08f,0x0000002f,0x20000091,0x208fd840,0x00000000,0x00000000,
  0xff810000,0x60000022,0x1384d084,0x018add8c,0x00007fff,0xffffffff,0x00000010,
  0x20011012,0xc0000860,0x118bc084,0x44600000,0x80000011,0x2784d887,0x00000000,
  0xfffffff8,0x20000111,0x678cd887,0x00000000,0x00000000,0xff810000,0xa0000112,
  0x6687c08b,0x6487c089,0x00000000,0x2c000013,0x1989c389,0x1187c487,0x1b8bc58b,
  0x24000112,0x67898889,0x018bd08b,0x000007f8,0x04000001,0x61c089d1,0x00001001,
  0xc0000420,0xff50000d,0x60000112,0x678bd88a,0x1187c08c,0xfffffff0,0x60000022,
  0x018cd88c,0x1d8ad18f,0x00000000,0x0000002f,0xfffffff8,0xe0000133,0x208fd840,
  0x13848c84,0x018add8c,0x00000000,0x00007fff,0xffffffff,0x00000000,0xff810000,
  0x20011012,0xc0000860,0x118bc084,0x44600000,0x80000011,0x2784d887,0x00000000,
  0xfffffff8,0x20000111,0x678cd887,0x00000000,0x00000000,0xff810000,0xa0000112,
  0x6687c08b,0x6487c089,0x00000000,0x2c000013,0x1989c389,0x1187c487,0x1b8bc58b,
  0x24000112,0x67898889,0x018bd08b,0x000007f8,0x04000001,0x61c089d1,0x00001001,
  0xc0000420,0xff50000f,0x00004001,0x40000000,0xff311000,0x24000192,0x11c0d801,
  0x118cc000,0x00000000,0xff810000,0x00009012,0xc0000420,0x50000008,0x00000000,
  0x30004223,0x11c0c000,0x678cd884,0x80000000,0x00000000,0x00000000,0xff43300b,
  0xff810000,0x00001001,0xc0000820,0xff000000,0xff500081,0x04000001,0x11c0c080,
  0x04000001,0x6780c080,0xff500082,0x04000011,0x6488d88e,0x00000000,0x00000000,
  0xff810000,0x04000011,0x238ed840,0x00000000,0x00000000,0xff810000,0x00004001,
  0x40000000,0xff411005,0x00001001,0xc0000460,0x00004001,0x40000000,0xff411001,
  0x00001001,0xc0000420,0xff500083,0x04000011,0x6488d88e,0x00000000,0x00000000,
  0xff810000,0x04000011,0x238ed840,0x00000000,0x00000000,0xff810000,0x00004001,
  0x40000000,0xff411005,0x00001001,0xc0000460,0x04000011,0x238ed840,0x00000000,
  0x00000000,0xff810000,0x00004001,0x40000000,0xff411005,0x00001001,0xc0000440,
  0x04000011,0x6688d889,0x00000000,0x00000000,0xff810000,0x04000001,0x1389c189,
  0x10000011,0x2688d889,0x00000000,0x00000000,0xff810000,0x04000001,0x2189c040,
  0x00004001,0x40000000,0xff411001,0x00001001,0xc0000440,0x04000011,0x238ed840,
  0x00000000,0x00000000,0xff810000,0x00004001,0x40000000,0xff411005,0x00001001,
  0xc0000440,0xff50000b,0x04000011,0x6786d08c,0x00000000,0x00000010,0x10000011,
  0x278cd884,0x00000000,0x00000000,0xff810000,0x04000001,0x1187c001,0x04000001,
  0x118cc000,0x00004001,0x40000000,0xff311028,0x00009012,0xc0000420,0x50000008,
  0x00000000,0xff50000d,0x04000011,0x678cd884,0x00000000,0x00000000,0xff810000,
  0xff50000e,0x04000011,0x6487d88b,0x00000000,0xfffffffd,0x04000001,0x198bc38b,
  0xff50000f,0x04000011,0x6487d88a,0x00000000,0xfffffffc,0x04000001,0x198ac38a,
  0x04000011,0x6587d88e,0x00000000,0xfffffffe,0x04000001,0x1b8ec58c,0x04000001,
  0x198ec38e,0x04000011,0x018cd08c,0x00000000,0x000007f8,0x04000011,0x018ed08d,
  0x00000000,0x000007f8,0x04000001,0x11888a8a,0x04000011,0x678ad88a,0x00000000,
  0x00000000,0xff810000,0x04000001,0x61c08ad1,0x00001001,0xc0000420,0xff000000,
  0xff500084,0x04000001,0x11c0c080,0x04000001,0x6780c080,0xff500085,0x10000011,
  0x2786d087,0x00000000,0x00000018,0xff500086,0x04000001,0x11848e8e,0x04000001,
  0x138ec88e,0x04000011,0x6786d08c,0x00000000,0x00000010,0x10000011,0x278cd884,
  0x00000000,0x00000000,0xff810000,0x10000011,0x278cd88e,0x00000000,0x00000000,
  0xff810000,0x04000001,0x1187c001,0x04000001,0x118cc000,0x00004001,0x40000000,
  0xff311029,0x00009012,0xc0000420,0x50000008,0x00000000,0x04000001,0x11c0c089,
  0x10000011,0x2786d089,0x00000000,0x00000018,0x04000011,0x678cd884,0x00000000,
  0x00000000,0xff810000,0x04000001,0x1100c08b,0x04000011,0x678cd88e,0x00000000,
  0x00000000,0xff810000,0x04000001,0x138e848e,0x04000001,0x61c08bd1,0x04000011,
  0x6487d88b,0x00000000,0xfffffffd,0x04000001,0x198bc38b,0x04000001,0x118ec88e,
  0x00001001,0xc0000420,0xff500087,0xff000000,0x04000011,0x6786d08c,0x00000000,
  0x00000010,0x10000011,0x278cd884,0x00000000,0x00000000,0xff810000,0x04000001,
  0x1187c001,0x04000001,0x118cc000,0x00004001,0x40000000,0xff31102a,0x00009012,
  0xc0000420,0x50000008,0x00000000,0x04000011,0x678cd884,0x00000000,0x00000000,
  0xff810000,0x04000001,0x1387c487,0x1c000113,0x6687c089,0x1187c487,0x6487c08a,
  0xf0000024,0x198ac38a,0x1b89cd8e,0x1b89d08c,0x1b89c58b,0x00000015,0x70000123,
  0x678a888a,0x018ed88e,0x018bd18b,0x000007f8,0x0007fff8,0x64000023,0x61c08ad1,
  0x018cd08c,0x018ed18d,0x000007f8,0x000007f8,0x00001001,0xc0000420,0xff000000,
  0xff500058,0x0400c033,0x0180dd82,0x40000000,0x00000000,0x00000000,0x7fffffff,
  0xffffffff,0x00000090,0xff464003,0x04000111,0x0180dc81,0x80000000,0x00000000,
  0x04004222,0x2f82dca1,0xf0000000,0x00000000,0x43300000,0x00000000,0x00001001,
  0xc0000441,0x04000191,0x3182dc83,0x43300000,0x00000000,0x04000191,0x3383dc83,
  0x43300000,0x00000000,0x04000181,0x05838183,0x04000011,0x11c0dc81,0x3ff00000,
  0x00000000,0x04000181,0x2f808320,0x04010191,0x33838183,0x00000000,0x04600000,
  0xff50000d,0x04011012,0xc0000c20,0x1183c080,0x04e10000,0xff50005a,0x0400c033,
  0x0180dd82,0x40000000,0x00000000,0x00000000,0x7fffffff,0xffffffff,0x00000090,
  0xff464003,0x04000111,0x0180dc81,0x80000000,0x00000000,0x04004222,0x2f82dca1,
  0xf0000000,0x00000000,0x43300000,0x00000000,0x00001001,0xc0000441,0x04000191,
  0x3182dc83,0x43300000,0x00000000,0x04000191,0x3383dc83,0x43300000,0x00000000,
  0x04000181,0x05838183,0x04000011,0x11c0dc81,0xbff00000,0x00000000,0x04000181,
  0x2f8083c0,0x04010191,0x33838183,0x00000000,0x04600000,0xff50000d,0x04011012,
  0xc0000c20,0x1183c080,0x04e10000,0xff500088,0x0400c033,0x0180dd82,0x40000000,
  0x00000000,0x00000000,0x7fffffff,0xffffffff,0x00000090,0xff464003,0x04000111,
  0x0180dc81,0x80000000,0x00000000,0x04004222,0x2f82dca1,0xf0000000,0x00000000,
  0x43300000,0x00000000,0x00001001,0xc0000441,0x04000191,0x3182dc83,0x43300000,
  0x00000000,0x04000191,0x3383dc83,0x43300000,0x00000000,0x04000181,0x2f828320,
  0x040101a1,0x3383dc83,0x00000000,0x3ff00000,0x00000000,0x04600000,0x04000181,
  0x05838183,0xff50000d,0x04011012,0xc0000c20,0x1183c080,0x04e10000,0xff500089,
  0x00008011,0x00000000,0x00000000,0x00000090,0x82000001,0x49808182,0x04000011,
  0x0182dc83,0x7fffffff,0xffffffff,0x04000011,0x2f83dca0,0x43300000,0x00000000,
  0x00004001,0x40000000,0xff411002,0x00001001,0xc0000440,0x04000011,0x0182dc84,
  0x80000000,0x00000000,0x04000011,0x3183dc83,0x43300000,0x00000000,0x04000011,
  0x3383dc83,0x43300000,0x00000000,0x04000001,0x05838483,0x04000001,0x2f828320,
  0x00004001,0x40000000,0xff411001,0x00001001,0xc0000460,0x04000011,0x3383dc83,
  0x3ff00000,0x00000000,0xff50000b,0x04000001,0x39818381,0x04000001,0x33808180,
  0x00004001,0xf0000000,0x00001001,0xc0000c20,0xff50000c,0x04000001,0x39818281,
  0x04000001,0x33808180,0x00004001,0xf0000000,0x00001001,0xc0000c20,0xff50008a,
  0x00004001,0x40000000,0xff31102b,0x04000001,0x11c5c000,0x00009012,0xc0000420,
  0x50000008,0x00000000,0xff50008b,0x04000001,0x11c0c080,0x04000001,0x6780c080,
  0xff500025,0x00004001,0x40000000,0xff31102c,0x1c000123,0x6786d08b,0x1100c001,
  0x6788d987,0x00000000,0x00000010,0xff820000,0x90000022,0x278bd884,0x2787d98b,
  0x00000000,0x00000000,0x00000000,0xff820000,0xff810000,0x18009024,0xc0000420,
  0x1187c000,0x278bd88c,0x50000008,0x00000000,0xff810000,0x04004012,0x6787d880,
  0xf0000000,0x00000000,0xff810000,0x00001001,0xc0000c20,0xff000000,0xff50008c,
  0x0000c012,0x40000000,0x040000c4,0x00000110,0xff432002,0x14004123,0x6680d882,
  0x6480d984,0x80000000,0x00000000,0x00000000,0xff433001,0xff820000,0xff810000,
  0x0c000012,0x13c08282,0x1384c184,0x00000000,0x0c100112,0x58ec8283,0x2184c0c0,
  0x01c00000,0x04011012,0xc0000440,0x1984c384,0x04e00000,0xff50000b,0x0c000022,
  0x1184d081,0x1180d985,0x00000000,0x00000000,0x00000040,0xff820000,0x0c000012,
  0x67858485,0x1384c884,0x00000000,0x04000101,0x2184c0c0,0x10001012,0xc0000860,
  0x27838185,0x00000000,0xff50000c,0xb4000044,0x6780d800,0x6780d981,0x6780da01,
  0x6780db02,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff840000,
  0xff830000,0xff820000,0xff810000,0x34000033,0x6780d803,0x6780d904,0x6780da05,
  0x00000000,0x00000000,0x00000000,0x00000000,0xff830000,0xff820000,0xff810000,
  0x14000022,0x6780d807,0x6780d906,0x00000000,0x00000000,0x00000000,0xff820000,
  0xff810000,0x94000013,0x61c081d1,0x2783c000,0x2783c801,0x90000022,0x2783d002,
  0x2783d103,0x00000000,0x00000018,0x00000010,0x90000022,0x2783d004,0x2783d105,
  0x00000000,0x00000028,0x00000020,0x90009034,0xc0000420,0x2783d006,0x2783d107,
  0x50000004,0x00000000,0x00000038,0x00000030,0x04004092,0x6680d881,0x80000000,
  0x00000000,0xff422003,0xff810000,0x00004001,0x40000000,0xff31102d,0x04000101,
  0x2181c040,0x1c021034,0xc0000840,0x6780d800,0x1181c002,0x1183c001,0x00000000,
  0x12600000,0x04e00960,0xff830000,0x00009012,0xc0000420,0x50000004,0x00000000,
  0x00004001,0xf0000000,0x00001001,0xc0000c20,0xff50000d,0x90004023,0xa780d800,
  0xa780d901,0xf0000000,0x00000000,0x00000000,0xff820000,0xff810000,0x90000022,
  0xa780d802,0xa780d903,0x00000000,0x00000000,0x00000000,0xff820000,0xff810000,
  0x90000022,0xa780d804,0xa780d905,0x00000000,0x00000000,0x00000000,0xff820000,
  0xff810000,0x90001023,0xc0000c20,0xa780d806,0xa780d907,0x00000000,0x00000000,
  0xff820000,0xff810000,0xff000000,0xff700000,0xff000000,0xa40040a4,0x1187c402,
  0x67848b8b,0x67848e8e,0x40000000,0x00000000,0xff423033,0x0c000022,0x6502d801,
  0x1302d900,0x00000000,0x00000000,0xfffffffe,0xff820000,0xff000000,0xe0000023,
  0x2f8b8e22,0x1d8bd08f,0x1d8ed18c,0x0000002f,0x0000002f,0xff000000,0xe0000023,
  0x2f8b8ea2,0x1d8bd08f,0x1d8ed18c,0x0000002f,0x0000002f,0xff000000,0xe0000023,
  0x2f8b8e42,0x1d8bd08f,0x1d8ed18c,0x0000002f,0x0000002f,0xff000000,0xe0000023,
  0x2f8b8ec2,0x1d8bd08f,0x1d8ed18c,0x0000002f,0x0000002f,0xff000000,0x60000122,
  0x208fd820,0x208cd921,0x00000000,0x00000000,0x00000000,0xff820000,0xff810000,
  0x040c0021,0x1901c201,0x00000000,0x000052a2,0x620050a1,0x60614060,0x0c011023,
  0xc0000460,0x1102c087,0x11000187,0x00000000,0x04620861,0x1c000113,0x6687c089,
  0x1187c487,0x6487c08a,0xf0000024,0x198ac38a,0x1b89cd8e,0x1b89d08c,0x1b89c58b,
  0x00000015,0x70000123,0x678a888a,0x018ed88e,0x018bd18b,0x000007f8,0x0007fff8,
  0x64000023,0x61c08ad1,0x018cd08c,0x018ed18d,0x000007f8,0x000007f8,0x00001001,
  0xc0000420,0xff000000,0xa40040a4,0x1187c487,0x67848e8e,0x67848b8b,0x40000000,
  0x00000000,0xff423003,0x14000022,0x6587d800,0x1387d901,0x00000000,0x00000000,
  0xfffffffe,0xff820000,0x60004013,0x2f8b8e62,0x2f8b8e03,0x80000000,0xff412002,
  0xc0004023,0x1d8bd08f,0x1d8ed18c,0xc0000000,0x0000002f,0x0000002f,0xff433001,
  0x640000a3,0x1900c200,0x208cd820,0x208fd921,0x00000000,0x00000000,0xff820000,
  0xff810000,0x00040000,0x60614060,0x00041011,0xc0000460,0x00000000,0x62636061,
  0xff000000,0x00001001,0xc0000861,0xff50000b,0x04000001,0x11010087,0xff50000c,
  0xff000000,0x00001001,0xc0000c41,0xff50000c,0x04000001,0x11010087,0xff50000b,
  0xff000000,0x1c000113,0x6687c089,0x1187c487,0x6487c08a,0xf0000024,0x198ac38a,
  0x1b89cd8e,0x1b89d08c,0x1b89c58b,0x00000015,0x70000123,0x678a888a,0x018ed88e,
  0x018bd18b,0x000007f8,0x0007fff8,0x64000023,0x61c08ad1,0x018cd08c,0x018ed18d,
  0x000007f8,0x000007f8,0x00001001,0xc0000420,0xff50000d,0x00004001,0x40000000,
  0xff411038,0x60000122,0x208cd840,0x208fd941,0x00000000,0x00000000,0x00000000,
  0xff820000,0xff810000,0x00040000,0x60616260,0x00001001,0xc0000460,0xe8004045,
  0x208cd862,0x218b8e40,0x208c8f41,0x018bdd8b,0x40000000,0x00000000,0x00007fff,
  0xffffffff,0x00000000,0xff455037,0xff810000,0x20000091,0xe78bd88c,0x00000000,
  0x00000000,0xff810000,0x00041011,0xc0000c40,0x00000000,0x61624061,0x60001023,
  0xc0000861,0xe48cd889,0xa18cc040,0x00000000,0x00000000,0xff810000,0x00001081,
  0xc0000840,0x20000111,0x2389d840,0x00000000,0x00000000,0xff810000,0x00001001,
  0xc0000860,0xff000000,0x20001012,0xc0000420,0x11c0c08c,0x00000000,0xff000000,
  0x20001012,0xc0000420,0x11c0c18c,0x00000000,0xff000000,0x64004024,0x1187c487,
  0x67848b8b,0x13858e8e,0x40000000,0x00000000,0xff423003,0x24004023,0x6587d800,
  0x678ed98e,0x80000000,0xfffffff8,0xfffffffe,0xff433002,0x04004012,0x1387d801,
  0xc0000000,0x00000000,0xff422001,0xff810000,0x60000022,0x1d8bd08f,0x018bdd8b,
  0x00007fff,0xffffffff,0x0000002f,0x60000112,0x208fd841,0x218b8e40,0x00000000,
  0xff810000,0x04001012,0xc0000461,0x1900c200,0x00000000,0xff000000,0x00001001,
  0xc0000860,0xff50000b,0x04000001,0x11010087,0xff50000c,0xff000000,0x00001001,
  0xc0000c40,0xff50000c,0x04000001,0x11010087,0xff50000b,0xff000000,0x1c000113,
  0x6687c089,0x1187c487,0x6487c08a,0xf0000024,0x198ac38a,0x1b89cd8e,0x1b89d08c,
  0x1b89c58b,0x00000015,0x70000123,0x678a888a,0x018ed88e,0x018bd18b,0x000007f8,
  0x0007fff8,0x64000023,0x61c08ad1,0x018cd08c,0x018ed18d,0x000007f8,0x000007f8,
  0x00001001,0xc0000420,0xff50000d,0x20004112,0x208fd840,0x40000000,0x00000000,
  0xff422038,0xff810000,0x00001001,0xc0000860,0x00001001,0xc0000420,0xff000000,
  0xa4004024,0x1187c487,0x67848b8b,0x67858e8e,0x40000000,0x00000000,0xff423003,
  0x0c004023,0x6587d800,0x1387d901,0xc0000000,0x00000000,0xfffffffe,0xff433001,
  0xff820000,0x00004001,0x80000000,0xff411002,0xe0000023,0x2f8e8b62,0x2f8e8b03,
  0x1d8bd08f,0x00000000,0x0000002f,0x20000111,0x208fd820,0x00000000,0x00000000,
  0xff810000,0x04041012,0xc0000460,0x1900c200,0x62636061,0xff000000,0x00001001,
  0xc0000861,0xff50000b,0x04000001,0x11010087,0xff50000c,0xff000000,0x00001001,
  0xc0000c41,0xff50000c,0x04000001,0x11010087,0xff50000b,0xff000000,0x1c000113,
  0x6687c089,0x1187c487,0x6487c08a,0xf0000024,0x198ac38a,0x1b89cd8e,0x1b89d08c,
  0x1b89c58b,0x00000015,0x70000123,0x678a888a,0x018ed88e,0x018bd18b,0x000007f8,
  0x0007fff8,0x64000023,0x61c08ad1,0x018cd08c,0x018ed18d,0x000007f8,0x000007f8,
  0x00001001,0xc0000420,0xff50000d,0x20004112,0x208fd840,0x40000000,0x00000000,
  0xff422038,0xff810000,0x00001001,0xc0000860,0x00001001,0xc0000420,0xff000000,
  0x64004024,0x1187c487,0x67848b8b,0x1b8ec38e,0x40000000,0x00000000,0xff423038,
  0x0c0000a2,0x6587d800,0x1387d901,0x00000000,0x00000000,0xfffffffe,0xff820000,
  0x60000022,0x098ed88e,0x1d8bd18b,0x00000000,0x0000002f,0xffffffff,0x640000a3,
  0x1900c200,0x208b8e40,0x208bd841,0x00000000,0x00000000,0xff810000,0x00080010,
  0x00000000,0x00006261,0x60616062,0xff000000,0x04011012,0xc0000442,0x11010087,
  0x04600000,0xff000000,0x04011012,0xc0000442,0x11010087,0x04610000,0xff000000,
  0x1c000113,0x6687c089,0x1187c487,0x6487c08a,0xf0000024,0x198ac38a,0x1b89cd8e,
  0x1b89d08c,0x1b89c58b,0x00000015,0x70000123,0x678a888a,0x018ed88e,0x018bd18b,
  0x000007f8,0x0007fff8,0x64000023,0x61c08ad1,0x018cd08c,0x018ed18d,0x000007f8,
  0x000007f8,0x00001001,0xc0000420,0xff000000,0x24000012,0x1187c487,0x67848e8e,
  0x00000000,0x0c0000a2,0x6587d800,0x1387d901,0x00000000,0x00000000,0xfffffffe,
  0xff820000,0x20000011,0x1d8ed08f,0x00000000,0x0000002f,0x24000092,0x1900c200,
  0x208fd820,0x00000000,0xff810000,0xff000000,0x04010011,0x11010087,0x00000000,
  0x04600000,0xff000000,0x04010011,0x11010087,0x00000000,0x04e00000,0xff000000,
  0x80000001,0x27848b8e,0xff000000,0x1c000113,0x6687c089,0x1187c487,0x6487c08a,
  0xf0000024,0x198ac38a,0x1b89cd8e,0x1b89d08c,0x1b89c58b,0x00000015,0x70000123,
  0x678a888a,0x018ed88e,0x018bd18b,0x000007f8,0x0007fff8,0x64000023,0x61c08ad1,
  0x018cd08c,0x018ed18d,0x000007f8,0x000007f8,0x00001001,0xc0000420,0xff000000,
  0x34004124,0xe687c089,0xe487c08a,0x67848b8c,0x40000000,0x00000000,0xff423039,
  0x30000012,0x998ac38a,0x1d8cd08c,0x0000002c,0x30000022,0xe78a888a,0x018cdc8c,
  0x00000000,0xffffffff,0xfffffff8,0x20000001,0x118c8e8c,0x20000001,0x218cc040,
  0x04000081,0xe1c08ad2,0xe8021045,0xc0000460,0x1187c487,0x1b89cd8e,0x1b89d08c,
  0x1b89c58b,0x00000000,0x00000015,0x48605060,0x08604460,0x60000022,0x018ed88e,
  0x018bd18b,0x00000000,0x000007f8,0x0007fff8,0x60001023,0xc0000820,0x018cd08c,
  0x018ed18d,0x000007f8,0x000007f8,0xff000000,0x34004124,0xe687c089,0xe487c08a,
  0x67848b00,0x80000000,0x00000000,0xff423039,0x30000012,0x998ac38a,0x1d00d08f,
  0x0000002f,0x30000112,0xe78a888a,0x208fd820,0x00000000,0xff810000,0xe4021045,
  0xc0000860,0xe1c08ad1,0x1b89cd8e,0x1b89d08c,0x1b89c58b,0x00000000,0x00000015,
  0x50600000,0x44604860,0x68000023,0x1187c487,0x018ed88e,0x018bd18b,0x000007f8,
  0x0007fff8,0x60001023,0xc0000420,0x018cd08c,0x018ed18d,0x000007f8,0x000007f8,
  0xff000000,0xb8000124,0x1187c487,0x6487c08a,0x67848e00,0x6687c089,0x00000000,
  0xf0000024,0x198ac38a,0x1b89cd8e,0x1b89c58b,0x27848b00,0x00000000,0x70000123,
  0x678a888a,0x018ed88e,0x1b89d18c,0x00000015,0x0007fff8,0x64000023,0x61c08ad1,
  0x018cd08c,0x018ed18d,0x000007f8,0x000007f8,0x20001012,0xc0000420,0x018bd08b,
  0x000007f8,0xff000000,0xfc000136,0x6687c089,0x1187c487,0x6487c08a,0x67848e01,
  0x11c0c200,0x118bc002,0x00000000,0xf0000034,0x198ac38a,0x1d01d001,0x1b89cd8e,
  0x1b89d18c,0x00000000,0x00000015,0x0000002f,0xf0000134,0x678a888a,0x2001d820,
  0x1b89c58b,0x018ed98e,0x00000000,0x0007fff8,0x00000000,0xff810000,0x64010023,
  0x61c08ad1,0x1300c100,0x018cd08c,0x000007f8,0x44600000,0x60000022,0x1900d000,
  0x018ed18d,0x00000000,0x000007f8,0x0000002f,0x60000022,0x0900d800,0x018bd18b,
  0x00000000,0x000007f8,0xffffffff,0x80001012,0xc0000420,0x27840200,0x00000000,
  0xff000000,0x34004124,0xe687c089,0xe487c08a,0x67848e00,0x40000000,0x00000000,
  0xff42303c,0xf0000034,0x998ac38a,0x1d00d08f,0x0900dd00,0x118bc001,0x80000000,
  0x00000000,0x0000002f,0x30000112,0xe78a888a,0x208fd820,0x00000000,0xff810000,
  0x04001012,0xc0000460,0xe1c08ad2,0x00000000,0xe8000024,0x1187c487,0x1b89cd8e,
  0x1b89d08c,0x1b89c58b,0x00000015,0xe0000023,0x018ed88e,0x018bd18b,0x27840100,
  0x000007f8,0x0007fff8,0x60001023,0xc0000820,0x018cd08c,0x018ed18d,0x000007f8,
  0x000007f8,0xff000000,0x34004024,0xe687c089,0xe487c08a,0x67848e8e,0x40000000,
  0x00000000,0xff423002,0x00004081,0x80000000,0xff41103e,0xf0000034,0x998ac38a,
  0x1d8ed08f,0x018edd8e,0x118bc003,0x00007fff,0xffffffff,0x0000002f,0xf40000c5,
  0xe68ed801,0xe78a888a,0x208fd940,0x218fda41,0x118ec000,0x00000000,0x00000000,
  0x00000000,0x00000000,0xff830000,0xff820000,0xff810000,0x00040000,0x60616262,
  0x00001001,0xc0000842,0x20001012,0xc0000460,0x3ec40102,0x00000000,0xff50000b,
  0xec000035,0x61c08ad1,0x1187c487,0x1b89cd8e,0x1b89d08c,0x1b89c58b,0x00000000,
  0x00000015,0xe0000023,0x018ed88e,0x018bd18b,0x27840302,0x000007f8,0x0007fff8,
  0x60001023,0xc0000420,0x018cd08c,0x018ed18d,0x000007f8,0x000007f8,0xff50000c,
  0xff000000,0x20004112,0x678ed88c,0x40000000,0x00000000,0xff422004,0xff810000,
  0x20000101,0x218cc040,0x00001001,0xc0000460,0xff50000d,0xff000000,0xff50003f,
  0x00004201,0x40000000,0xff31102e,0x00009012,0xc0000420,0x50000008,0x00000000,
  0x1c004124,0x6687c089,0x3ec40002,0x6487c08a,0x80000000,0x00000000,0xff42300b,
  0x0c000012,0x6487d803,0x198ac38a,0xfffffffd,0x10000081,0x678a888a,0x20001012,
  0xc0000820,0x1903c303,0x00000000,0xff000000,0xff50000e,0x20004112,0x648cd804,
  0x40000000,0x00000000,0xff42200d,0xff810000,0x04000111,0x2304d840,0x00000000,
  0x00000000,0xff810000,0x00001001,0xc0000460,0x00001001,0xc0000820,0xff000000,
  0xf0004025,0xe487c002,0x67858d8a,0x118bc000,0x67848c89,0x40000000,0xff41303a,
  0x20000001,0x1187c001,0x80000001,0xe601c004,0x70000023,0x1902c302,0x1d89d08f,
  0x31898a01,0x00000000,0x0000002f,0x30000112,0xe7028802,0x208fd820,0x00000000,
  0xff810000,0xff000000,0xf0004025,0xe487c002,0x67858d8a,0x118bc000,0x67848c89,
  0x40000000,0xff41303b,0x20000001,0x1187c001,0x80000001,0xe601c004,0x70000023,
  0x1902c302,0x1d89d08f,0x318a8901,0x00000000,0x0000002f,0x30000112,0xe7028802,
  0x208fd820,0x00000000,0xff810000,0xff000000,0xf0004025,0xe487c002,0x67848d8a,
  0x118bc000,0x67848c89,0x40000000,0xff41303d,0x20000001,0x1187c001,0x80000001,
  0xe601c004,0x64000023,0x1902c302,0x1d89d08f,0x31898a01,0x00000000,0x0000002f,
  0x30000012,0xe7028802,0x1d8ad003,0x0000002f,0x60000022,0x2003d821,0x208fd920,
  0x00000000,0x00000000,0x00000000,0xff820000,0xff810000,0x00040000,0x60614060,
  0xff000000,0x0c010012,0x61c002d2,0x1187c487,0x08600000,0xe0021034,0xc0000460,
  0x1b04cd8e,0x1b04d08c,0x1b04c58b,0x00000015,0x50600000,0x44604860,0x60000022,
  0x018ed88e,0x018bd18b,0x00000000,0x000007f8,0x0007fff8,0xe0001034,0xc0000820,
  0x018cd08c,0x018ed18d,0x27840001,0x00000000,0x000007f8,0x000007f8,0xff000000,
  0xf0004025,0xe487c002,0x67858d8a,0x118bc000,0x67848c89,0x40000000,0xff41303a,
  0x20000001,0x1187c001,0x80000001,0xe601c004,0x70000023,0x1902c302,0x1d89d08f,
  0x33898a01,0x00000000,0x0000002f,0x30000112,0xe7028802,0x208fd820,0x00000000,
  0xff810000,0xff000000,0xf0004025,0xe487c002,0x67858d8a,0x118bc000,0x67848c89,
  0x40000000,0xff41303b,0x20000001,0x1187c001,0x80000001,0xe601c004,0x70000023,
  0x1902c302,0x1d89d08f,0x338a8901,0x00000000,0x0000002f,0x30000112,0xe7028802,
  0x208fd820,0x00000000,0xff810000,0xff000000,0xf0004025,0xe487c002,0x67848d8a,
  0x118bc000,0x67848c89,0x40000000,0xff41303d,0x20000001,0x1187c001,0x80000001,
  0xe601c004,0x64000023,0x1902c302,0x1d89d08f,0x33898a01,0x00000000,0x0000002f,
  0x30000012,0xe7028802,0x1d8ad003,0x0000002f,0x60000022,0x2003d821,0x208fd920,
  0x00000000,0x00000000,0x00000000,0xff820000,0xff810000,0x00040000,0x60614060,
  0xff000000,0x0c010012,0x61c002d2,0x1187c487,0x08600000,0xe0021034,0xc0000460,
  0x1b04cd8e,0x1b04d08c,0x1b04c58b,0x00000015,0x50600000,0x44604860,0x60000022,
  0x018ed88e,0x018bd18b,0x00000000,0x000007f8,0x0007fff8,0xe0001034,0xc0000820,
  0x018cd08c,0x018ed18d,0x27840001,0x00000000,0x000007f8,0x000007f8,0xff000000,
  0xf0004025,0xe487c002,0x67858d8a,0x118bc000,0x67848c89,0x40000000,0xff41303a,
  0x20000001,0x1187c001,0x80000001,0xe601c004,0x70000023,0x1902c302,0x1d89d08f,
  0x39898a01,0x00000000,0x0000002f,0x30000112,0xe7028802,0x208fd820,0x00000000,
  0xff810000,0xff000000,0xf0004025,0xe487c002,0x67858d8a,0x118bc000,0x67848c89,
  0x40000000,0xff41303b,0x20000001,0x1187c001,0x80000001,0xe601c004,0x70000023,
  0x1902c302,0x1d89d08f,0x398a8901,0x00000000,0x0000002f,0x30000112,0xe7028802,
  0x208fd820,0x00000000,0xff810000,0xff000000,0xf0004025,0xe487c002,0x67848d8a,
  0x118bc000,0x67848c89,0x40000000,0xff41303d,0x20000001,0x1187c001,0x80000001,
  0xe601c004,0x64000023,0x1902c302,0x1d89d08f,0x39898a01,0x00000000,0x0000002f,
  0x30000012,0xe7028802,0x1d8ad003,0x0000002f,0x60000022,0x2003d821,0x208fd920,
  0x00000000,0x00000000,0x00000000,0xff820000,0xff810000,0x00040000,0x60614060,
  0xff000000,0x0c010012,0x61c002d2,0x1187c487,0x08600000,0xe0021034,0xc0000460,
  0x1b04cd8e,0x1b04d08c,0x1b04c58b,0x00000015,0x50600000,0x44604860,0x60000022,
  0x018ed88e,0x018bd18b,0x00000000,0x000007f8,0x0007fff8,0xe0001034,0xc0000820,
  0x018cd08c,0x018ed18d,0x27840001,0x00000000,0x000007f8,0x000007f8,0xff000000,
  0xf0004025,0xe487c002,0x67858d8a,0x118bc000,0x67848c89,0x40000000,0xff41303a,
  0x20000001,0x1187c001,0x80000001,0xe601c004,0xb2000023,0x1902c302,0x1d89d08f,
  0x49898a01,0x00000000,0x0000002f,0x30000112,0xe7028802,0x208fd820,0x00000000,
  0xff810000,0xff000000,0xf0004025,0xe487c002,0x67858d8a,0x118bc000,0x67848c89,
  0x40000000,0xff41303b,0x20000001,0x1187c001,0x80000001,0xe601c004,0xb2000023,
  0x1902c302,0x1d89d08f,0x498a8901,0x00000000,0x0000002f,0x30000112,0xe7028802,
  0x208fd820,0x00000000,0xff810000,0xff000000,0xf0004025,0xe487c002,0x67848d8a,
  0x118bc000,0x67848c89,0x40000000,0xff41303d,0x20000001,0x1187c001,0x80000001,
  0xe601c004,0xa6000023,0x1902c302,0x1d89d08f,0x49898a01,0x00000000,0x0000002f,
  0x30000012,0xe7028802,0x1d8ad003,0x0000002f,0x60000022,0x2003d821,0x208fd920,
  0x00000000,0x00000000,0x00000000,0xff820000,0xff810000,0x00040000,0x60614060,
  0xff000000,0x0c010012,0x61c002d2,0x1187c487,0x08600000,0xe0021034,0xc0000460,
  0x1b04cd8e,0x1b04d08c,0x1b04c58b,0x00000015,0x50600000,0x44604860,0x60000022,
  0x018ed88e,0x018bd18b,0x00000000,0x000007f8,0x0007fff8,0xe0001034,0xc0000820,
  0x018cd08c,0x018ed18d,0x27840001,0x00000000,0x000007f8,0x000007f8,0xff000000,
  0xb4004125,0xe687c089,0xe487c08a,0x67848c00,0x67858d01,0x40000000,0xff41303a,
  0x30004023,0x998ac38a,0x1d00d08f,0x80000000,0x00000000,0x0000002f,0xff433089,
  0x30000112,0xe78a888a,0x208fd820,0x00000000,0xff810000,0x00001001,0xc0000460,
  0xff000000,0xb4004125,0xe687c089,0xe487c08a,0x67858d00,0x67848c01,0x40000000,
  0xff41303b,0x30004023,0x998ac38a,0x1d01d08f,0x80000000,0x00000000,0x0000002f,
  0xff433089,0x30000112,0xe78a888a,0x208fd820,0x00000000,0xff810000,0x00001001,
  0xc0000460,0xff000000,0xb4004125,0xe687c089,0xe487c08a,0x67848c00,0x67848d01,
  0x40000000,0xff41303d,0x70004034,0x998ac38a,0x1d00d08f,0x1d01d102,0x80000000,
  0x00000000,0x0000002f,0x0000002f,0xff444089,0x700000a3,0xe78a888a,0x208fd820,
  0x2002d921,0x00000000,0x00000000,0xff820000,0xff810000,0x00040000,0x60614060,
  0x00001001,0xc0000460,0xff000000,0x00009012,0xc0000820,0x50000008,0x00000000,
  0x84000012,0x61c08ad1,0x27848b00,0x00000000,0xe8000024,0x1187c487,0x1b89cd8e,
  0x1b89d08c,0x1b89c58b,0x00000015,0x60000122,0x018ed88e,0x018bd18b,0x00000000,
  0x000007f8,0x0007fff8,0x60001023,0xc0000420,0x018cd08c,0x018ed18d,0x000007f8,
  0x000007f8,0xff000000,0xb40040a5,0x6687c089,0x6487c08a,0x67848c00,0x67848d01,
  0x80000000,0xff41303d,0x00004001,0x40000000,0xff31101e,0x70000023,0x198ac38a,
  0x1d00d002,0x1d01d18f,0x0000002f,0x0000002f,0x700000a3,0x678a888a,0x2002d820,
  0x208fd921,0x00000000,0x00000000,0xff820000,0xff810000,0x00040000,0x60614060,
  0x00001001,0xc0000860,0x00009012,0xc0000420,0x50000008,0x00000000,0x14000012,
  0x61c08ad1,0x6487d801,0xfffffffd,0xe8000024,0x1187c487,0x1b89cd8e,0x1b89d08c,
  0x1b89c58b,0x00000015,0x60000022,0x018ed88e,0x018bd18b,0x00000000,0x000007f8,
  0x0007fff8,0x64000023,0x1901c301,0x018cd08c,0x018ed18d,0x000007f8,0x000007f8,
  0x80001012,0xc0000420,0x27840100,0x00000000,0xff000000,0x64000023,0x6786d000,
  0x11848d01,0x118dc002,0x00000000,0x00000010,0x20000001,0x13028c02,0x14000012,
  0x1b02c302,0x2700d884,0x00000000,0xff810000,0xff500029,0x00004001,0x40000000,
  0xff31102f,0x30000192,0x2786d087,0x1100c08c,0x00000018,0x00009012,0xc0000420,
  0x50000008,0x00000000,0xb4004135,0xe687c089,0xe487c08a,0x6487d801,0x6487d902,
  0x80000000,0xfffffffd,0xffffffff,0xff434034,0xf40000b5,0x2100c040,0x998ac38a,
  0x678cd884,0x1901c301,0x1902c302,0x00000000,0x00000000,0xff810000,0x10001012,
  0xc0000860,0xe78a888a,0x00000000,0x28000092,0x1187c487,0x67840103,0x00000000,
  0xe4000024,0x61c08ad1,0x1b89cd8e,0x1b89d08c,0x1b89c58b,0x00000015,0x60000022,
  0x018ed88e,0x018bd18b,0x00000000,0x000007f8,0x0007fff8,0xe0001034,0xc0000420,
  0x018cd08c,0x018ed18d,0x27840203,0x00000000,0x000007f8,0x000007f8,0xff000000,
  0xf40000a5,0x6487c001,0x1187c487,0x6687c000,0x13858e89,0x118bc002,0x60000022,
  0x6789d88a,0x11c0d98f,0x00000000,0x00000000,0xfffffff8,0xff820000,0xf0000024,
  0x1901c301,0x1b00cd8e,0x1b00d08c,0x1b00c58b,0x00000015,0x70000023,0x67018801,
  0x018ed88e,0x018bd18b,0x000007f8,0x0007fff8,0x20000011,0x198fd08f,0x00000000,
  0x0000002f,0xe0000023,0x018cd08c,0x018ed18d,0x058a8f8a,0x000007f8,0x000007f8,
  0x84000012,0x61c001d1,0x2784028a,0x00000000,0x00001001,0xc0000420,0xff000000,
  0xfc000036,0x6687c089,0x1187c487,0x6487c08a,0x13858e00,0x11c0d88f,0x118bc001,
  0x00000000,0xff810000,0x600000a2,0x6700d800,0x198fd18f,0x00000000,0x0000002f,
  0xfffffff8,0xf0000024,0x198ac38a,0x1b89cd8e,0x1b89d08c,0x1b89c58b,0x00000015,
  0x30000112,0x678a888a,0x05008f00,0x00000000,0x84000012,0x61c08ad1,0x27840100,
  0x00000000,0x60000022,0x018ed88e,0x018bd18b,0x00000000,0x000007f8,0x0007fff8,
  0x60001023,0xc0000420,0x018cd08c,0x018ed18d,0x000007f8,0x000007f8,0xff000000,
  0x3c000124,0x6687c089,0x1187c487,0x6487c08a,0x1b8ec300,0x00000000,0xf0000024,
  0x198ac38a,0x0cc10000,0x1b89cd8e,0x118bc001,0x00000000,0xf0000124,0x678a888a,
  0x3dc40000,0x1b89d08c,0x1b89c58b,0x00000015,0x64000023,0x61c08ad1,0x018ed88e,
  0x018bd18b,0x000007f8,0x0007fff8,0x60000022,0x018cd08c,0x018ed18d,0x00000000,
  0x000007f8,0x000007f8,0x80001012,0xc0000420,0x27840100,0x00000000,0xff000000,
  0xf8000125,0x1187c487,0x6487c08a,0x67858e00,0x118bc001,0x6687c089,0xf0000024,
  0x198ac38a,0x1b89cd8e,0x1b89d08c,0x1b89c58b,0x00000015,0x70000123,0x678a888a,
  0x018ed88e,0x018bd18b,0x000007f8,0x0007fff8,0x64000023,0x61c08ad1,0x018cd08c,
  0x018ed18d,0x000007f8,0x000007f8,0x80001012,0xc0000420,0x27840100,0x00000000,
  0xff000000,0x7c000135,0x6687c089,0x1187c487,0x6487c08a,0x198ed000,0x118bc001,
  0x00000000,0x0000002c,0xf0000024,0x198ac38a,0x1b89cd8e,0x1b89d08c,0x1b89c58b,
  0x00000015,0x70000123,0x678a888a,0x018ed88e,0x018bd18b,0x000007f8,0x0007fff8,
  0xe4000034,0x61c08ad1,0x018cd08c,0x018ed18d,0x0900da00,0xffffffff,0x000007f8,
  0x000007f8,0x80001012,0xc0000420,0x27840100,0x00000000,0xff000000,0xfc004147,
  0x6687c089,0x1187c487,0x6487c08a,0x11848b8b,0x11848e8e,0x11c0d88c,0x40000000,
  0x00000000,0x00000000,0xff435001,0xff810000,0x30000012,0x198ac38a,0x118bc88b,
  0x00000000,0x10000001,0x678a888a,0x80000011,0x278bd88c,0x00000000,0xfffffff8,
  0xff50000b,0xa0000012,0x118bc88b,0x278bc08c,0x00000000,0x20000101,0x218b8e60,
  0x04001012,0xc0000440,0x61c08ad2,0x00000000,0xe0000023,0x1b89cd8e,0x1b89d08c,
  0x1b89c58b,0x00000000,0x00000015,0x60000022,0x018ed88e,0x018bd18b,0x00000000,
  0x000007f8,0x0007fff8,0x60001023,0xc0000820,0x018cd08c,0x018ed18d,0x000007f8,
  0x000007f8,0xff000000,0x7c000135,0x6687c089,0x1187c487,0x6487c08a,0x6784d88c,
  0x118bc003,0x00000000,0xfffffff0,0x70000023,0x198ac38a,0x018cdc8c,0x1b89c58b,
  0x00007fff,0xffffffff,0xf0000024,0x678a888a,0x118c8e00,0x1b89cd8e,0x1b89d08c,
  0x00000015,0x60000122,0x6700d801,0x018ed98e,0x00000000,0x0007fff8,0x00000000,
  0xff810000,0x64000123,0x61c08ad1,0x6701d800,0x018bd18b,0x000007f8,0x00000000,
  0xff810000,0xe0000123,0x6700c001,0x018cd08c,0x018ed18d,0x000007f8,0x000007f8,
  0x80001012,0xc0000420,0x27840301,0x00000000,0xff000000,0x3c000124,0x6687c089,
  0x1187c487,0x6487c08a,0x6784d88c,0xfffffff0,0x30000022,0x198ac38a,0x018cdc8c,
  0x00000000,0x00007fff,0xffffffff,0xf0000024,0x678a888a,0x67848e04,0x118c8b01,
  0x1b89cd8e,0x00000000,0xe0000123,0x6701d805,0x1b89d18c,0x1b89c58b,0x00000015,
  0x00000000,0xff810000,0xe0000133,0x6405d801,0x018ed98e,0x6705da05,0x00000000,
  0x00000000,0x0007fff8,0x00000000,0xff830000,0xff810000,0xe4000134,0x61c08ad3,
  0xe405d800,0x2101c040,0x018bd18b,0x00000000,0x000007f8,0x00000000,0xff810000,
  0xa0000092,0xa300d841,0x2705c004,0x00000000,0xff810000,0x60040022,0x018cd08c,
  0x018ed18d,0x000007f8,0x000007f8,0x60616260,0xf0001045,0xc0000c60,0x1188d800,
  0x1d04d103,0x0104de04,0x1105c001,0x00007fff,0xffffffff,0x0000002f,0x00000000,
  0xff810000,0x600000a2,0xe404d802,0x1203d903,0x00000000,0x00000000,0x00000000,
  0xff820000,0xff810000,0x00004001,0x40000000,0xff311030,0x600000a2,0x2003d860,
  0xa302d941,0x00000000,0x00000000,0x00000000,0xff820000,0xff810000,0x00040000,
  0x60616260,0x00001001,0xc0000c60,0x00009012,0xc0000420,0x50000008,0x00000000,
  0x04000001,0x61c08ad3,0x00001001,0xc0000c20,0xff000000,0xfc000046,0x6687c089,
  0x1187c487,0x6487c08a,0x6784d803,0x13858e01,0x11c0d98f,0x00000000,0x00000000,
  0xfffffff0,0xff820000,0x600000a2,0x6701d802,0x198fd18f,0x00000000,0x0000002f,
  0xfffffff8,0x70000023,0x198ac38a,0x0103dc03,0x1b89cd8e,0x00007fff,0xffffffff,
  0xf0000024,0x678a888a,0x11038b00,0x1b89c58b,0x1b89d08c,0x00000015,0xe0000123,
  0x6700d803,0x058f028f,0x018ed98e,0x0007fff8,0x00000000,0xff810000,0xe40000b4,
  0x61c08ad3,0x6703d804,0x018bd18b,0x6403da05,0x00000000,0x000007f8,0x00000000,
  0xff830000,0xff810000,0x60000022,0x018cd08c,0x018ed18d,0x00000000,0x000007f8,
  0x000007f8,0xa0000012,0x2305d840,0x2704c08f,0x00000000,0xff810000,0xff50000b,
  0x00001001,0xc0000c40,0xf00000b4,0x1188d800,0x6402d902,0x1104c001,0xe403da05,
  0x00000000,0x00000000,0x00000000,0xff830000,0xff820000,0xff810000,0x00004001,
  0x40000000,0xff311030,0x60000092,0x2302d840,0xa105c041,0x00000000,0xff810000,
  0x00040000,0x60616260,0x00001001,0xc0000c60,0x00009012,0xc0000420,0x50000008,
  0x00000000,0x04000001,0x61c08ad3,0x00001001,0xc0000c20,0xff000000,0xbc000135,
  0x6687c089,0x1187c487,0x6487c08a,0x6784d801,0x67858e00,0x00000000,0xfffffff0,
  0x70000023,0x198ac38a,0x0101dc01,0x1b89cd8e,0x00007fff,0xffffffff,0xf0000024,
  0x678a888a,0x11018b02,0x1b89c58b,0x018ed88e,0x0007fff8,0x600000a2,0x6702d801,
  0x018bd18b,0x00000000,0x000007f8,0x00000000,0xff810000,0x24000012,0x61c08ad1,
  0x1b89d08c,0x00000015,0x20000111,0x6701d802,0x00000000,0x00000000,0xff810000,
  0xe0001034,0xc0000420,0x018cd08c,0x018ed18d,0x2702c000,0x00000000,0x000007f8,
  0x000007f8,0xff000000,0x7c000135,0x6687c089,0x1187c487,0x6487c08a,0x6784d800,
  0x198ed102,0x0000002c,0xfffffff0,0xf0000034,0x198ac38a,0x0100dc00,0x0902da02,
  0x1b89cd8e,0xffffffff,0x00007fff,0xffffffff,0xf0000024,0x678a888a,0x11008b01,
  0x1b89d08c,0x1b89c58b,0x00000015,0x600000a2,0x6701d800,0x018ed98e,0x00000000,
  0x0007fff8,0x00000000,0xff810000,0x04000001,0x61c08ad1,0x60000122,0x6700d801,
  0x018bd18b,0x00000000,0x000007f8,0x00000000,0xff810000,0xe0001034,0xc0000420,
  0x018cd08c,0x018ed18d,0x2701c002,0x00000000,0x000007f8,0x000007f8,0xff000000,
  0x3c004035,0x1387d887,0x1b8ec18e,0x6786d18c,0x11848b01,0x80000000,0x00000010,
  0x00000000,0xff434001,0xff810000,0x00004001,0x40000000,0xff311031,0x1c000013,
  0x66878e89,0x11878e87,0x64878e8a,0x1c0000a3,0x678cd802,0x118cc000,0x1187c487,
  0x00000000,0x00000000,0xff810000,0x08000001,0x198ac38a,0x14000112,0x2102c040,
  0x678a888a,0x00000000,0x10001012,0xc0000840,0x278cd884,0x00000000,0xff810000,
  0x00009012,0xc0000420,0x50000008,0x00000000,0x04000011,0x678cd884,0x00000000,
  0x00000000,0xff810000,0xff50000b,0xe4000024,0x61c08ad2,0x1b89cd8e,0x1b89d08c,
  0x1b89c58b,0x00000015,0x60000022,0x018ed88e,0x018bd18b,0x00000000,0x000007f8,
  0x0007fff8,0x60001023,0xc0000820,0x018cd08c,0x018ed18d,0x000007f8,0x000007f8,
  0xff000000,0x00004001,0x40000000,0xff311032,0x640000a3,0x6786d08c,0x6784d902,
  0x13858e89,0xfffffff0,0x00000010,0x20000011,0x6789d801,0x00000000,0xfffffff8,
  0x14000012,0x118cc000,0x278cd884,0x00000000,0xff810000,0x30009034,0xc0000420,
  0x2786d087,0x0102dd02,0x50000008,0x00007fff,0xffffffff,0x00000018,0xb4000134,
  0x6487d88b,0x6487c08a,0x6687c089,0x678cd984,0x00000000,0x00000000,0xfffffffd,
  0xff820000,0x7c000035,0x198ac38a,0x198bc38b,0x11c0d88f,0x1b89cd8e,0x1b89d18c,
  0x00000015,0x00000000,0xff810000,0x3c000034,0x678a888a,0x198fd08f,0x1187c487,
  0x018ed98e,0x00000000,0x0007fff8,0x0000002f,0x64000023,0x05008f00,0x018cd08c,
  0x018ed18d,0x000007f8,0x000007f8,0x90000012,0x27848b00,0x1b89c58b,0x00000000,
  0x44000012,0x61c08ad1,0x018bd08b,0x000007f8,0x00001001,0xc0000420,0xff000000,
  0x34004024,0x6687c089,0x6487c08a,0x6786d08c,0x80000000,0x00000010,0xff423001,
  0x140000a2,0x6788d803,0x6788d904,0x00000000,0x00000000,0x00000000,0xff820000,
  0xff810000,0x00004001,0x40000000,0xff311033,0xbc000035,0x21030420,0x198ac38a,
  0x2786d087,0x118cc000,0x278cd984,0x00000000,0x00000018,0xff820000,0x10000081,
  0x678a888a,0x20011012,0xc0000840,0x1b8ec38e,0x44600000,0x00009012,0xc0000420,
  0x50000008,0x00000000,0x20000111,0x6587d88e,0x00000000,0xfffffffe,0xff50000b,
  0x00004001,0x40000000,0xff311034,0xe0000023,0x1b8ecb02,0x018ed001,0x118cc000,
  0x00000000,0x000007ff,0x20000091,0x2101d040,0x00000000,0x000007ff,0x20010011,
  0x11c0d001,0x00000801,0x44600000,0x00009012,0xc0000420,0x50000008,0x00000000,
  0xfc000146,0x61c08ad3,0x11c0d88f,0x6487d901,0x678cda84,0x1b89cd8e,0x1b89c58b,
  0x00000000,0xfffffffd,0x00000000,0xff830000,0xff810000,0x3c000034,0x1901c301,
  0x198fd08f,0x1187c487,0x1b89d18c,0x00000000,0x00000015,0x0000002f,0x64000023,
  0x05008f00,0x018ed88e,0x018bd18b,0x000007f8,0x0007fff8,0xe0001034,0xc0000c20,
  0x018cd08c,0x018ed18d,0x27840100,0x00000000,0x000007f8,0x000007f8,0xff000000,
  0x34004024,0x6687c089,0x6487c08a,0x6786d08c,0x80000000,0x00000010,0xff423001,
  0x140000a2,0x6788d802,0x6788d903,0x00000000,0x00000000,0x00000000,0xff820000,
  0xff810000,0x00004001,0x40000000,0xff311033,0xb8000034,0x198ac38a,0x2786d087,
  0x118cc000,0x278cd984,0x00000000,0x00000000,0x00000018,0xff820000,0x14000112,
  0x21020320,0x678a888a,0x00000000,0x00001001,0xc0000840,0x00009012,0xc0000420,
  0x50000008,0x00000000,0x20000191,0x6587d88e,0x00000000,0xfffffffe,0x20000001,
  0x198ec38e,0xff50000b,0x00004001,0x40000000,0xff311035,0x60000012,0x13858e02,
  0x118cc000,0x00000000,0x20000111,0x6702d801,0x00000000,0xfffffff8,0x00009012,
  0xc0000420,0x50000008,0x00000000,0xf4000145,0x61c08ad3,0x1187c487,0x678cd884,
  0x11c0d98f,0x6487da01,0x00000000,0xfffffffd,0x00000000,0x00000000,0xff820000,
  0xff810000,0xe0000023,0x1b89cd8e,0x1b89d08c,0x1b89c58b,0x00000000,0x00000015,
  0x60000012,0x1901c301,0x198fd08f,0x0000002f,0xe0000023,0x05008f00,0x018ed88e,
  0x018bd18b,0x000007f8,0x0007fff8,0xe0001034,0xc0000c20,0x018cd08c,0x018ed18d,
  0x27840100,0x00000000,0x000007f8,0x000007f8,0xff000000,0xf00000b4,0x6487c003,
  0x6784d88c,0x11c0d900,0x13858e89,0x00000000,0x00000000,0xfffffff0,0xff820000,
  0x20000001,0x6687c002,0x60000022,0x6789d88d,0x018cdd8c,0x00007fff,0xffffffff,
  0xfffffff8,0x64000123,0x1903c303,0x678cd88c,0x1900d100,0x0000002f,0x00000000,
  0xff810000,0xa0000022,0x668cd889,0x668dd98a,0x00000000,0x00000000,0x00000000,
  0xff820000,0xff810000,0x30000092,0x67038803,0x678cd801,0x00000000,0xff810000,
  0x40000001,0x01898a8a,0x64000013,0x61c003d3,0x198ac589,0x198ac38a,0x20000001,
  0x13898a8a,0x60000012,0x11018a89,0x058d008f,0x00000000,0xa0000122,0x6789d88a,
  0xe789d904,0x00000000,0x00000000,0x00000000,0xff820000,0xff810000,0xff50000b,
  0xe00040a4,0xa104c042,0x218a8f43,0xe789d803,0x80000000,0x00000000,0xff42300b,
  0xff810000,0x00084011,0x40000000,0x00006062,0x63626264,0xff432002,0x60010012,
  0x1104c089,0x1103c08f,0x44e34863,0xe00100b3,0x6789d88a,0xa18fd941,0xe789da04,
  0x00000000,0x00000000,0x00000000,0x44645064,0xff840000,0xff830000,0xff820000,
  0x00001001,0xc0000844,0x20011022,0xc0000442,0x11c0d88f,0x00000000,0x00000000,
  0x44620000,0xff820000,0xf0021045,0xc0000441,0x1187c487,0x1b02cd8e,0x1b02d08c,
  0x27848b8f,0x00000000,0x00000015,0x49615261,0x126144e1,0xe0000023,0x018ed88e,
  0x018cd18c,0x1b02c58b,0x000007f8,0x0007fff8,0xc0001023,0xc0000c20,0x018ed08d,
  0x018bd18b,0x000007f8,0x000007f8,0xff50000c,0x20004112,0x678cd889,0x40000000,
  0x00000000,0xff42202b,0xff810000,0x60000112,0xe489d88a,0x2189c040,0x00000000,
  0xff810000,0x40000011,0xa38ad841,0x00000000,0x00000000,0xff810000,0x00040000,
  0x60616060,0xe4021045,0xc0000440,0x1187c487,0x1b02cd8e,0x1b02d08c,0x27848b8f,
  0x00000000,0x00000015,0x49605260,0x04e044e0,0xe0000023,0x1b02c58b,0x018cd08c,
  0x018ed98e,0x0007fff8,0x000007f8,0x60001023,0xc0000c20,0x018bd08b,0x018ed18d,
  0x000007f8,0x000007f8,0xff000000,0x74004135,0xe687c004,0xe487c005,0x6784d88c,
  0x13858e89,0x40000000,0x00000000,0xfffffff0,0xff43408d,0x70000033,0x9905c305,
  0x6789d88d,0x018cdd8c,0x00000000,0x00007fff,0xffffffff,0xfffffff8,0x14000092,
  0x678cd88c,0xe7058805,0x00000000,0xff810000,0x00001001,0xc0000420,0xff000000,
  0xb4004125,0x6687c002,0x6487c003,0x67848c8c,0x67848d8d,0x40000000,0xff41302d,
  0x20004012,0x3fc28d89,0xc0000000,0x00000000,0xff422001,0xe0004044,0x1d8cd000,
  0x1d8dd18f,0x018cde8c,0x80000000,0x00000000,0x00007fff,0xffffffff,0x0000002f,
  0x0000002f,0xff465002,0x20000001,0x3ec4898a,0xf0000034,0x1903c303,0xe68cd801,
  0x2f8d8a02,0x678cd904,0x00000000,0x00000000,0x00000000,0xff820000,0xff810000,
  0x70000123,0x67038803,0x2000d840,0x208fd921,0x00000000,0x00000000,0xff820000,
  0xff810000,0x00001001,0xc0000460,0x00001001,0xc0000861,0x20011012,0xc0000462,
  0x0cc2898d,0x44620000,0x60000112,0x208d0120,0x198dc38a,0x00000000,0x20011012,
  0xc0000460,0x118a048d,0x44600000,0x20000101,0x678dc08f,0x04000111,0x218fd840,
  0x00000000,0x00000000,0xff810000,0x00001001,0xc0000c60,0x20000111,0x678cd889,
  0x00000000,0x00000000,0xff810000,0xa0000112,0x2189c040,0xe489d889,0x00000000,
  0xff810000,0x04000091,0xa389d841,0x00000000,0x00000000,0xff810000,0x00040000,
  0x60616060,0x00001001,0xc0000440,0xff50000b,0x84000012,0x61c003d1,0x27848b8f,
  0x00000000,0xe8000024,0x1187c487,0x1b02cd8e,0x1b02d08c,0x1b02c58b,0x00000015,
  0x60000022,0x018ed88e,0x018bd18b,0x00000000,0x000007f8,0x0007fff8,0x60001023,
  0xc0000420,0x018cd08c,0x018ed18d,0x000007f8,0x000007f8,0xff50000c,0x600040a3,
  0x208fd840,0x11c0d900,0x80000000,0x00000000,0x00000000,0xff43308e,0xff820000,
  0xff810000,0x60010032,0x678cd801,0x018ddd8d,0x00000000,0x00007fff,0xffffffff,
  0x00000000,0x48600000,0xff820000,0xe0011144,0xc0000460,0x668cd889,0x1900d100,
  0x668dda8a,0x00000000,0x00000000,0x0000002f,0x00000000,0x44605060,0xff840000,
  0xff820000,0x40001012,0xc0000820,0x01898a8a,0x00000000,0xff000000,0xf0004135,
  0x6487c003,0x67848c8c,0x11c0d800,0x13858d89,0x40000000,0x00000000,0x00000000,
  0xff43402b,0xff810000,0xe00000b3,0x6789d88d,0x1d8cd18f,0x018cde8c,0x00007fff,
  0xffffffff,0x0000002f,0xfffffff8,0xe4000034,0x1903c303,0x208fd840,0x1900d100,
  0x6687c002,0x00000000,0x0000002f,0x00000000,0xff810000,0xa0010022,0x668cd889,
  0x668dd98a,0x00000000,0x00000000,0x44605060,0xff830000,0xff820000,0x300100a2,
  0x67038803,0x678cd801,0x00000000,0x00000000,0x44600000,0xff820000,0x40011012,
  0xc0000460,0x01898a8a,0x48600000,0xff50008e,0x64000013,0x61c003d3,0x198ac589,
  0x198ac38a,0x20000001,0x13898a8a,0x60000012,0x11018a89,0x058d008f,0x00000000,
  0xa0000122,0x6789d88a,0xe789d904,0x00000000,0x00000000,0x00000000,0xff820000,
  0xff810000,0xff50000b,0xe00040a4,0xa104c042,0x218a8f43,0xe789d803,0x80000000,
  0x00000000,0xff42300b,0xff810000,0x00084011,0x40000000,0x00006062,0x63626264,
  0xff432002,0x60010012,0x1104c089,0x1103c08f,0x44e34863,0xe00100b3,0x6789d88a,
  0xa18fd941,0xe789da04,0x00000000,0x00000000,0x00000000,0x44645064,0xff840000,
  0xff830000,0xff820000,0x00001001,0xc0000844,0x20011022,0xc0000442,0x11c0d88f,
  0x00000000,0x00000000,0x44620000,0xff820000,0xe4021045,0xc0000441,0x1187c487,
  0x1b02cd8e,0x1b02d08c,0x27848b8f,0x00000000,0x00000015,0x49615261,0x04e144e1,
  0xe0000023,0x018ed88e,0x018cd18c,0x1b02c58b,0x000007f8,0x0007fff8,0x60001023,
  0xc0000c20,0x018ed08d,0x018bd18b,0x000007f8,0x000007f8,0xff50000c,0x20004112,
  0x678cd889,0x40000000,0x00000000,0xff42202b,0xff810000,0x60000112,0xe489d88a,
  0x2189c040,0x00000000,0xff810000,0x40000011,0xa38ad841,0x00000000,0x00000000,
  0xff810000,0x00040000,0x60616060,0xe4021045,0xc0000440,0x1187c487,0x1b02cd8e,
  0x1b02d08c,0x27848b8f,0x00000000,0x00000015,0x49605260,0x04e044e0,0xe0000023,
  0x018ed88e,0x1b02c58b,0x018cd18c,0x000007f8,0x0007fff8,0x60001023,0xc0000c20,
  0x018bd08b,0x018ed18d,0x000007f8,0x000007f8,0xff000000,0x74004125,0x6687c089,
  0x6487c08a,0x67848c8c,0x1d8dc301,0x40000000,0xff41302c,0xf0000034,0x198ac38a,
  0x1d8cd08f,0x018cdd8c,0x118bc005,0x00007fff,0xffffffff,0x0000002f,0xb00000a3,
  0x678a888a,0xe68cd800,0xe78cd902,0x00000000,0x00000000,0xff820000,0xff810000,
  0x20000011,0xe78cd803,0x00000000,0x00000000,0xff810000,0x60000092,0x208fd840,
  0xa1010021,0x00000000,0xff810000,0x04040011,0xe403d804,0x00000000,0x60614060,
  0xff820000,0x20011012,0xc0000460,0x118d028d,0x44600000,0x20000081,0x678dc08f,
  0x24000012,0x61c08ad3,0xa103c041,0x00000000,0x600000a2,0x218fd840,0xa304d942,
  0x00000000,0x00000000,0x00000000,0xff820000,0xff810000,0x00080010,0x00000000,
  0x620050a0,0x60614240,0xe0021034,0xc0000440,0x1b89cd8e,0x1b89d08c,0x1b89c58b,
  0x00000015,0x52600000,0x44e04960,0xe8000034,0x1187c487,0x018ed88e,0x018bd18b,
  0x2784058f,0x00000000,0x000007f8,0x0007fff8,0x60001023,0xc0000c20,0x018cd08c,
  0x018ed18d,0x000007f8,0x000007f8,0xff000000,0xf4004136,0x6687c089,0x6487c08a,
  0x67848c8c,0x118bc003,0x67848d8d,0x40000000,0x00000000,0xff42402e,0x70000023,
  0x198ac38a,0x018cdc8c,0x3fc28d8d,0x00007fff,0xffffffff,0xb0000123,0x678a888a,
  0x668cd800,0xe78cd901,0x00000000,0x00000000,0xff820000,0xff810000,0x20000101,
  0x208d0020,0x20011012,0xc0000460,0x188dc302,0x44600000,0xec000035,0x61c08ad2,
  0x1187c487,0x0cc20202,0x1b89cd8e,0x1b89d08c,0x00000000,0x00000015,0x60000012,
  0x11010202,0x1b89c58b,0x00000000,0xe0000123,0x6702c08f,0x018ed88e,0x018bd18b,
  0x000007f8,0x0007fff8,0xe0001034,0xc0000820,0x018cd08c,0x018ed18d,0x2784038f,
  0x00000000,0x000007f8,0x000007f8,0xff000000,0xb4004125,0xe687c004,0xe487c005,
  0x67848c8c,0x67848d8d,0x40000000,0xff413031,0xe0004034,0x1d8cd000,0x3fc28d89,
  0x018cdd8c,0x80000000,0x00007fff,0xffffffff,0x0000002f,0xff44408d,0xe0004034,
  0x2000d840,0x3ec4898a,0x1d8dd18f,0xc0000000,0x00000000,0x0000002f,0x00000000,
  0xff444001,0xff810000,0xe00000a3,0x2f8d8a02,0x208fd821,0xe68cd901,0x00000000,
  0x00000000,0xff820000,0xff810000,0xe00000b3,0xe78cd802,0x208fd943,0xe78cda8a,
  0x00000000,0x00000000,0x00000000,0x00000000,0xff830000,0xff820000,0xff810000,
  0x10080011,0x9905c305,0x630050a0,0x60624040,0x10001012,0xc0000460,0xe7058805,
  0x00000000,0xe0011044,0xc0000861,0x018ddc8d,0x0cc2898d,0xe48cda00,0x00000000,
  0x00000000,0x00007fff,0xffffffff,0x44e14862,0xff840000,0xe0004124,0x208d0120,
  0x198dc38d,0xe48ad803,0x80000000,0x00000000,0xff423002,0xff810000,0xe0011034,
  0xc0000460,0xa18ac041,0xa303d842,0x118d028d,0x00000000,0x00000000,0x50600000,
  0xff820000,0x20000101,0x668dc089,0x20000091,0x2089d840,0x00000000,0x00000000,
  0xff810000,0x00080010,0x00000000,0x620050a0,0x60614240,0x20001012,0xc0000440,
  0xa300d841,0x00000000,0xff810000,0x04001012,0xc0000861,0x61c005d1,0x00000000,
  0xff50000b,0xe8000024,0x1187c487,0x67848b00,0x1b04cd8e,0x1b04c58b,0x00000000,
  0x60000022,0x018ed88e,0x018bd18b,0x00000000,0x000007f8,0x0007fff8,0xe0000023,
  0x118dc001,0x1b04d08c,0x018ed18d,0x000007f8,0x00000015,0xa0001023,0xc0000420,
  0x018cd08c,0x2701c000,0x00000000,0x000007f8,0xff50000c,0x24000122,0x6788d88a,
  0x648cd989,0x00000000,0x00000000,0x00000000,0xff820000,0xff810000,0xb0000033,
  0x2788d88c,0x0189d989,0x278cda8a,0x00000000,0x00000000,0x00000000,0x00000000,
  0xff830000,0xff820000,0xff810000,0x80001012,0xc0000c20,0x248cd889,0x00000000,
  0xff810000,0xff000000,0x74004025,0xe687c004,0xe487c005,0x67848c8c,0x13858d89,
  0x40000000,0xff41302f,0x20000091,0x6789d88d,0x00000000,0xfffffff8,0x30000012,
  0x9905c305,0x1d8cd08f,0x0000002f,0x50000112,0xe7058805,0x208fd840,0x00000000,
  0xff810000,0x40001022,0xc0000460,0x018cdc8c,0x00000000,0x00007fff,0xffffffff,
  0xff50008d,0xe0004034,0x668cd889,0x11c0d98f,0x668dda8a,0x40000000,0x00000000,
  0x00000000,0x00000000,0xff444001,0xff830000,0xff820000,0xff810000,0xc00040a3,
  0x198fd08f,0x678cd901,0x80000000,0x00000000,0x0000002f,0xff433002,0xff820000,
  0x60000012,0x01898a8a,0x058f8d8f,0x00000000,0x608001a2,0x238ad889,0x11c0c000,
  0x01c00000,0x00000000,0x00000000,0xff810000,0xa0004023,0x11018989,0x248cd800,
  0xc0000000,0x00000000,0x00000000,0xff43302f,0xff810000,0xa0000122,0x6789d88a,
  0xe789d900,0x00000000,0x00000000,0x00000000,0xff820000,0xff810000,0xff50000b,
  0xe40000b4,0xe788d806,0x218a8f40,0xa100c041,0xe78cd902,0x00000000,0x00000000,
  0x00000000,0xff820000,0xff810000,0x20080021,0xe48cd801,0x00000000,0x00000000,
  0x00006063,0x60616262,0xff830000,0xe0020033,0x6700d88a,0x1100c089,0x6789c08a,
  0x00000000,0x00000000,0x52620000,0x44624862,0xff830000,0xa0011133,0xc0000442,
  0xe402d803,0xe789d900,0x00000000,0x00000000,0x00000000,0x50620000,0xff830000,
  0xff820000,0xe0001034,0xc0000843,0x218ad840,0x2102c041,0x8101d901,0x00000000,
  0x00000000,0x00000000,0xff820000,0xff810000,0xa40000a3,0xe1c005d1,0xa303d842,
  0xe48cd98a,0x00000000,0x00000000,0xff820000,0xff810000,0x00080010,0x00000000,
  0x620050a0,0x60614240,0x20001012,0xc0000c40,0x238ad841,0x00000000,0xff810000,
  0xec000025,0x67848b8f,0x1187c487,0x1b04cd8e,0x1b04c58b,0x118cc08a,0xd0010033,
  0x2788d88a,0x1b04d18c,0x248ada01,0x00000000,0x00000015,0x00000000,0x12615261,
  0xff840000,0xff820000,0xe0010033,0x018ed88e,0x018bd18b,0x278ada06,0x00000000,
  0x000007f8,0x0007fff8,0x52610000,0xff840000,0xe0001034,0xc0000420,0x018cd08c,
  0x018ed18d,0x2789c08f,0x00000000,0x000007f8,0x000007f8,0xff000000,0xff50000c,
  0x2c0000b3,0x6786d000,0x1188d902,0x678cda89,0x00000000,0x00000000,0x00000000,
  0x00000010,0xff830000,0xff820000,0x00004001,0x40000000,0xff311036,0x64000123,
  0x118cc001,0xe489d88a,0x2189c040,0x00000000,0x00000000,0xff810000,0x04000091,
  0xa38ad841,0x00000000,0x00000000,0xff810000,0x00040000,0x60616060,0x10001012,
  0xc0000c40,0x2700d884,0x00000000,0xff810000,0x90009024,0xc0000420,0x2702c08f,
  0x2786d087,0x50000008,0x00000018,0xbc000135,0x6786d08a,0x1100c089,0x6487c005,
  0x6687c004,0x6487d98b,0xfffffffd,0x00000010,0xb40000b4,0xe48cd801,0x1905c305,
  0x678ad984,0x648cda00,0x00000000,0x00000000,0x00000000,0xff830000,0xff820000,
  0xff810000,0x3c000024,0x6788d802,0x1187c487,0x67058805,0x198bc38b,0x00000000,
  0xff810000,0xe0000123,0x67848b8f,0x2300d840,0x1b04cd8e,0x00000000,0x00000000,
  0xff810000,0x3c010034,0x61c005d1,0x0101d801,0x2788d98c,0x1b04c58b,0x00000000,
  0x00000000,0x12600000,0xff830000,0xff820000,0xd0010033,0x278cd802,0x1b04d18c,
  0x248cda01,0x00000000,0x00000015,0x00000000,0x12605260,0xff840000,0xff820000,
  0x60000022,0x018ed88e,0x018bd18b,0x00000000,0x000007f8,0x0007fff8,0xe0001034,
  0xc0000420,0x018cd08c,0x018ed18d,0x2789c08f,0x00000000,0x000007f8,0x000007f8,
  0xff000000,0x34004124,0xe687c004,0xe487c005,0x67848c8c,0x40000000,0x00000000,
  0xff423030,0x60004033,0x1d8cd08f,0x018cdd8c,0x80000000,0x00000000,0x00007fff,
  0xffffffff,0x0000002f,0xff454002,0xe00040b4,0xe68cd88a,0x208fd940,0xe78cda89,
  0xc0000000,0x00000000,0x00000000,0x00000000,0xff444001,0xff830000,0xff820000,
  0xff810000,0xa0000022,0xe78cd801,0xe48cd903,0x00000000,0x00000000,0x00000000,
  0xff820000,0xff810000,0x20011012,0xc0000460,0x198ac38a,0x44600000,0x20000101,
  0x218d8a20,0xf0011035,0xc0000460,0x9905c305,0xa101c041,0x118d898d,0xe401d802,
  0x00000000,0x48600000,0xff820000,0x70000123,0xe7058805,0x678dc089,0xa303d843,
  0x00000000,0x00000000,0xff810000,0x600000a2,0x2189d840,0xa302d942,0x00000000,
  0x00000000,0x00000000,0xff820000,0xff810000,0x00080010,0x00000000,0x620050a0,
  0x60614240,0x00001001,0xc0000440,0x00001001,0xc0000863,0xff50000b,0xec000035,
  0x61c005d1,0x1187c487,0x67848b8f,0x1b04cd8e,0x1b04d08c,0x00000000,0x00000015,
  0x60000012,0x1b04c58b,0x118dc000,0x00000000,0x60000022,0x018ed88e,0x018bd18b,
  0x00000000,0x000007f8,0x0007fff8,0xe0001034,0xc0000420,0x018cd08c,0x018ed18d,
  0x2700c08f,0x00000000,0x000007f8,0x000007f8,0xff50000c,0x24000122,0x6788d88a,
  0x648cd900,0x00000000,0x00000000,0x00000000,0xff820000,0xff810000,0xb0000033,
  0x2788d88c,0x0100d900,0x278cda8a,0x00000000,0x00000000,0x00000000,0x00000000,
  0xff830000,0xff820000,0xff810000,0x80001012,0xc0000c20,0x248cd800,0x00000000,
  0xff810000,0xff000000,0xb4004125,0x6687c089,0x6487c08a,0x67848c8c,0x67848d8d,
  0x40000000,0xff413032,0xf4000045,0x6788d802,0x198ac38a,0x018cdd8c,0x3fc28d8d,
  0xe78cdb04,0x00000000,0x00007fff,0xffffffff,0x00000000,0xff840000,0xff810000,
  0xb0000123,0x678a888a,0x648cd800,0xe48cd901,0x00000000,0x00000000,0xff820000,
  0xff810000,0xe00000b3,0x2300d840,0x8101d901,0xe68cda03,0x00000000,0x00000000,
  0x00000000,0x00000000,0xff830000,0xff820000,0xff810000,0x94010033,0x61c08ad2,
  0x2788d88c,0x248cd901,0x00000000,0x00000000,0x00000000,0x12605260,0xff830000,
  0xff820000,0xe0010023,0x67848b8f,0xa08d0321,0x278cd802,0x00000000,0x52600000,
  0xff820000,0x60011023,0xc0000461,0x188dc300,0x1b89c58b,0x00000000,0x48610000,
  0xf0000024,0x1187c487,0x0cc20000,0x1b89cd8e,0x018bd08b,0x000007f8,0xe0000023,
  0x11040000,0x1b89d08c,0x018ed98e,0x0007fff8,0x00000015,0xe0001034,0xc0000820,
  0x018cd08c,0x018ed18d,0x2700c08f,0x00000000,0x000007f8,0x000007f8,0xff000000,
  0xff50000b,0x34004024,0x6687c089,0x6487c08a,0x11848b8b,0x40000000,0x00000000,
  0xff423003,0xb4004135,0x6788d802,0x6686c08e,0x66858e04,0x678bd98c,0x80000000,
  0xfffffff8,0x00000000,0xff434004,0xff810000,0xf0004035,0x198ac38a,0x1904c304,
  0x018cdc8c,0x138ec88e,0xc0000000,0x00007fff,0xffffffff,0xff434002,0xb0000023,
  0x678a888a,0x648cd800,0xe48cd901,0x00000000,0x00000000,0xff820000,0xff810000,
  0xa00000a2,0xe68cd803,0xe78cd905,0x00000000,0x00000000,0x00000000,0xff820000,
  0xff810000,0xe00000a3,0x2300d840,0x218ec041,0x0101d901,0x00000000,0x00000000,
  0xff820000,0xff810000,0xf0010034,0x2788d88c,0x118e048e,0x9903c303,0x248cd901,
  0x00000000,0x00000000,0x12605260,0xff830000,0xff820000,0xa0011123,0xc0000441,
  0xa18e0362,0x278cd802,0x00000000,0x52600000,0xff820000,0x60011023,0xc0000862,
  0x138e048e,0x11040504,0x00000000,0x44624862,0xff50000c,0xe0000013,0x678bc08c,
  0x118bc88b,0x138ec88e,0x20000101,0x218ec040,0xc0001013,0xc0000c60,0x1104c804,
  0x2704c08c,0xff50000d,0xec000035,0x61c08ad1,0x1187c487,0x1b89cd8e,0x1b89d08c,
  0x1b89c58b,0x00000000,0x00000015,0x60000022,0x018ed88e,0x018bd18b,0x00000000,
  0x000007f8,0x0007fff8,0x60001023,0xc0000420,0x018cd08c,0x018ed18d,0x000007f8,
  0x000007f8,0xff50000e,0x00004001,0x40000000,0xff311037,0x1c000123,0x6786d000,
  0x118cc001,0x118ec002,0x00000000,0x00000010,0x34000023,0x1b02c302,0x2700d884,
  0x1100c08c,0x00000000,0x00000000,0xff810000,0x10009023,0xc0000420,0x2786d087,
  0x50000008,0x00000000,0x00000018,0xa0004023,0x6587d88e,0x6487d98b,0x80000000,
  0xfffffffd,0xfffffffe,0xff43300b,0x20000111,0x678cd884,0x00000000,0x00000000,
  0xff810000,0xc0001013,0xc0000820,0x198bc38b,0x198ec38e,0xff000000,0x700040a4,
  0x6686c089,0x67848b8c,0x118bd08b,0x40000000,0x00000010,0xff423023,0x40000011,
  0x018ed08e,0x00000000,0x000007f8,0xff000000,0xe0000033,0x1d8cd08f,0x018cdd8c,
  0x118e898e,0x00000000,0x00007fff,0xffffffff,0x0000002f,0xff000000,0x60000022,
  0x1d8cd08f,0x018cdd8c,0x00007fff,0xffffffff,0x0000002f,0xff000000,0xe00000a3,
  0x208fd840,0x11848b00,0xe78cd901,0x00000000,0x00000000,0xff820000,0xff810000,
  0x60010012,0x11848b84,0x11848b8b,0x44604960,0xe00200b3,0x6601c08b,0x1101c487,
  0x2700d887,0x00000000,0xfffffff8,0x50600000,0x44604860,0x00001001,0xc0000460,
  0x60000012,0x018bd089,0x1b8bc58b,0x000000ff,0x60000012,0x018bd08b,0x1989c389,
  0x000007f8,0x20000101,0x67898889,0x04000001,0x61c089d1,0x00001001,0xc0000420,
  0xff000000,0x04000101,0x6686c089,0x20000001,0x118e898e,0xff000000,0xe0004124,
  0x67848b8c,0x11848b8b,0x1184c085,0x40000000,0x00000000,0xff423023,0x60000022,
  0x1d8cd08f,0x118bd18b,0x00000000,0x00000010,0x0000002f,0x20000111,0x208fd840,
  0x00000000,0x00000000,0xff810000,0x00001001,0xc0000460,0xff500040,0x20004112,
  0x6784d887,0x40000000,0xfffffff8,0xff422003,0x70004024,0x2686c08e,0x2387d840,
  0x138ec88e,0x80000000,0x00000000,0xff423002,0xff810000,0x60010022,0x1387d887,
  0x218ec042,0x00000000,0x00000000,0x44e00000,0xff820000,0x20000011,0x2387d841,
  0x00000000,0x00000000,0xff810000,0x00080010,0x00000000,0x00006061,0x60616260,
  0x60010012,0x13848784,0x13848785,0x44614861,0x60010022,0x6784d887,0x1187d987,
  0x00000000,0xfffffff8,0x44614860,0xff830000,0x80001012,0xc0000442,0x2784d88c,
  0xfffffff0,0xff50000c,0xe0000013,0x678bc08c,0x118bc88b,0x138ec88e,0x20000081,
  0x218ec040,0xc0001013,0xc0000860,0x1185c885,0x2785c08c,0x20000111,0x6784d88c,
  0x00000000,0xfffffff0,0xff50000d,0x3c004045,0x6686c08e,0x2387d841,0xe487d900,
  0x018cde8c,0x40000000,0x00007fff,0xffffffff,0xfffffffd,0x00000000,0xff455004,
  0xff810000,0xa0000122,0x648cd889,0x678cd987,0x00000000,0x00000000,0x00000000,
  0xff820000,0xff810000,0x70000093,0x6687c08b,0x2189c160,0x9900c300,0x20040011,
  0x93840001,0x00000000,0x60616060,0x00001001,0xc0000440,0x1c000023,0x018bd089,
  0x1b8bc58b,0x1187c487,0x00000000,0x000000ff,0x30000012,0x1989c389,0x018bd08b,
  0x000007f8,0x04000101,0x67898889,0x04000001,0x61c089d1,0x00001001,0xc0000420,
  0xff50000e,0x78000034,0x1187c487,0x018bd089,0x6701d985,0x1b8bc58b,0x00000000,
  0xffffffe0,0x000000ff,0x24000012,0x1989c389,0x018bd08b,0x000007f8,0x04000001,
  0x67898889,0x20000011,0x0185dc85,0x00007fff,0xffffffff,0x20000011,0x6785d885,
  0x00000000,0x00000000,0xff810000,0x04000081,0x61c089d1,0x04000011,0x6785d885,
  0x00000000,0x00000000,0xff810000,0x00001001,0xc0000420,0xff000000,0x24004023,
  0x11c0d08e,0x11848b8b,0x40000000,0x00000000,0x00000018,0xff433023,0x20000011,
  0x118bd08b,0x00000000,0x00000010,0xa00000a2,0x678bd88c,0x678bd98d,0x00000000,
  0xffffffe8,0xffffffe0,0x20000011,0x678bd800,0x00000000,0xffffffd8,0x80000001,
  0x278bc08c,0x80000001,0x278bc88d,0xe0000033,0x1d00d08f,0x0100dd00,0x278bdb00,
  0xfffffff0,0x00007fff,0xffffffff,0x0000002f,0x20000111,0x208fd840,0x00000000,
  0x00000000,0xff810000,0x60011023,0xc0000460,0x6700d801,0x118bc084,0x00000000,
  0x44604860,0xff820000,0x80000091,0x2784d887,0x00000000,0xfffffff8,0x20000101,
  0x6601c08b,0x38000023,0x1101c487,0x018bd089,0x1b8bc58b,0x00000000,0x000000ff,
  0x30000012,0x1989c389,0x018bd08b,0x000007f8,0x04000101,0x67898889,0x04000001,
  0x61c089d1,0x00001001,0xc0000420,0xff000000,0x30004013,0x1187c487,0x11848b89,
  0x40000000,0xff412003,0xa0004123,0x6789d88c,0x6689d98d,0x80000000,0xfffffff8,
  0xfffffff0,0xff433001,0x20004022,0x018cdc8c,0xc0000000,0x00000000,0x00007fff,
  0xffffffff,0xff443002,0xe0000023,0x668cd88a,0x188dc303,0x678cd98f,0x00000000,
  0x00000000,0xff820000,0xff810000,0x20000001,0x0cc60303,0xff50000b,0x60000112,
  0xe78f0389,0x208d8a20,0x00000000,0x60011123,0xc0000460,0x128d8a8d,0xa189d841,
  0x00000000,0x44e00000,0xff820000,0x60011023,0xc0000841,0x108dc18d,0x1103c803,
  0x00000000,0x44614861,0xf80000b5,0x1387d887,0x6587d98e,0x1189c08c,0x3ec48d8a,
  0x11848b89,0xfffffffe,0x00000000,0xff810000,0xc0000012,0x108dc18d,0x2789c88c,
  0x00000000,0x84000012,0x198ec28e,0x2789c08a,0x00000000,0x14000012,0x11878e87,
  0x2689d88d,0xfffffff8,0xff50000c,0x1c000113,0x6687c089,0x1187c487,0x6487c08a,
  0xf0000024,0x198ac38a,0x1b89cd8e,0x1b89d08c,0x1b89c58b,0x00000015,0x70000123,
  0x678a888a,0x018ed88e,0x018bd18b,0x000007f8,0x0007fff8,0x64000023,0x61c08ad1,
  0x018cd08c,0x018ed18d,0x000007f8,0x000007f8,0x00001001,0xc0000420,0xff50000d,
  0xe1000133,0x668cd889,0x238dd98f,0xe78cda00,0x01c00000,0x00000000,0x00000000,
  0x00000000,0xff830000,0xff820000,0xff810000,0x60000112,0x208d8960,0x108d8a8a,
  0x00000000,0x60001013,0xc0000c60,0x918f008f,0x108ac18a,0xa0000122,0x678fd889,
  0xe78fd901,0x00000000,0x00000000,0x00000000,0xff820000,0xff810000,0xa0000122,
  0x2189d840,0xe78fd902,0x00000000,0x00000000,0x00000000,0xff820000,0xff810000,
  0x20011012,0xc0000440,0x108dc18d,0x44600000,0x2c0000a3,0x6587d88e,0x1387d987,
  0x11848b89,0x00000000,0xfffffffe,0xff820000,0x80000001,0x2789c001,0x84000012,
  0x198ec28e,0x2789c802,0x00000000,0x84001023,0xc0000c20,0x11878e87,0x2689d88a,
  0x00000000,0xfffffff8,0xff000000,0x7c004046,0x11c0d803,0x1187c002,0x1387d987,
  0x1b8ec18e,0x11848b89,0x40000000,0x00000000,0x00000000,0x00000000,0xff445002,
  0xff820000,0xff810000,0xa8000023,0x11878e87,0x6789d800,0x6789d98a,0xfffffff0,
  0xffffffe8,0x14000012,0x6687c006,0x6487c007,0x00000000,0x30000022,0x11c0d804,
  0x11c0d101,0x00000000,0x0000002f,0x00000000,0xff810000,0xe0000023,0x0100dc8c,
  0x1d00018f,0x1d8a018a,0x00007fff,0xffffffff,0x60000022,0xe48cd805,0x2100d942,
  0x00000000,0x00000000,0x00000000,0xff820000,0xff810000,0x700000a3,0x1907c307,
  0x208fd840,0x208ad941,0x00000000,0x00000000,0xff820000,0xff810000,0x200800a1,
  0xa105d843,0x00000000,0x00000000,0x620050a0,0x60614040,0xff830000,0x04040021,
  0x11c0dc8a,0x00000000,0xfffe7fff,0x00000000,0x60634060,0x98020033,0x1904c307,
  0x2487c004,0x2789d88a,0x00000000,0xfffffff8,0x50600000,0x09601260,0xf8000035,
  0x1187c487,0x67078807,0x1b06cd8e,0x1b06d08c,0x1b06c58b,0x00000000,0x00000015,
  0x64000023,0x61c007d1,0x018ed88e,0x018bd18b,0x000007f8,0x0007fff8,0x10010011,
  0x2402d803,0xfffffffc,0x12600000,0x60001023,0xc0000420,0x018cd08c,0x018ed18d,
  0x000007f8,0x000007f8,0xff000000,0xf4004036,0x6687c081,0x6487c082,0x11848d8a,
  0x218cc040,0x6784d889,0x40000000,0xfffffff8,0xff424005,0xe0004134,0x118ad88a,
  0x11848b8b,0x11c0d903,0x80000000,0x00000000,0x00000000,0x00000000,0xff444002,
  0xff820000,0xff810000,0x70004024,0x1982c382,0x138a898a,0x118b8c02,0xc0000000,
  0x00000000,0xff423003,0x70011024,0xc0000440,0x67828882,0x1302c88c,0x218a8421,
  0x44e00000,0x00001001,0xc0000861,0xff50000b,0xe0004024,0x678ad88d,0x118ac88a,
  0x118bc802,0x40000000,0xfffffff0,0xff42300b,0x60000092,0x21028c20,0x218a8421,
  0x00000000,0xc0000012,0x1102c08b,0x278bc08d,0x00000000,0x00001001,0xc0000c60,
  0x00001001,0xc0000441,0xff50000c,0xc0000012,0x118bc88b,0x278bc003,0x00000000,
  0x20000101,0x218b8c20,0x00001001,0xc0000840,0xff50000d,0xec000035,0x61c082d1,
  0x1187c487,0x1b81cd8e,0x1b81d08c,0x1b81c58b,0x00000000,0x00000015,0x60000022,
  0x018ed88e,0x018bd18b,0x00000000,0x000007f8,0x0007fff8,0x60001023,0xc0000420,
  0x018cd08c,0x018ed18d,0x000007f8,0x000007f8,0xff50000f,0x34004034,0x11c0d889,
  0x6786d18c,0x1184c08d,0x80000000,0x00000000,0x00000010,0x00000000,0xff444006,
  0xff810000,0x30000092,0x2686c089,0x218d8a60,0x00000000,0x20000011,0xe78cd889,
  0x00000000,0x00000000,0xff810000,0x40001012,0xc0000c40,0x138d8a8d,0x00000000,
  0x60000012,0x118dc802,0x118d8b8d,0x00000000,0x30000112,0x2686c002,0x218d8960,
  0x00000000,0x00001001,0xc0000840,0x00004001,0x40000000,0xff311000,0x04000001,
  0x6686c001,0xb00000a3,0x2786d087,0x138a848a,0x278cd984,0x00000000,0x00000018,
  0xff820000,0x84000012,0x1301c801,0x278cd88b,0x00000000,0xff810000,0x24009024,
  0xc0000420,0x1b01c301,0x118cc000,0x50000008,0x00000000,0xa0004123,0x678cd884,
  0x678cd98b,0x80000000,0x00000000,0x00000000,0xff433006,0xff820000,0xff810000,
  0x20000001,0x118a848a,0xff500010,0x60000012,0x678ad88d,0x118ac88a,0xfffffff0,
  0x20000081,0x218a8420,0xc0001013,0xc0000840,0x118bc88b,0x278bc08d,0xec000035,
  0x61c082d1,0x1187c487,0x1b81cd8e,0x1b81d08c,0x1b81c58b,0x00000000,0x00000015,
  0x60000022,0x018ed88e,0x018bd18b,0x00000000,0x000007f8,0x0007fff8,0x60001023,
  0xc0000420,0x018cd08c,0x018ed18d,0x000007f8,0x000007f8,0xff000000,0x04000101,
  0x6686c089,0x20000001,0x118e898e,0xff000000,0xff50000b,0x20004112,0x6784d887,
  0xc0000000,0xfffffff8,0xff422019,0x10004012,0x2686c08e,0x40000000,0x00000000,
  0xff42200b,0x60000022,0x2387d840,0x9387d98c,0x00000000,0x00000000,0x00000000,
  0xff820000,0xff810000,0x20000091,0xa38cd841,0x00000000,0x00000000,0xff810000,
  0x00040000,0x60616261,0x00001001,0xc0000c41,0x60011023,0xc0000460,0x13848c84,
  0x118b8c8b,0x00000000,0x44e04960,0xff500018,0xf4004046,0x6487d801,0x6686c000,
  0x1184c085,0x138ec88e,0x6487d902,0x40000000,0x00000000,0xfffffffd,0xffffffff,
  0xff445003,0x740040b5,0x6687c003,0x6487c004,0x218ec040,0x11c0d889,0x80000000,
  0x00000000,0x00000000,0xff434002,0xff810000,0x24001013,0xc0000440,0x1901c301,
  0x1902c302,0xff50000c,0x60000012,0x67858b8c,0x138ec88e,0x00000000,0x20000181,
  0x218ec040,0xc0001023,0xc0000860,0x1185c885,0x2785d88c,0x00000000,0xfffffff0,
  0xff50000d,0x04004112,0x21010060,0x80000000,0x00000000,0xff422004,0xf0021045,
  0xc0000860,0x1904c304,0x13840284,0x1b03cd8e,0x1b03d08c,0x00000000,0x00000015,
  0x48605060,0x10604460,0x7c000035,0x1384d084,0x1187c487,0x67048804,0x1b03c58b,
  0x018ed98e,0x0007fff8,0x00000010,0x24000122,0x6784d885,0x018bd18b,0x00000000,
  0x000007f8,0xfffffff0,0x24000022,0x61c004d1,0x0185dc85,0x00000000,0x00007fff,
  0xffffffff,0x20000111,0x6785d885,0x00000000,0x00000000,0xff810000,0xe0001034,
  0xc0000420,0x018cd08c,0x018ed18d,0x6785da85,0x00000000,0x000007f8,0x000007f8,
  0xff830000,0xff50000e,0xc4001024,0xc0000420,0x1100c800,0x1185c885,0x2785d889,
  0xfffffff0,0xff000000,0xff50000b,0x04004112,0x6784d887,0xc0000000,0xfffffff8,
  0xff422019,0x10004012,0x2686c08e,0x40000000,0x00000000,0xff42200b,0x6c004035,
  0xe487c001,0x2387d840,0xe687c000,0x9387d98c,0x80000000,0x00000000,0x00000000,
  0xff434003,0xff820000,0xff810000,0x20000011,0xa38cd841,0x00000000,0x00000000,
  0xff810000,0x00040000,0x60616261,0x00001001,0xc0000c41,0xff000000,0xf0021035,
  0xc0000460,0x1901c301,0x13848c84,0x118b8c8b,0x67848b8c,0x49605060,0x106044e0,
  0xff000000,0x30011023,0xc0000460,0x1901c301,0x13848c84,0x00000000,0x106044e0,
  0xff000000,0x80000011,0x2784d88c,0x00000000,0xfffffff0,0xff000000,0xff50000c,
  0x240040a3,0x6487d889,0x6487d98b,0x40000000,0xfffffffd,0xffffffff,0xff43300c,
  0x40000011,0x018ed08a,0x00000000,0x000007f8,0x04000001,0x1989c389,0x04000001,
  0x21898a60,0x70021034,0xc0000860,0x67018801,0x198bc38b,0x1384d084,0x00000010,
  0x48600000,0x10604460,0xe8000024,0x1187c487,0x13848b84,0x1b00cd8e,0x1b00d08c,
  0x00000015,0xe0000123,0x6784d885,0x1b00c58b,0x018ed98e,0x0007fff8,0xfffffff0,
  0x24000022,0x61c001d1,0x0185dc85,0x00000000,0x00007fff,0xffffffff,0x60000122,
  0x6785d885,0x018cd18c,0x00000000,0x000007f8,0x00000000,0xff810000,0x80000011,
  0x018bd08b,0x00000000,0x000007f8,0x60001023,0xc0000420,0x6785d885,0x018ed18d,
  0x000007f8,0x00000000,0xff810000,0xff50000d,0x60000022,0x1384d089,0x11c0d98a,
  0x00000000,0x00000000,0x00000018,0xff820000,0xa0001013,0xc0000420,0x118ec88e,
  0x27898e8a,0xff000000,0x68000023,0x1387d802,0x11848b8b,0x1b8ec101,0x00000000,
  0x00000000,0xff810000,0xa4000123,0x11020103,0x678bd08c,0x678bc089,0x00000000,
  0x00000010,0xf4000125,0xe487c000,0xe403c004,0x31898c89,0x2f8cc022,0x678bc88a,
  0x0c000012,0x9900c300,0x9904c304,0x00000000,0x74000124,0xe7008800,0xe7048804,
  0x2f8a8920,0x2f898a21,0x00000000,0x800c0021,0x278bc089,0x00000000,0x00007360,
  0x62006480,0x60616280,0x8c010023,0x1104c000,0x1103c087,0x278bd089,0x00000018,
  0x04e00960,0x1c000113,0x61c000d1,0x1187c487,0x6687c089,0xe0000023,0x1b89cd8e,
  0x1b89d08c,0x1b89c58b,0x00000000,0x00000015,0x60000022,0x018ed88e,0x018bd18b,
  0x00000000,0x000007f8,0x0007fff8,0x60001023,0xc0000420,0x018cd08c,0x018ed18d,
  0x000007f8,0x000007f8,0xff000000,0x70004034,0x1387d802,0x11848b8b,0x11c0d100,
  0x80000000,0x00000000,0x0000002f,0x00000000,0xff444041,0xff810000,0xb8000124,
  0x1b8ec103,0x678bd08c,0x678bc089,0x678bc88a,0x00000010,0x78000024,0x11020302,
  0x1d8c008f,0x1d890000,0x1d8a0001,0x00000000,0x6c000044,0x208fd8c3,0x208fd920,
  0x2000da21,0x2001db22,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
  0xff840000,0xff830000,0xff820000,0xff810000,0x00080010,0x00000000,0x620050a2,
  0x60614060,0x60000092,0x2f8a8920,0x2f898a21,0x00000000,0x80011022,0xc0000862,
  0x278bd089,0x00000000,0x00000018,0x50620000,0x000c0010,0x00007360,0x006364c0,
  0x606162c0,0x04010011,0x1102c087,0x00000000,0x04600000,0x1c000113,0x6487c08a,
  0x1187c487,0x6687c089,0xf0000024,0x198ac38a,0x1b89cd8e,0x1b89d08c,0x1b89c58b,
  0x00000015,0x70000123,0x678a888a,0x018ed88e,0x018bd18b,0x000007f8,0x0007fff8,
  0x64000023,0x61c08ad1,0x018cd08c,0x018ed18d,0x000007f8,0x000007f8,0x00001001,
  0xc0000420,0xff000000,0x70000023,0x1387d800,0x11848b8b,0x1b8ec18e,0x00000000,
  0x00000000,0xff810000,0x20000101,0x678bc08c,0x20000091,0x218cd840,0x00000000,
  0x00000000,0xff810000,0x84010022,0x11008e87,0x278bd88c,0x00000000,0xfffffff8,
  0x04e05260,0x1c000113,0x6687c089,0x1187c487,0x6487c08a,0xf0000024,0x198ac38a,
  0x1b89cd8e,0x1b89d08c,0x1b89c58b,0x00000015,0x70000123,0x678a888a,0x018ed88e,
  0x018bd18b,0x000007f8,0x0007fff8,0x64000023,0x61c08ad1,0x018cd08c,0x018ed18d,
  0x000007f8,0x000007f8,0x00001001,0xc0000420,0xff000000,0x1c000113,0x6687c089,
  0x1187c487,0x6487c08a,0xf0000024,0x198ac38a,0x1b89cd8e,0x1b89d08c,0x1b89c58b,
  0x00000015,0x70000123,0x678a888a,0x018ed88e,0x018bd18b,0x000007f8,0x0007fff8,
  0x64000023,0x61c08ad1,0x018cd08c,0x018ed18d,0x000007f8,0x000007f8,0x00001001,
  0xc0000420,0xff000000,0x24000012,0x1387d887,0x1b8ec100,0x00000000,0xff810000,
  0x1c000193,0x66870089,0x11870087,0x6487008a,0xf8000035,0x1187c487,0x198ac38a,
  0x1b89cd8e,0x1b89d08c,0x1b89c58b,0x00000000,0x00000015,0x70000123,0x678a888a,
  0x018ed88e,0x018bd18b,0x000007f8,0x0007fff8,0x64000023,0x61c08ad1,0x018cd08c,
  0x018ed18d,0x000007f8,0x000007f8,0x00001001,0xc0000420,0xff000000,0xf00040b5,
  0x6487c001,0x6787d885,0x11848b8b,0x6786d18c,0x40000000,0x00000010,0x00000000,
  0xff43401f,0xff810000,0x70000023,0x1901c301,0xe487d805,0x11c0d98a,0x00000000,
  0x00000000,0xff820000,0xff810000,0xb0004124,0x67018801,0x678cd889,0x6687c000,
  0x80000000,0x00000000,0xff423002,0xff810000,0xe4000024,0x61c001d3,0x218b8960,
  0x1b00cd02,0x1b00d003,0x00000015,0x00001001,0xc0000460,0x60004013,0x1905c38b,
  0x1b00c504,0x40000000,0xff412001,0x30001013,0xc0000860,0x1187c487,0x218e8b60,
  0xff50000b,0x60000012,0x138ec889,0x118ec88e,0x00000000,0x20000001,0x218e8b60,
  0x80001012,0xc0000440,0x2784898a,0x00000000,0xff50000c,0x60000022,0x0102d88e,
  0x0104d18b,0x00000000,0x000007f8,0x0007fff8,0x60001023,0xc0000c20,0x0103d08c,
  0x018ed18d,0x000007f8,0x000007f8,0xff000000,0xf0004035,0xe487c002,0x6784d885,
  0x118ed989,0x118e848e,0x40000000,0x00000000,0xfffffff0,0xff43401e,0xff820000,
  0xe4004035,0xe487d800,0x6786d18c,0x118ec88e,0xe687c001,0x80000000,0x00000010,
  0x00000000,0xff434002,0xff810000,0xa0000012,0x118b8e8b,0x278ed889,0xfffffff8,
  0x90000012,0x9902c302,0x278ed885,0xfffffff0,0x30000112,0xe7028802,0x678cd889,
  0x00000000,0xff810000,0x2c000013,0xe1c002d3,0xa100c041,0x218b8960,0x24011023,
  0xc0000460,0x118ec084,0x1184c08b,0x00000000,0x44600460,0xe0011034,0xc0000841,
  0x118bc88b,0x1b01d08c,0x6787d985,0x00000000,0x00000015,0x44e10000,0xff830000,
  0xff50000b,0x60004023,0x118bc88b,0x11c0d88a,0x40000000,0x00000000,0x00000000,
  0xff433003,0xff810000,0x20004012,0x218b8420,0x80000000,0x00000000,0xff42200b,
  0x240100a2,0x1300c100,0x678bd803,0x00000000,0xfffffff0,0x44600460,0x00001001,
  0xc0000460,0xa4000013,0x2100c040,0x118ec88e,0x278ec003,0x80001012,0xc0000860,
  0x278bd88a,0xfffffff0,0xff50000c,0xe8000024,0x1187c487,0x1b01cd8e,0x018cd08c,
  0x1b01c58b,0x000007f8,0x60000022,0x018ed88e,0x018bd18b,0x00000000,0x000007f8,
  0x0007fff8,0x40001012,0xc0000c20,0x018ed08d,0x000007f8,0xff50000d,0xa4004024,
  0x1300c100,0x118ec88e,0x278ec08a,0x80000000,0x00000000,0xff42300c,0x04000001,
  0x2100c040,0x00001001,0xc0000460,0x00001001,0xc0000820,0xff000000,0xe0004134,
  0x6784d885,0x11848e8e,0x6786d18c,0x40000000,0x00000000,0x00000010,0xfffffff0,
  0xff44401d,0xe00000b3,0x0185dc85,0x138ec88e,0x278cda84,0x00000000,0x00000000,
  0x00007fff,0xffffffff,0xff830000,0x64000133,0x6785d885,0x678cd98a,0x118eda89,
  0x00000000,0x00000000,0x00000000,0x00000000,0xff830000,0xff820000,0xff810000,
  0xe8000034,0x11c0d889,0x21898a60,0x118cc000,0x278cd98e,0x00000000,0x00000000,
  0x00000000,0xff820000,0xff810000,0x10011022,0xc0000460,0x2688d889,0x00000000,
  0x00000000,0x10600000,0xff820000,0x04000001,0x61c085d1,0x00009012,0xc0000420,
  0x50000008,0x00000000,0xe0004034,0x678cd884,0x1900c38e,0x11c0d989,0x40000000,
  0x00000000,0x00000000,0x00000000,0xff444016,0xff820000,0xff810000,0xb0000023,
  0x2788d88c,0x11848e8b,0x2688d989,0x00000000,0x00000000,0xff820000,0xff810000,
  0x24000122,0x6784d887,0x678cd989,0x00000000,0x00000000,0xfffffff8,0xff820000,
  0x20001012,0xc0000420,0x13898b8b,0x00000000,0xff000000,0xe0004134,0x6784d801,
  0x11848e8e,0x6786d18c,0x40000000,0x00000000,0x00000010,0xfffffff0,0xff44401d,
  0xe00000b3,0x0101dc01,0x138ec88e,0x278cda84,0x00000000,0x00000000,0x00007fff,
  0xffffffff,0xff830000,0x74000144,0x6701d801,0x6788d902,0x678cda8a,0x118edb89,
  0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0xff840000,0xff830000,
  0xff820000,0xff810000,0xec000035,0x1101c085,0x11c0d889,0x21898a60,0x118cc000,
  0x278cd98e,0x00000000,0x00000000,0xff820000,0xff810000,0x10011022,0xc0000460,
  0x2688d889,0x00000000,0x00000000,0x10600000,0xff820000,0x04000001,0x61c002d1,
  0x00009012,0xc0000420,0x50000008,0x00000000,0xe0004034,0x678cd884,0x1900c38e,
  0x11c0d989,0x40000000,0x00000000,0x00000000,0x00000000,0xff444016,0xff820000,
  0xff810000,0xb0000023,0x2788d88c,0x11848e8b,0x2688d989,0x00000000,0x00000000,
  0xff820000,0xff810000,0x24000122,0x6784d887,0x678cd989,0x00000000,0x00000000,
  0xfffffff8,0xff820000,0x20001012,0xc0000420,0x13898b8b,0x00000000,0xff000000,
  0xff100000
};

#line 9 "vm_e2k.dasc"
//|.globals GLOB_
enum {
  GLOB_vm_returnp,
  GLOB_cont_dispatch,
  GLOB_vm_returnc,
  GLOB_vm_unwind_c_eh,
  GLOB_BC_RET_Z,
  GLOB_vm_return,
  GLOB_vm_unwind_c,
  GLOB_vm_unwind_ff,
  GLOB_vm_unwind_ff_eh,
  GLOB_vm_growstack_c,
  GLOB_vm_growstack_v,
  GLOB_vm_growstack_f,
  GLOB_vm_resume,
  GLOB_vm_pcall,
  GLOB_vm_call,
  GLOB_vmeta_call,
  GLOB_vm_cpcall,
  GLOB_cont_ffi_callback,
  GLOB_vm_call_tail,
  GLOB_cont_cat,
  GLOB_cont_ra,
  GLOB_BC_CAT_Z,
  GLOB_cont_nop,
  GLOB_vmeta_tgets,
  GLOB_vmeta_tgetb,
  GLOB_vmeta_tgetv,
  GLOB_vmeta_tgetr,
  GLOB_vmeta_tsets,
  GLOB_vmeta_tsetb,
  GLOB_vmeta_tsetv,
  GLOB_vmeta_tsetr,
  GLOB_vmeta_comp,
  GLOB_vmeta_binop,
  GLOB_cont_condt,
  GLOB_cont_condf,
  GLOB_vmeta_equal,
  GLOB_vmeta_equal_cd,
  GLOB_vmeta_istype,
  GLOB_vmeta_arith_vn,
  GLOB_vmeta_arith_nv,
  GLOB_vmeta_unm,
  GLOB_vmeta_arith_vv,
  GLOB_vmeta_len,
  GLOB_BC_LEN_Z,
  GLOB_BC_CALLT_Z,
  GLOB_vmeta_for,
  GLOB_ff_assert,
  GLOB_fff_fallback,
  GLOB_fff_res,
  GLOB_ff_type,
  GLOB_ff_getmetatable,
  GLOB_ff_setmetatable,
  GLOB_ff_rawget,
  GLOB_ff_tonumber,
  GLOB_ff_tostring,
  GLOB_ff_next,
  GLOB_ff_pairs,
  GLOB_ff_ipairs_aux,
  GLOB_ff_ipairs,
  GLOB_ff_pcall,
  GLOB_ff_xpcall,
  GLOB_ff_coroutine_resume,
  GLOB_ff_coroutine_wrap_aux,
  GLOB_ff_coroutine_yield,
  GLOB_ff_math_abs,
  GLOB_ff_math_sqrt,
  GLOB_fff_resb,
  GLOB_ff_math_floor,
  GLOB_vm_floor,
  GLOB_ff_math_ceil,
  GLOB_vm_ceil,
  GLOB_ff_math_log,
  GLOB_ff_math_log10,
  GLOB_ff_math_exp,
  GLOB_ff_math_sin,
  GLOB_ff_math_cos,
  GLOB_ff_math_tan,
  GLOB_ff_math_asin,
  GLOB_ff_math_acos,
  GLOB_ff_math_atan,
  GLOB_ff_math_sinh,
  GLOB_ff_math_cosh,
  GLOB_ff_math_tanh,
  GLOB_ff_math_pow,
  GLOB_ff_math_atan2,
  GLOB_ff_math_fmod,
  GLOB_ff_math_ldexp,
  GLOB_ff_math_frexp,
  GLOB_ff_math_modf,
  GLOB_ff_math_min,
  GLOB_ff_math_max,
  GLOB_ff_string_byte,
  GLOB_ff_string_char,
  GLOB_fff_newstr,
  GLOB_ff_string_sub,
  GLOB_ff_string_reverse,
  GLOB_ff_string_lower,
  GLOB_ff_string_upper,
  GLOB_ff_bit_band,
  GLOB_ff_bit_bor,
  GLOB_ff_bit_bxor,
  GLOB_ff_bit_tobit,
  GLOB_ff_bit_bswap,
  GLOB_ff_bit_bnot,
  GLOB_ff_bit_lshift,
  GLOB_ff_bit_rshift,
  GLOB_ff_bit_arshift,
  GLOB_ff_bit_rol,
  GLOB_ff_bit_ror,
  GLOB_vm_record,
  GLOB_vm_rethook,
  GLOB_vm_inshook,
  GLOB_cont_hook,
  GLOB_vm_callhook,
  GLOB_vm_hotcall,
  GLOB_vm_profhook,
  GLOB_vm_trunc,
  GLOB_vm_mod,
  GLOB_assert_bad_for_arg_type,
  GLOB_vm_ffi_callback,
  GLOB_vm_ffi_call,
  GLOB_BC_TSETS_Z,
  GLOB_BC_TGETS_Z,
  GLOB__MAX
};
#line 10 "vm_e2k.dasc"
//|.globalnames globnames
static const char *const globnames[] = {
  "vm_returnp",
  "cont_dispatch",
  "vm_returnc",
  "vm_unwind_c_eh",
  "BC_RET_Z",
  "vm_return",
  "vm_unwind_c",
  "vm_unwind_ff",
  "vm_unwind_ff_eh",
  "vm_growstack_c",
  "vm_growstack_v",
  "vm_growstack_f",
  "vm_resume",
  "vm_pcall",
  "vm_call",
  "vmeta_call",
  "vm_cpcall",
  "cont_ffi_callback",
  "vm_call_tail",
  "cont_cat",
  "cont_ra",
  "BC_CAT_Z",
  "cont_nop",
  "vmeta_tgets",
  "vmeta_tgetb",
  "vmeta_tgetv",
  "vmeta_tgetr",
  "vmeta_tsets",
  "vmeta_tsetb",
  "vmeta_tsetv",
  "vmeta_tsetr",
  "vmeta_comp",
  "vmeta_binop",
  "cont_condt",
  "cont_condf",
  "vmeta_equal",
  "vmeta_equal_cd",
  "vmeta_istype",
  "vmeta_arith_vn",
  "vmeta_arith_nv",
  "vmeta_unm",
  "vmeta_arith_vv",
  "vmeta_len",
  "BC_LEN_Z",
  "BC_CALLT_Z",
  "vmeta_for",
  "ff_assert",
  "fff_fallback",
  "fff_res",
  "ff_type",
  "ff_getmetatable",
  "ff_setmetatable",
  "ff_rawget",
  "ff_tonumber",
  "ff_tostring",
  "ff_next",
  "ff_pairs",
  "ff_ipairs_aux",
  "ff_ipairs",
  "ff_pcall",
  "ff_xpcall",
  "ff_coroutine_resume",
  "ff_coroutine_wrap_aux",
  "ff_coroutine_yield",
  "ff_math_abs",
  "ff_math_sqrt",
  "fff_resb",
  "ff_math_floor",
  "vm_floor",
  "ff_math_ceil",
  "vm_ceil",
  "ff_math_log",
  "ff_math_log10",
  "ff_math_exp",
  "ff_math_sin",
  "ff_math_cos",
  "ff_math_tan",
  "ff_math_asin",
  "ff_math_acos",
  "ff_math_atan",
  "ff_math_sinh",
  "ff_math_cosh",
  "ff_math_tanh",
  "ff_math_pow",
  "ff_math_atan2",
  "ff_math_fmod",
  "ff_math_ldexp",
  "ff_math_frexp",
  "ff_math_modf",
  "ff_math_min",
  "ff_math_max",
  "ff_string_byte",
  "ff_string_char",
  "fff_newstr",
  "ff_string_sub",
  "ff_string_reverse",
  "ff_string_lower",
  "ff_string_upper",
  "ff_bit_band",
  "ff_bit_bor",
  "ff_bit_bxor",
  "ff_bit_tobit",
  "ff_bit_bswap",
  "ff_bit_bnot",
  "ff_bit_lshift",
  "ff_bit_rshift",
  "ff_bit_arshift",
  "ff_bit_rol",
  "ff_bit_ror",
  "vm_record",
  "vm_rethook",
  "vm_inshook",
  "cont_hook",
  "vm_callhook",
  "vm_hotcall",
  "vm_profhook",
  "vm_trunc",
  "vm_mod",
  "assert_bad_for_arg_type",
  "vm_ffi_callback",
  "vm_ffi_call",
  "BC_TSETS_Z",
  "BC_TGETS_Z",
  (const char *)0
};
#line 11 "vm_e2k.dasc"
//|.externnames extnames
static const char *const extnames[] = {
  "lj_state_growstack",
  "lj_meta_tget",
  "lj_tab_getinth",
  "lj_meta_tset",
  "lj_tab_setinth",
  "lj_meta_comp",
  "lj_meta_equal",
  "lj_meta_equal_cd",
  "lj_meta_istype",
  "lj_meta_arith",
  "lj_meta_len",
  "lj_meta_call",
  "lj_meta_for",
  "lj_tab_get",
  "lj_gc_step",
  "lj_strfmt_num",
  "lj_tab_next",
  "lj_ffh_coroutine_wrap_err",
  "log",
  "log10",
  "exp",
  "sin",
  "cos",
  "tan",
  "asin",
  "acos",
  "atan",
  "sinh",
  "cosh",
  "tanh",
  "pow",
  "atan2",
  "fmod",
  "frexp",
  "modf",
  "lj_str_new",
  "lj_buf_putstr_reverse",
  "lj_buf_tostr",
  "lj_buf_putstr_lower",
  "lj_buf_putstr_upper",
  "lj_dispatch_ins",
  "lj_dispatch_call",
  "lj_dispatch_profile",
  "raise",
  "lj_ccallback_leave",
  "memcpy",
  "lj_tab_len",
  "lj_meta_cat",
  "lj_gc_barrieruv",
  "lj_func_closeuv",
  "lj_func_newL_gc",
  "lj_gc_step_fixtop",
  "lj_tab_new",
  "lj_tab_dup",
  "lj_tab_newkey",
  "lj_tab_reasize",
  (const char *)0
};
#line 12 "vm_e2k.dasc"
//|
//|//-----------------------------------------------------------------------
//|
//|// Fixed register assignments for the interpreter.
//|.define RRET1,     r0
//|.define RARG1,     r0
//|.define RARG2,     r1
//|.define RARG3,     r2
//|.define RARG4,     r3
//|.define RARG5,     r4
//|.define RARG6,     r5
//|.define RARG7,     r6
//|.define RARG8,     r7
//|
//|.define CRET1,     b0
//|.define CRET2,     b1
//|.define CRET3,     b2
//|.define CRET4,     b3
//|.define CRET5,     b4
//|.define CRET6,     b5
//|.define CRET7,     b6
//|.define CRET8,     b7
//|.define CARG1,     b0
//|.define CARG2,     b1
//|.define CARG3,     b2
//|.define CARG4,     b3
//|.define CARG5,     b4
//|.define CARG6,     b5
//|.define CARG7,     b6
//|.define CARG8,     b7
//|
//|.define BASE,      r4
//|.define KBASE,     r5
//|.define STACK,     r6
//|.define PC,        r7
//|.define DISPATCH,  r8
//|
//|.define TMP0,      r9
//|.define TMP1,      r10
//|
//|.define RA,        r11
//|.define RB,        r12
//|.define RC,        r13
//|.define RD,        r14
//|.define ITYPE,     r15
//|
//|.macro do_fault
//| addd 0, 0x0, 0x0, RARG1
//| ldd 0, RARG1, 0x0, RARG1
//|.endmacro
//|
//|// Type definitions. Some of these are only used for documentation.
//|.type L,           lua_State
#define Dt1(_V) (int)(ptrdiff_t)&(((lua_State *)0)_V)
#line 65 "vm_e2k.dasc"
//|.type GL,          global_State
#define Dt2(_V) (int)(ptrdiff_t)&(((global_State *)0)_V)
#line 66 "vm_e2k.dasc"
//|.type TVALUE,      TValue
#define Dt3(_V) (int)(ptrdiff_t)&(((TValue *)0)_V)
#line 67 "vm_e2k.dasc"
//|.type GCOBJ,       GCobj
#define Dt4(_V) (int)(ptrdiff_t)&(((GCobj *)0)_V)
#line 68 "vm_e2k.dasc"
//|.type STR,         GCstr
#define Dt5(_V) (int)(ptrdiff_t)&(((GCstr *)0)_V)
#line 69 "vm_e2k.dasc"
//|.type TAB,         GCtab
#define Dt6(_V) (int)(ptrdiff_t)&(((GCtab *)0)_V)
#line 70 "vm_e2k.dasc"
//|.type LFUNC,       GCfuncL
#define Dt7(_V) (int)(ptrdiff_t)&(((GCfuncL *)0)_V)
#line 71 "vm_e2k.dasc"
//|.type CFUNC,       GCfuncC
#define Dt8(_V) (int)(ptrdiff_t)&(((GCfuncC *)0)_V)
#line 72 "vm_e2k.dasc"
//|.type PROTO,       GCproto
#define Dt9(_V) (int)(ptrdiff_t)&(((GCproto *)0)_V)
#line 73 "vm_e2k.dasc"
//|.type UPVAL,       GCupval
#define DtA(_V) (int)(ptrdiff_t)&(((GCupval *)0)_V)
#line 74 "vm_e2k.dasc"
//|.type NODE,        Node
#define DtB(_V) (int)(ptrdiff_t)&(((Node *)0)_V)
#line 75 "vm_e2k.dasc"
//|.type NARGS,       int
#define DtC(_V) (int)(ptrdiff_t)&(((int *)0)_V)
#line 76 "vm_e2k.dasc"
//|.type TRACE,       GCtrace
#define DtD(_V) (int)(ptrdiff_t)&(((GCtrace *)0)_V)
#line 77 "vm_e2k.dasc"
//|.type SBUF,        SBuf
#define DtE(_V) (int)(ptrdiff_t)&(((SBuf *)0)_V)
#line 78 "vm_e2k.dasc"
//|
//|// Stack layout while in interpreter. Must match with lj_frame.h.
//|//-----------------------------------------------------------------------
//|.define CFRAME_SPACE,  0x30                // 8*6
//|.define STACK_SPACE,   0xffffffd0          // -(8*6)
//|.define MULTRES,       0x0
//|.define SAVE_NRES,     0x8
//|.define SAVE_ERRF,     0xc
//|.define SAVE_L,        0x10
//|.define SAVE_PC,       0x18
//|.define SAVE_CFRAME,   0x20
//|.define STACK_TMP,     0x28
//|
//|//-----------------------------------------------------------------------
//|// Instruction decode+dispatch.
//|.macro ins_NEXT             // AD = {D |A|OP}, ABC = {B|C|A|OP}, AC = {lo_D|A|OP}
//|<
//| ldw 0, PC, 0x0, TMP0
//| ldb 2, PC, 0x0, TMP1
//| addd 1, PC, 0x4, PC
//| nop 2
//|>
//|<
//| shld 2, TMP1, 0x3, TMP1
//| shrd 3, TMP0, 0xd, RD
//| shrd 4, TMP0, 0x15, RB
//| shrd 5, TMP0, 0x5, RA
//|>
//|<
//| ldd 2, TMP1, DISPATCH, TMP1
//| andd 3, RD, 0x7fff8, RD
//| andd 4, RA, 0x7f8, RA
//| nop 2
//|>
//|<
//| movtd 0, TMP1, ctpr1
//| andd 3, RB, 0x7f8, RB
//| andd 4, RD, 0x7f8, RC
//|>
//| ct ctpr1
//|.endmacro
//|
//|// Instruction footer.
//|.if 1
//| // Replicated dispatch. Less unpredictable branches, but higher I-Cache use.
//| .define ins_next, ins_NEXT
//| .define ins_next_, ins_NEXT
//|.else
//| // Common dispatch. Lower I-Cache use, only one (very) unpredictable branch.
//| // Affects only certain kinds of benchmarks (and only with -j off).
//| // Around 10%-30% slower on Core2, a lot more slower on P4.
//| .macro ins_next
//|   disp ctpr1, ->ins_next
//| .endmacro
//| .macro ins_next_
//| ->ins_next:
//|   ins_NEXT
//| .endmacro
//|.endif
//| 
//|// Call decode and dispatch.
//|.macro ins_callt
//| // BASE = new base, RB = LFUNC, RD = (nargs+1)*8, [BASE-8] = PC
//|<
//| ldd 3, RB, LFUNC->pc, PC
//| nop 2
//|>
//|<
//| ldw 3, PC, 0x0, RA
//| ldb 5, PC, 0x0, TMP0
//| nop 2
//|>
//|<
//| shld 0, TMP0, 0x3, TMP0                   // jmp to [DISPATCH+OP*8]
//| addd 1, PC, 0x4, PC
//| shrd 3, RA, 0x5, RA
//|>
//|<
//| ldd 0, TMP0, DISPATCH, TMP0
//| andd 3, RA, 0x7f8, RA
//| nop 2
//|>
//| movtd 0, TMP0, ctpr1
//| ct ctpr1
//|.endmacro
//|
//|.macro ins_call
//| // BASE = new base, RB = LFUNC, RD = (nargs+1)*8, PC = caller PC
//| std 5, BASE, 0xfffffff8, PC
//| ins_callt
//|.endmacro
//|
//|//-----------------------------------------------------------------------
//|.define PC_OP, 0xfffffffc                  // Byte
//|.define PC_RA, 0xfffffffd                  // Byte
//|.define PC_RB, 0xffffffff                  // Byte
//|.define PC_RC, 0xfffffffe                  // Byte
//|.define PC_RD, 0xfffffffe                  // Halfword
//|
//|// Assumes DISPATCH is relative to GL.
#define DISPATCH_GL(field)      (GG_DISP2G + (int)offsetof(global_State, field))
#define PC2PROTO(field)         ((int)offsetof(GCproto, field)-(int)sizeof(GCproto))
//|//-----------------------------------------------------------------------

/* Generate subroutines used by opcodes and other parts of the VM */
/* The .code_sub section should be last to help static branch prediction. */
static void build_subroutines(BuildCtx *ctx)
{
    //|.code_sub
    dasm_put(Dst, 0);
#line 187 "vm_e2k.dasc"
    //|
    //|//-----------------------------------------------------------------------
    //|//-- Return handling ----------------------------------------------------
    //|//-----------------------------------------------------------------------
    //|
    //|->vm_returnp:
    //| disp ctpr1, ->cont_dispatch
    //|<
    //| cmpandesb 0, PC, FRAME_P, pred0
    //| nop 2
    //|>
    //|<
    //| ct ctpr1, pred0
    //| andd 3, PC, 0xfffffff8, PC, ~pred0
    //| subd 4, RA, 0x8, RA, ~pred0
    //|>
    //|
    //| // Return from pcall or xpcall fast func
    //|<
    //| subd 3, BASE, PC, BASE                // Restore caller base.
    //| addd 4, RA, PC, RA                    // Rebase RA and prepend one result.
    //| addd 5, 0x0, U64x(0xfffeffff,0xffffffff), ITYPE
    //|>
    //| ldd 3, BASE, 0xfffffff8, PC           // Fetch PC of previous frame.
    //| // Prepending may overwrite the pcall frame, so do it at the end.
    //| std 5, BASE, RA, ITYPE                // Prepend true to results.
    //|
    //|->vm_returnc:
    //|<
    //| addd 0, 0x0, LUA_YIELD, RRET1
    //| addd 3, RD, 0x8, RD                   // RD = (nresults+1)*8
    //| disp ctpr1, ->vm_unwind_c_eh
    //|>
    //|<
    //| cmpandedb 0, PC, FRAME_TYPE, pred1
    //| cmpedb 3, RD, 0x0, pred0
    //| disp ctpr2, ->BC_RET_Z
    //|>
    //|<
    //| stw 2, STACK, MULTRES, RD, ~pred0
    //| ct ctpr1, pred0
    //|>
    //| ct ctpr2, pred1                       // Handle regular return to Lua.
    //|
    //|->vm_return:
    //| // BASE = base, RA = resultofs, RD/MULTRES = (nresults+1)*8, PC = return
    //|<
    //| xord 1, PC, FRAME_C, PC
    //| subd 2, 0x0, 0x8, TMP1
    //| addd 3, RA, 0x0, CARG4
    //| subd 4, RD, 0x8, CARG3
    //| ldd 5, STACK, SAVE_L, RB
    //| disp ctpr1, ->vm_returnp
    //|>
    //|<
    //| cmpandesb 0, PC, FRAME_TYPE, pred0
    //| andd 1, PC, TMP1, TMP1
    //| addd 2, 0x0, ~LJ_VMST_C, TMP0
    //| cmpedb 3, CARG3, 0x0, pred1
    //| disp ctpr2, >2
    //|>
    //|<
    //| ldw 0, STACK, SAVE_NRES, RA, pred0
    //| stw 2, DISPATCH, DISPATCH_GL(vmstate), TMP0, pred0
    //| subd 3, TMP1, BASE, PC, pred0
    //| ct ctpr1, ~pred0
    //|>
    //| return ctpr3
    //|<
    //| ldw 0, STACK, MULTRES, RD
    //| subd 3, 0x0, PC, PC                   // Previous base = BASE - delta
    //| disp ctpr1, >1
    //|>
    //|<
    //| shld 0, RA, 0x3, RA                   // RA = wanted (nresults+1)*8
    //| std 5, RB, L->base, PC
    //| ct ctpr2, pred1
    //|>
    //|1:                                     // Move results down.
    //|<
    //| ldd 3, BASE, CARG4, TMP1
    //| subd 4, CARG3, 0x8, CARG3
    //| nop 1
    //|>
    //| cmpedb 4, CARG3, 0x0, pred0
    //|<
    //| addd 3, BASE, 0x8, BASE
    //| std 5, BASE, 0xfffffff0, TMP1
    //| ct ctpr1, ~pred0
    //|>
    //|2:
    //| disp ctpr1, >4
    //| cmpesb 0, RA, RD, pred0
    //| ct ctpr1, ~pred0                      // More/less results wanted?
    //|3:
    //|<
    //| addd 2, 0x0, 0x0, RRET1               // Ok return status for vm_pcall.
    //| ldd 3, STACK, SAVE_CFRAME, TMP0       // Restore previous C frame.
    //| subd 4, BASE, 0x10, BASE
    //| nop 1
    //|>
    //| std 5, RB, L->top, BASE
    //|<
    //| std 5, RB, L->cframe, TMP0
    //| ct ctpr3
    //|>
    //|4:
    //|<
    //| ldd 3, RB, L->maxstack, TMP0
    //| addd 4, 0x0, LJ_TNIL, TMP1
    //| disp ctpr1, >5
    //| nop 1
    //|>
    //|<
    //| cmpbsb 0, RA, RD, pred0
    //| disp ctpr2, >6
    //|>
    //|<
    //| cmpbedb 3, BASE, TMP0, pred1
    //| nop 1
    //|>
    //| ct ctpr1, pred0                       // Less results wanted?
    //| disp ctpr1, <4
    //|<
    //| subd 3, BASE, 0x10, TMP0, pred1
    //| ct ctpr2, ~pred1                      // Need to grow stack?
    //|>
    //|<
    //| addd 3, BASE, 0x8, BASE
    //| adds 4, RD, 0x8, RD
    //| std 5, TMP0, 0x0, TMP1                // Check stack size and fill up results with nil.
    //| return ctpr3
    //|>
    //|<
    //| cmpesb 0, RA, RD, pred0
    //| nop 1
    //|>
    //|<
    //| ldd 3, STACK, SAVE_CFRAME, TMP0, pred0 // Restore previous C frame.
    //| subd 4, BASE, 0x10, BASE, pred0
    //| ct ctpr1, ~pred0                      // More/less results wanted?
    //|>
    //|<
    //| addd 0, 0x0, 0x0, RRET1               // Ok return status for vm_pcall.
    //| std 5, RB, L->top, BASE
    //| nop 1
    //|>
    //|<
    //| std 5, RB, L->cframe, TMP0
    //| ct ctpr3
    //|>
    //|5:                                     // Less results wanted.
    dasm_put(Dst, 1, FRAME_P, LUA_YIELD, FRAME_TYPE, FRAME_C, ~LJ_VMST_C, FRAME_TYPE, DISPATCH_GL(vmstate), Dt1(->base), Dt1(->top), Dt1(->cframe), LJ_TNIL, Dt1(->maxstack), Dt1(->top), Dt1(->cframe));
#line 339 "vm_e2k.dasc"
    //| disp ctpr1, <3
    //| cmpesb 0, RA, 0x0, pred0
    //|<
    //| subd 0, RA, RD, RA, ~pred0            // Negative result!
    //| ct ctpr1, pred0
    //|>
    //|<
    //| addd 0, BASE, RA, BASE                // Correct top.
    //| ct ctpr1
    //|>
    //|
    //|6:
    //| // Corner case: need to grow stack for filling up results.
    //| // This can happen if:
    //| // - A C function grows the stack (a lot).
    //| // - The GC shrinks the stack in between.
    //| // - A return back from a lua_call() with (high) nresults adjustment.
    //|
    //| disp ctpr1, extern lj_state_growstack // (lua_State *L, int n)
    //|<
    //| adds 0, RA, 0x0, CARG2
    //| addd 1, RB, 0x0, CARG1
    //| stw 2, STACK, MULTRES, RD
    //| std 5, RB, L->top, BASE               // Save current top held in BASE (yes).
    //|>
    //| call ctpr1, wbs = 0x8
    //|<
    //| ldw 0, STACK, MULTRES, RD
    //| ldw 2, STACK, SAVE_NRES, RA
    //| ldd 3, RB, L->top, BASE               // Need the (realloced) L->top in BASE
    //| disp ctpr1, <4
    //| nop 2
    //|>
    //|<
    //| shld 0, RA, 0x3, RA
    //| ldd 2, STACK, SAVE_CFRAME, TMP0       // Restore previous C frame.
    //| return ctpr3
    //|>
    //| cmpesb 0, RA, RD, pred0
    //|<
    //| addd 0, 0x0, 0x0, RRET1, pred0        // Ok return status for vm_pcall.
    //| subd 3, BASE, 0x10, BASE, pred0
    //| ct ctpr1, ~pred0                      // More/less results wanted?
    //|>
    //|<
    //| std 2, RB, L->cframe, TMP0
    //| std 5, RB, L->top, BASE
    //| ct ctpr3
    //|>
    //|
    //|->vm_unwind_c:                         // Unwind C stack, return from vm_pcall.
    //| // (void *cframe, int errcode)
    //|<
    //| setwd wsz = 0xc, nfx = 0x1, dbl = 0x0
    //| setbn rsz = 0x3, rbs = 0x8, rcur = 0x0
    //| addd 0, RARG1, 0x0, STACK
    //| addd 1, RARG2, 0x0, RRET1             // Error return status for vm_pcall.
    //|>
    //|->vm_unwind_c_eh:                      // Landing pad for external unwinder.
    //|<
    //| ldd 0, STACK, SAVE_L, RB
    //| return ctpr3
    //| nop 2
    //|>
    //|<
    //| ldd 0, RB, L->glref, RB
    //| addd 1, 0x0, ~LJ_VMST_C, TMP0
    //| nop 2
    //|>
    //|<
    //| stw 2, RB, GL->vmstate, TMP0
    //| ct ctpr3
    //|>
    //|
    //|->vm_unwind_ff:                        // Unwind C stack, return from ff pcall.
    //| // (void *cframe)
    //|<
    //| setwd wsz = 0xc, nfx = 0x1, dbl = 0x0
    //| setbn rsz = 0x3, rbs = 0x8, rcur = 0x0
    //| andd 0, RARG1, CFRAME_RAWMASK, RARG1
    //|>
    //| addd 0, RARG1, 0x0, STACK
    //|->vm_unwind_ff_eh:                     //  Landing pad for external unwinder.
    //|<
    //| ldd 0, STACK, SAVE_L, RB
    //| addd 3, 0x0, (1+1)*8, RD              // Really 1+2 results, incr. later.
    //| disp ctpr1, ->vm_returnc
    //|>
    //|<
    //| addd 0, 0x0, ~LJ_VMST_INTERP, TMP0
    //| addd 3, 0x0, U64x(0xffff7fff,0xffffffff), RA
    //| nop 1
    //|>
    //|<
    //| ldd 0, RB, L->glref, DISPATCH         // Setup pointer to dispatch table.
    //| ldd 2, RB, L->base, BASE
    //| nop 2
    //|>
    //|<
    //| ldd 0, BASE, 0xfffffff8, PC           // Fetch PC of previous frame.
    //| addd 1, DISPATCH, GG_G2DISP, DISPATCH
    //| ldd 3, BASE, 0x0, RB
    //| nop 2
    //|>
    //|<
    //| std 2, BASE, 0xfffffff8, RB
    //| std 5, BASE, 0xfffffff0, RA           // Prepend false to error message.
    //|>
    //|<
    //| subd 3, 0x0, 0x10, RA                 // Results start at BASE+RA = BASE-16.
    //| stw 2, DISPATCH, DISPATCH_GL(vmstate), TMP0
    //| ct ctpr1                              // Increments RD/MULTRES and returns.
    //|>
    //|
    //|//-----------------------------------------------------------------------
    //|//-- Grow stack for calls -----------------------------------------------
    //|//-----------------------------------------------------------------------
    //|
    //|->vm_growstack_c:                      // Grow stack for C function.
    dasm_put(Dst, 191, Dt1(->top), Dt1(->top), Dt1(->top), Dt1(->cframe), ~LJ_VMST_C, Dt1(->glref), Dt2(->vmstate), CFRAME_RAWMASK, (1+1)*8, ~LJ_VMST_INTERP, Dt1(->base), Dt1(->glref), GG_G2DISP, DISPATCH_GL(vmstate));
#line 458 "vm_e2k.dasc"
    //| // RB = L, L->base = new base, L->top = top 
    //| disp ctpr1, extern lj_state_growstack // (lua_State *L, int n)
    //|<
    //| addd 0, 0x0, LUA_MINSTACK, CARG2
    //| addd 1, RB, 0x0, CARG1
    //| nop 3
    //|>
    //| call ctpr1, wbs = 0x8
    //|<
    //| ldd 3, RB, L->base, BASE
    //| ldd 5, RB, L->top, RD
    //| nop 2
    //|>
    //|<
    //| ldd 3, BASE, 0xfffffff0, RB
    //| subd 4, RD, BASE, RD
    //| nop 2
    //|>
    //|<
    //| andd 3, RB, U64x(0x00007fff,0xffffffff), RB
    //| addd 4, RD, 0x8, RD
    //|>
    //| // BASE = new base, RB = LFUNC, RD = (nargs+1)*8
    //| ins_callt                             // Just retry the call
    //|
    //|->vm_growstack_v:                      // Grow stack for vararg Lua function.
    //|<
    //| ldb 0, PC, PC2PROTO(framesize)-4, RA
    //| addd 1, PC, 0x4, PC                   // Must point after first instruction.
    //| subd 3, RD, 0x10, RD                  // LJ_FR2
    //|>
    //| disp ctpr1, extern lj_state_growstack // (lua_State *L, int n)
    //|<
    //| std 2, STACK, SAVE_PC, PC
    //| std 5, RB, L->base, BASE
    //|>
    //|<
    //| addd 0, RA, 0x0, CARG2
    //| addd 3, RB, 0x0, CARG1
    //| std 5, RB, L->top, RD
    //| call ctpr1, wbs = 0x8
    //|>
    //| // RB = L, L->base = new base, L->top = top 
    //|<
    //| ldd 3, RB, L->base, BASE
    //| ldd 5, RB, L->top, RD
    //| nop 2
    //|>
    //|<
    //| ldd 3, BASE, 0xfffffff0, RB
    //| subd 4, RD, BASE, RD
    //| nop 2
    //|>
    //|<
    //| andd 3, RB, U64x(0x00007fff,0xffffffff), RB
    //| addd 4, RD, 0x8, RD
    //|>
    //| // BASE = new base, RB = LFUNC, RD = (nargs+1)*8
    //| ins_callt                             // Just retry the call
    //|
    //|->vm_growstack_f:                      // Grow stack for fixarg Lua function.
    //| // BASE = new base, RD = (nargs+1)*8, RB = L, PC = first PC
    //| disp ctpr1, extern lj_state_growstack // (lua_State *L, int n)
    //|<
    //| ldb 0, PC, PC2PROTO(framesize)-4, RA
    //| addd 1, PC, 0x4, PC                   // Must point after first instruction.
    //| addd 3, BASE, RD, RD
    //| nop 1
    //|>
    //|<
    //| std 2, STACK, SAVE_PC, PC
    //| subd 3, RD, 0x8, RD
    //| std 5, RB, L->base, BASE
    //|>
    //|<
    //| addd 0, RA, 0x0, CARG2
    //| addd 3, RB, 0x0, CARG1
    //| std 5, RB, L->top, RD
    //|>
    //| call ctpr1, wbs = 0x8
    //| // RB = L, L->base = new base, L->top = top 
    //|<
    //| ldd 3, RB, L->base, BASE
    //| ldd 5, RB, L->top, RD
    //| nop 2
    //|>
    //|<
    //| ldd 3, BASE, 0xfffffff0, RB
    //| subd 4, RD, BASE, RD
    //| nop 2
    //|>
    //|<
    //| andd 3, RB, U64x(0x00007fff,0xffffffff), RB
    //| addd 4, RD, 0x8, RD
    //|>
    //| // BASE = new base, RB = LFUNC, RD = (nargs+1)*8
    //| ins_callt                             // Just retry the call
    //|
    //|//-----------------------------------------------------------------------
    //|//-- Entry points into the assembler VM ---------------------------------
    //|//-----------------------------------------------------------------------
    //|
    //|->vm_resume:                           // Setup C frame and resume thread.
    //| // (lua_State *L, TValue *base, int nres1 = 0, ptrdiff_t ef = 0)
    //|<
    //| setwd wsz = 0xc, nfx = 0x1, dbl = 0x0
    //| setbn rsz = 0x3, rbs = 0x8, rcur = 0x0
    //| disp ctpr1, >2
    //|>
    //|<
    //| getsp 0, STACK_SPACE, STACK
    //| addd 1, RARG1, 0x0, RB
    //|>
    //|<
    //| addd 0, 0x0, 0x0, RD
    //| addd 1, 0x0, FRAME_CP, PC
    //| ldd 2, RB, L->glref, DISPATCH         // Setup pointer to dispatch table.
    //|>
    //|<
    //| addd 1, RARG2, 0x0, RA
    //| ldb 3, RB, L->status, TMP0
    //| addd 4, STACK, CFRAME_RESUME, KBASE
    //|>
    //|<
    //| std 2, STACK, SAVE_CFRAME, RD
    //| stw 5, STACK, SAVE_NRES, RD
    //|>
    //|<
    //| stw 2, STACK, SAVE_ERRF, RD
    //| std 5, RB, L->cframe, KBASE
    //|>
    //|<
    //| addd 0, DISPATCH, GG_G2DISP, DISPATCH
    //| std 2, STACK, SAVE_PC, RD             // Any value outside of bytecode is ok.
    //| cmpedb 3, TMP0, 0x0, pred0
    //| nop 2
    //|>
    //|<
    //| std 2, STACK, SAVE_L, RARG1
    //| ct ctpr1, pred0                       // Initial resume (like a call).
    //|>
    //| 
    //| // Resume after yield (like a return).
    //|<
    //| ldd 3, RB, L->base, BASE
    //| ldd 5, RB, L->top, TMP1
    //| disp ctpr2, ->BC_RET_Z
    //|>
    //|<
    //| addd 1, 0x0, ~LJ_VMST_INTERP, TMP0
    //| std 2, DISPATCH, DISPATCH_GL(cur_L), RB
    //| disp ctpr1, ->vm_return
    //|>
    //|<
    //| stw 2, DISPATCH, DISPATCH_GL(vmstate), TMP0
    //| stb 5, RB, L->status, RD
    //|>
    //|<
    //| ldd 3, BASE, 0xfffffff8, PC
    //| subd 4, TMP1, RA, RD
    //| subd 5, RA, BASE, RA                  // RA = resultofs
    //|>
    //| addd 3, RD, 0x8, RD                   // RD = (nresults+1)*8
    //| stw 2, STACK, MULTRES, RD
    //|<
    //| cmpandesb 0, PC, FRAME_TYPE, pred0
    //| nop 2
    //|>
    //| ct ctpr2, pred0
    //| ct ctpr1
    //|
    //|->vm_pcall:                            // Setup protected C frame and enter VM.
    dasm_put(Dst, 330, LUA_MINSTACK, Dt1(->top), Dt1(->base), Dt7(->pc), PC2PROTO(framesize)-4, Dt1(->base), Dt1(->top), Dt1(->top), Dt1(->base), Dt7(->pc), PC2PROTO(framesize)-4, Dt1(->base), Dt1(->top), Dt1(->top), Dt1(->base), Dt7(->pc), Dt1(->glref), FRAME_CP, CFRAME_RESUME, Dt1(->status), Dt1(->cframe), GG_G2DISP, Dt1(->top), Dt1(->base), DISPATCH_GL(cur_L), ~LJ_VMST_INTERP, Dt1(->status), DISPATCH_GL(vmstate), FRAME_TYPE);
#line 630 "vm_e2k.dasc"
    //| // (lua_State *L, TValue *base, int news1, ptrdiff_t ef)
    //|<
    //| setwd wsz = 0xc, nfx = 0x1, dbl = 0x0
    //| setbn rsz = 0x3, rbs = 0x8, rcur = 0x0
    //| disp ctpr1, >1
    //|>
    //|<
    //| getsp 0, STACK_SPACE, STACK
    //| addd 1, 0x0, FRAME_CP, PC
    //| nop 1
    //|>
    //|<
    //| stw 2, STACK, SAVE_ERRF, RARG4
    //| ct ctpr1
    //|>
    //|
    //|->vm_call:                             // Setup C frame and enter VM.
    //| // (lua_State *L, TValue *base, int nres1)
    //|<
    //| setwd wsz = 0xc, nfx = 0x1, dbl = 0x0
    //| setbn rsz = 0x3, rbs = 0x8, rcur = 0x0
    //|>
    //|<
    //| getsp 0, STACK_SPACE, STACK
    //| addd 1, 0x0, FRAME_C, PC
    //|>
    //|
    //|1: // Entry point for vm_pcall above (PC = ftype)
    //|<
    //| std 2, STACK, SAVE_L, RARG1
    //| addd 3, RARG2, 0x0, RA
    //| addd 4, RARG1, 0x0, RB
    //| stw 5, STACK, SAVE_NRES, RARG3
    //|>
    //|<
    //| ldd 0, RB, L->glref, DISPATCH            // Setup pointer to dispatch table.
    //| ldd 3, RB, L->cframe, KBASE              // Add our C frame to cframe chain.
    //| nop 3
    //|>
    //|<
    //| std 2, STACK, SAVE_CFRAME, KBASE
    //| std 5, STACK, SAVE_PC, RB                // Any value outsize of bytecode is ok.
    //|>
    //|<
    //| addd 0, DISPATCH, GG_G2DISP, DISPATCH
    //| std 2, RB, L->cframe, STACK
    //|>
    //|
    //|2: // Entry point for vm_resume/vm_cpcall (RA = base, RB = L, PC = ftype)
    //|<
    //| addd 0, PC, RA, PC
    //| addd 1, 0x0, ~LJ_VMST_INTERP, TMP0
    //| ldd 3, RB, L->base, BASE              // BASE = old base (used in vmeta_call).
    //| ldd 5, RB, L->top, RD
    //| disp ctpr1,  ->vmeta_call
    //|>
    //|<
    //| std 2, DISPATCH, DISPATCH_GL(cur_L), RB
    //|>
    //|<
    //| ldd 0, RA, 0xfffffff0, RB             // RB = LFUNC
    //| stw 2, DISPATCH, DISPATCH_GL(vmstate), TMP0
    //| nop 1
    //|>
    //|<
    //| subd 0, PC, BASE, PC                  // PC = frame delta + frame type
    //| addd 3, RA, 0x0, CARG2
    //|>
    //|<
    //| sard 0, RB, 0x2f, ITYPE
    //| andd 1, RB, U64x(0x00007fff,0xffffffff), RB
    //| subd 3, RD, CARG2, RD
    //|>
    //|<
    //| lddsm 0, RB, LFUNC->pc, CARG1
    //| cmpesb 1, ITYPE, LJ_TFUNC, pred0
    //| addd 3, RD, 0x8, RD                   // RD = (nargs+1)*8
    //| nop 1
    //|>
    //|<
    //| addd 3, CARG2, 0x0, BASE, pred0       // BASE = new base
    //| ct ctpr1, ~pred0
    //|>
    //|<
    //| ldb 2, CARG1, 0x0, TMP1
    //| ldw 3, CARG1, 0x0, RA
    //| nop 2
    //|>
    //|<
    //| shld 0, TMP1, 0x3, TMP1               // jmp to [DISPATCH+OP*8]
    //| std 2, BASE, 0xfffffff8, PC           // [BASE-8] = PC
    //|>
    //|<
    //| ldd 0, TMP1, DISPATCH, TMP1
    //| addd 1, CARG1, 0x4, PC
    //| shrd 3, RA, 0x5, RA
    //| nop 2
    //|>
    //|<
    //| movtd 0, TMP1, ctpr1
    //| andd 3, RA, 0x7f8, RA
    //|>
    //| ct ctpr1
    //|
    //|->vm_cpcall:                           // Setup protected C frame, call C.
    //| // (lua_State *L, lua_CFunction func, void *ud, lua_CPFunction cp)
    //|<
    //| setwd wsz = 0xc, nfx = 0x1, dbl = 0x0
    //| setbn rsz = 0x3, rbs = 0x8, rcur = 0x0
    //|>
    //|<
    //| getsp 0, STACK_SPACE, STACK
    //| addd 1, RARG1, 0x0, RB
    //| ldd 2, RARG1, L->top, TMP1
    //|>
    //|<
    //| ldd 0, RB, L->stack, TMP0
    //| ldd 2, RB, L->glref, DISPATCH         // Setup pointer to dispatch table.
    //| nop 1
    //|>
    //|<
    //| movtd 0, RARG4, ctpr1
    //| std 2, STACK, SAVE_L, RB
    //|>
    //|<
    //| subd 0, TMP0, TMP1, TMP0
    //| addd 1, 0x0, 0x0, TMP1
    //| std 2, STACK, SAVE_PC, RB
    //|>
    //|<
    //| addd 0, DISPATCH, GG_G2DISP, DISPATCH
    //| stw 2, STACK, SAVE_ERRF, TMP1         // No error function.
    //|>
    //|<
    //| ldd 0, RB, L->cframe, TMP0
    //| stw 2, STACK, SAVE_NRES, TMP0         // Neg. delta means cframe w/o frame.
    //|>
    //|<
    //| addd 0, RARG1, 0x0, CARG1
    //| std 2, STACK, SAVE_CFRAME, TMP0
    //|>
    //|<
    //| addd 0, RARG2, 0x0, CARG2
    //| std 2, RB, L->cframe, STACK
    //|>
    //|<
    //| addd 0, RARG3, 0x0, CARG3
    //| std 2, DISPATCH, DISPATCH_GL(cur_L), RB
    //| call ctpr1, wbs = 0x8                 // (lua_State *L, lua_CFunction func, void *ud)
    //|>
    //| // TValue * (new base) or NULL returned.
    //| lddsm 0, STACK, SAVE_CFRAME, TMP0     // Restore previous C frame.
    //| disp ctpr1, <2
    //| nop 1
    //|<
    //| cmpedb 1, CRET1, 0x0, pred0
    //| return ctpr3
    //|>
    //|<
    //| addd 0, 0x0, 0x0, RRET1, pred0        // Ok return status for vm_pcall.
    //| std 2, RB, L->cframe, TMP0, pred0
    //|>
    //| ct ctpr3, pred0
    //|<
    //| addd 0, CRET1, 0x0, RA
    //| addd 1, 0x0, FRAME_CP, PC
    //| ct ctpr1                              // Else continue with the call.
    //|>
    //|
    //|//-----------------------------------------------------------------------
    //|//-- Metamethod handling ------------------------------------------------
    //|//-----------------------------------------------------------------------
    //|
    //|//-- Continuation dispatch ----------------------------------------------
    //|
    //|->cont_dispatch:
    dasm_put(Dst, 610, FRAME_CP, FRAME_C, Dt1(->cframe), Dt1(->glref), Dt1(->cframe), GG_G2DISP, Dt1(->top), Dt1(->base), ~LJ_VMST_INTERP, DISPATCH_GL(cur_L), DISPATCH_GL(vmstate), LJ_TFUNC, Dt7(->pc), Dt1(->top), Dt1(->glref), Dt1(->stack), GG_G2DISP, Dt1(->cframe), Dt1(->cframe), DISPATCH_GL(cur_L), Dt1(->cframe), FRAME_CP);
#line 806 "vm_e2k.dasc"
    //| // BASE = meta base, RA = resultofs, RD = (nresults+1)*8 (also in MULTRES)
    //|<
    //| andd 2, PC, 0xfffffff8, PC
    //| addd 3, BASE, RA, RA
    //| addd 4, BASE, 0x0, RB
    //| addd 5, 0x0, LJ_TNIL, TMP0
    //| disp ctpr2, >1
    //|>
    //|<
    //| subd 3, BASE, PC, BASE                // Restore caller BASE.
    //| addd 4, RA, RD, TMP1
    //| addd 5, RA, 0x0, CRET1
    //| disp ctpr1, ->cont_ffi_callback
    //|>
    //|<
    //| ldd 0, RB, 0xffffffe8, PC             // Restore PC from [cont|PC].
    //| ldd 2, RB, 0xffffffe0, RA
    //| disp ctpr3, ->vm_call_tail
    //|>
    //| lddsm 3, BASE, 0xfffffff0, CARG2
    //|<
    //| cmpbedb 0, RA, 0x1, pred0
    //| cmpedb 1, RA, 0x1, pred1
    //| std 5, TMP1, 0xfffffff8, TMP0         // Ensure one valid arg.
    //| nop 2
    //|>
    //|.if FFI
    //| ct ctpr2, pred0
    //|.endif
    //|<
    //| movtd 0, RA, ctpr1
    //| andd 3, CARG2, U64x(0x00007fff,0xffffffff), KBASE
    //|>
    //|<
    //| ldd 3, KBASE, LFUNC->pc, KBASE
    //| nop 2
    //|>
    //|<
    //| ldd 3, KBASE, PC2PROTO(k), KBASE
    //| nop 1
    //|>
    //| ct ctpr1                              // Jump to continuation.
    //| // BASE = base, CRET1 = result, RB = meta base
    //|
    //|.if FFI
    //|1:
    //|<
    //| subd 0, RB, BASE, RB, ~pred1
    //| ct ctpr1, pred1                       // cont = 1: return from FFI callback.
    //|>
    //| // cont = 0: Tail call from C function.
    //|<
    //| subd 0, RB, 0x18, RD
    //| ct ctpr3
    //|>
    //|.endif
    //|
    //|->cont_cat:                            // BASE = base, CRET1 = result, RB = mbase
    //|<
    //| ldb 0, PC, PC_RB, CARG3
    //| lddsm 2, CRET1, 0x0, TMP0
    //| subd 3, RB, 0x20, RB
    //| disp ctpr1, ->cont_ra
    //| nop 2
    //|>
    //|<
    //| shld 3, CARG3, 0x3, CARG3
    //| disp ctpr2, ->BC_CAT_Z
    //|>
    //| addd 3, BASE, CARG3, CARG3
    //| subd 3, CARG3, RB, CARG3
    //|<
    //| cmpedb 3, CARG3, 0x0, pred0
    //| nop 2
    //|>
    //|<
    //| ldd 0, STACK, SAVE_L, CARG1, ~pred0
    //| subd 1, 0x0, CARG3, CARG3
    //| ct ctpr1, pred0
    //|>
    //|<
    //| shrd 0, CARG3, 0x3, CARG3
    //| addd 1, RB, 0x0, CARG2
    //| std 2, RB, 0x0, TMP0
    //| nop 1
    //|>
    //|<
    //| std 2, CARG1, L->base, BASE
    //| ct ctpr2
    //|>
    //|
    //|//-- Table indexing metamethods -----------------------------------------
    //|
    //|->cont_nop:                            // BASE = base, (CRET1 = result)
    //| ins_next
    //|
    //|->vmeta_tgets:
    //|<
    //| ldbsm 0, PC, PC_RB, CARG1               // Reload TValue *t from RB.
    //| disp ctpr1, >1
    //|>
    //|<
    //| addd 0, 0x0, LJ_TSTR, ITYPE
    //| ldb 2, PC, PC_OP, TMP1
    //|>
    //|<
    //| shld 0, ITYPE, 0x2f, ITYPE
    //| addd 1, DISPATCH, DISPATCH_GL(tmptv), TMP0 // Store GStr * in g->tmptv
    //| addd 2, DISPATCH, DISPATCH_GL(tmptv2), CARG2 // Store fn->l.env in g->tmptv2.
    //|>
    //|<
    //| ord 0, RC, ITYPE, RC                  // RC = GCstr *
    //| addd 1, 0x0, LJ_TTAB, RA
    //| shldsm 2, CARG1, 0x3, CARG1
    //|>
    //|<
    //| cmpedb 0, TMP1, BC_GGET, pred0
    //| shld 1, RA, 0x2f, RA
    //| std 2, TMP0, 0x0, RC
    //|>
    //|<
    //| addd 0, TMP0, 0x0, RC
    //| ord 1, RA, RB, RA                     // RB = GCtab * ?
    //|>
    //|<
    //| addd 0, BASE, CARG1, RB, ~pred0
    //| addd 1, CARG2, 0x0, RB, pred0
    //| std 2, CARG2, 0x0, RA, pred0
    //| ct ctpr1
    //|>
    //|
    //|->vmeta_tgetb:
    //|<
    //| ldb 0, PC, PC_RC, TMP1
    //| ldb 2, PC, PC_RB, RB                  // Reload TValue *t from RB.
    //| disp ctpr1, >1
    //| nop 2
    //|>
    //|<
    //| istofd 0, TMP1, TMP0
    //| addd 1, DISPATCH, DISPATCH_GL(tmptv), RC
    //| shld 2, RB, 0x3, RB
    //|>
    //|<
    //| addd 0, BASE, RB, RB
    //| std 2, RC, 0x0, TMP0
    //| ct ctpr1
    //|>
    //|
    //|->vmeta_tgetv:
    //|<
    //| ldb 0, PC, PC_RC, RC                  // Reload TValue *k from RC.
    //| ldb 2, PC, PC_RB, RB                  // Reload TValue *t from RB.
    //| nop 2
    //|>
    //|<
    //| shld 0, RC, 0x3, RC
    //| shld 1, RB, 0x3, RB
    //|>
    //|<
    //| addd 0, BASE, RC, RC
    //| addd 1, BASE, RB, RB
    //|>
    //|1:
    dasm_put(Dst, 825, LJ_TNIL, Dt7(->pc), PC2PROTO(k), Dt1(->base), LJ_TSTR, DISPATCH_GL(tmptv2), DISPATCH_GL(tmptv), LJ_TTAB, BC_GGET, DISPATCH_GL(tmptv));
#line 970 "vm_e2k.dasc"
    //| disp ctpr1, extern lj_meta_tget       // (lua_State *L, TValue *o, TValue *k)
    //|<
    //| ldd 0, STACK, SAVE_L, CARG1
    //| addd 1, RB, 0x0, CARG2
    //| addd 2, RC, 0x0, CARG3
    //| nop 2
    //|>
    //|<
    //| std 2, CARG1, L->base, BASE
    //| addd 3, CARG1, 0x0, RB
    //|>
    //|<
    //| std 2, STACK, SAVE_PC, PC
    //| call ctpr1, wbs = 0x8
    //|>
    //| // TValue * (finished) or NULL (metamethod) returned.
    //|<
    //| cmpedb 0, CRET1, 0x0, pred0
    //| ldd 3, RB, L->base, BASE
    //| disp ctpr3, >2
    //| nop 4
    //|>
    //| ct ctpr3, pred0
    //|
    //|->cont_ra:                             // BASE = base, CRET1 = result
    //|<
    //| ldw 0, PC, 0x0, TMP0
    //| ldb 2, PC, 0x0, TMP1
    //| nop 1
    //|>
    //| ldb 0, PC, PC_RA, CARG3
    //|<
    //| ldd 0, CRET1, 0x0, CARG2
    //| shld 2, TMP1, 0x3, TMP1
    //| shrd 3, TMP0, 0xd, RD
    //| shrd 4, TMP0, 0x15, RB
    //| shrd 5, TMP0, 0x5, RA
    //|>
    //|<
    //| shld 0, CARG3, 0x3, CARG3
    //| addd 1, PC, 0x4, PC
    //| ldd 2, TMP1, DISPATCH, TMP1
    //| andd 3, RD, 0x7fff8, RD
    //| andd 4, RA, 0x7f8, RA
    //| nop 2
    //|>
    //|<
    //| movtd 0, TMP1, ctpr1
    //| andd 3, RB, 0x7f8, RB
    //| andd 4, RD, 0x7f8, RC
    //|>
    //|<
    //| std 2, BASE, CARG3, CARG2
    //| ct ctpr1
    //|>
    //|
    //|2:                                     // Call __index metamethod. 
    //| // BASE = base, L->top = new base, stack = cont/func/t/k
    //|<
    //| ldd 3, RB, L->top, RA
    //| nop 2
    //|>
    //|<
    //| addd 4, RA, FRAME_CONT, PC
    //| std 5, RA, 0xffffffe8, PC             // [RA-24] cont|PC
    //|>
    //|<
    //| subd 2, PC, BASE, PC
    //| ldd 3, RA, 0xfffffff0, RB             // [RA-16] Guaranteed to be a function here.
    //| addd 4, 0x0, (2+1)*8, RD              // (2+1)*8 args for func(t, k)
    //| nop 2
    //|>
    //|<
    //| andd 3, RB, U64x(0x00007fff,0xffffffff), RB
    //| addd 4, RA, 0x0, BASE
    //|>
    //| ins_call
    //| // BASE = new base, RB = func, RD = (nargs+1)*8, PC = caller PC
    //|
    //|->vmeta_tgetr:
    //| disp ctpr1, extern lj_tab_getinth     // // (GCtab *t, int32_t key)
    //|<
    //| addd 0, RB, 0x0, CARG1
    //| adds 1, RC, 0x0, CARG2
    //| nop 3
    //|>
    //| call ctpr1, wbs = 0x8
    //| // cTValue * or NULL returned.
    //|<
    //| ldw 0, PC, 0x0, TMP0
    //| ldb 2, PC, 0x0, TMP1
    //|>
    //|<
    //| ldb 0, PC, PC_RA, RA
    //| cmpedb 1, CRET1, 0x0, pred0
    //| lddsm 2, CRET1, 0x0, ITYPE
    //| nop 1
    //|>
    //|<
    //| shld 2, TMP1, 0x3, TMP1
    //|>
    //|<
    //| ldd 0, TMP1, DISPATCH, TMP1
    //| addd 2, 0x0, LJ_TNIL, ITYPE, pred0
    //| shld 3, RA, 0x3, RA
    //|>
    //|<
    //| addd 1, PC, 0x4, PC
    //| std 2, BASE, RA, ITYPE
    //| shrd 3, TMP0, 0xd, RD
    //| shrd 4, TMP0, 0x15, RB
    //| shrd 5, TMP0, 0x5, RA
    //|>
    //|<
    //| andd 3, RD, 0x7fff8, RD
    //| andd 4, RA, 0x7f8, RA
    //|>
    //|<
    //| movtd 0, TMP1, ctpr1
    //| andd 3, RB, 0x7f8, RB
    //| andd 4, RD, 0x7f8, RC
    //|>
    //| ct ctpr1
    //|
    //|//-----------------------------------------------------------------------
    //|
    //|->vmeta_tsets:
    //|<
    //| ldb 0, PC, PC_OP, TMP0
    //| addd 1, 0x0, LJ_TSTR, ITYPE
    //| ldbsm 2, PC, PC_RB, CARG1             // Reload TValue *t from RB.
    //| addd 3, 0x0, LJ_TTAB, CARG2
    //| disp ctpr1, >1
    //|>
    //|<
    //| shld 0, ITYPE, 0x2f, ITYPE
    //| shld 1, CARG2, 0x2f, CARG2
    //|>
    //|<
    //| ord 0, RC, ITYPE, TMP1                // STR:RC = GCstr *
    //| addd 1, STACK, STACK_TMP, CARG3
    //|>
    //|<
    //| cmpedb 0, TMP0, BC_GSET, pred0
    //| shld 1, CARG1, 0x3, CARG1
    //| std 2, STACK, STACK_TMP, TMP1
    //| nop 2
    //|>
    //|<
    //| addd 0, BASE, CARG1, CARG2, ~pred0
    //| ord 1, CARG2, RB, RA, pred0           // RB = GCtab *
    //| addd 2, DISPATCH, DISPATCH_GL(tmptv), CARG2, pred0 // Store fn->l.env in g->tmptv
    //|>
    //|<
    //| std 2, CARG2, 0x0, RA, pred0
    //| ct ctpr1
    //|>
    //|
    //|->vmeta_tsetb:
    //|<
    //| ldb 0, PC, PC_RC, TMP0
    //| ldb 2, PC, PC_RB, RB                     // Reload TValue *t from RB.
    //| disp ctpr1, >1
    //| nop 2
    //|>
    //|<
    //| istofd 0, TMP0, TMP0
    //| shld 1, RB, 0x3, RB
    //| nop 1
    //|>
    //|<
    //| addd 0, STACK, STACK_TMP, CARG3
    //| addd 1, BASE, RB, CARG2
    //| std 2, STACK, STACK_TMP, TMP0
    //| ct ctpr1
    //|>
    //|
    //|->vmeta_tsetv:
    //|<
    //| ldb 0, PC, PC_RC, RC                  // Reload TValue *k from RC.
    //| ldb 2, PC, PC_RB, RB                  // Reload TValue *t from RB.
    //| nop 2
    //|>
    //|<
    //| shld 0, RC, 0x3, RC
    //| shld 1, RB, 0x3, RB
    //|>
    //|<
    //| addd 0, BASE, RC, CARG3
    //| addd 1, BASE, RB, CARG2
    //|>
    //|1:
    //| disp ctpr1, extern lj_meta_tset      // (lua_State *L, TValue *o, TValue *k)
    //|<
    //| ldd 0, STACK, SAVE_L, CARG1
    //| nop 2
    //|>
    //| std 2, STACK, SAVE_PC, PC
    //|<
    //| std 2, CARG1, L->base, BASE
    //| addd 0, CARG1, 0x0, RB
    //| call ctpr1, wbs = 0x8
    //|>
    //| // TValue * (finished) or NULL (metamethod) returned.
    //|<
    //| cmpedb 0, CRET1, 0x0, pred0
    //| disp ctpr1, >2
    //| nop 4
    //|>
    //|<
    //| ldd 3, RB, L->base, BASE
    //| ct ctpr1, pred0
    //|>
    //| // NOBARRIER: lj_meta_tset ensures the table is not black.
    //|<
    //| ldw 0, PC, 0x0, TMP0
    //| ldb 2, PC, 0x0, TMP1
    //|>
    //|<
    //| ldb 0, PC, PC_RA, CARG2
    //| nop 2
    //|>
    //|<
    //| shld 0, CARG2, 0x3, CARG2
    //| addd 1, PC, 0x4, PC
    //| shld 2, TMP1, 0x3, TMP1
    //| shrd 3, TMP0, 0xd, RD
    //| shrd 4, TMP0, 0x15, RB
    //| shrd 5, TMP0, 0x5, RA
    //|>
    //|<
    //| ldd 0, BASE, CARG2, CARG3
    //| ldd 2, TMP1, DISPATCH, TMP1
    //| nop 2
    //|>
    //|<
    //| movtd 0, TMP1, ctpr1
    //| andd 3, RD, 0x7fff8, RD
    //| andd 4, RA, 0x7f8, RA
    //|>
    //|<
    //| std 2, CRET1, 0x0, CARG3
    //| andd 3, RB, 0x7f8, RB
    //| andd 4, RD, 0x7f8, RC
    //| ct ctpr1
    //|>
    //|
    //|2: // Call __newindex metamethod
    dasm_put(Dst, 1034, Dt1(->base), Dt1(->base), Dt1(->top), FRAME_CONT, (2+1)*8, Dt7(->pc), LJ_TNIL, LJ_TTAB, LJ_TSTR, BC_GSET, DISPATCH_GL(tmptv), Dt1(->base), Dt1(->base));
#line 1218 "vm_e2k.dasc"
    //| // BASE = base, L->top = new base, stack = cont/func/t/k/(v)
    //| // Copy value to third argument.
    //|<
    //| ldd 0, RB, L->top, RA
    //| ldb 2, PC, PC_RA, RC
    //| nop 2
    //|>
    //|<
    //| std 2, RA, 0xffffffe8, PC             // [cont|PC]
    //| shld 3, RC, 0x3, RC
    //|>
    //|<
    //| addd 0, RA, FRAME_CONT, PC
    //| ldd 3, BASE, RC, RB
    //| nop 2
    //|>
    //|<
    //| subd 0, PC, BASE, PC
    //| std 2, RA, 0x10, RB
    //|>
    //|<
    //| ldd 3, RA, 0xfffffff0, RB             // Guaranteed to be a function here.
    //| addd 4, 0x0, (3+1)*8, RD              // 3 args for func (t, k, v)
    //| nop 3
    //|>
    //|<
    //| andd 3, RB, U64x(0x00007fff,0xffffffff), RB
    //| addd 4, RA, 0x0, BASE
    //|>
    //| // BASE = new base, RB = LFUNC, RD = (nargs+1)*8, PC = caller PC
    //|<
    //| ldd 0, RB, LFUNC->pc, PC
    //| addd 1, PC, 0x0, TMP1
    //| nop 2
    //|>
    //|<
    //| ldw 0, PC, 0x0, RA
    //| nop 2
    //|>
    //|<
    //| andd 0, RA, 0xff, TMP0
    //| addd 1, PC, 0x4, PC
    //| std 5, BASE, 0xfffffff8, TMP1
    //|>
    //| shld 0, TMP0, 0x3, TMP0               // jmp to [DISPATCH+OP*8]
    //|<
    //| ldd 0, TMP0, DISPATCH, TMP0
    //| shrd 3, RA, 0x5, RA
    //| nop 2
    //|>
    //|<
    //| movtd 0, TMP0, ctpr1
    //| andd 3, RA, 0x7f8, RA
    //|>
    //| ct ctpr1
    //|
    //|->vmeta_tsetr:
    //| disp ctpr1, extern lj_tab_setinth     // (lua_State *L, GCtab *t, int32_t key)
    //|<
    //| ldd 0, STACK, SAVE_L, CARG1
    //| addd 1, RB, 0x0, CARG2
    //| nop 1
    //|>
    //|<
    //| std 2, STACK, SAVE_PC, PC
    //| adds 0, RC, 0x0, CARG3
    //| nop 1
    //|>
    //|<
    //| std 2, CARG1, L->base, BASE
    //| call ctpr1, wbs = 0x8
    //|>
    //| // TValue * returned.
    //|<
    //| ldw 0, PC, 0x0, TMP0
    //| addd 1, PC, 0x4, PC
    //| ldb 2, PC, 0x0, TMP1
    //| ldb 3, PC, PC_RA, CARG2
    //| nop 3
    //|>
    //|<
    //| shld 1, CARG2, 0x3, CARG2
    //| shld 2, TMP1, 0x3, TMP1
    //| shrd 3, TMP0, 0xd, RD
    //| shrd 4, TMP0, 0x15, RB
    //| shrd 5, TMP0, 0x5, RA
    //|>
    //|<
    //| ldd 0, BASE, CARG2, ITYPE
    //| ldd 2, TMP1, DISPATCH, TMP1
    //| andd 3, RD, 0x7fff8, RD
    //| andd 4, RA, 0x7f8, RA
    //| nop 2
    //|>
    //|<
    //| movtd 0, TMP1, ctpr1
    //| std 2, CRET1, 0x0, ITYPE
    //| andd 3, RB, 0x7f8, RB
    //| andd 4, RD, 0x7f8, RC
    //|>
    //| ct ctpr1
    //|
    //|//-- Comparison metamethods ---------------------------------------------
    //|
    //|->vmeta_comp:
    //| disp ctpr1, extern lj_meta_comp       // (lua_State *L, TValue *o1, *o2, int op)
    //|<
    //| ldh 0, PC, PC_RD, RD
    //| addd 1, PC, 0x4, TMP0
    //| ldb 2, PC, PC_RA, RA
    //|>
    //|<
    //| ldd 0, STACK, SAVE_L, RB
    //| subd 1, TMP0, BCBIAS_J*4, TMP1
    //| ldb 2, PC, PC_OP, CARG4
    //|>
    //| ldh 0, TMP0, PC_RD, TMP0
    //|<
    //| shld 0, RD, 0x3, RD
    //| shld 1, RA, 0x3, RA
    //| addd 2, RB, 0x0, CARG1
    //|>
    //|<
    //| addd 0, BASE, RA, CARG2
    //| addd 1, BASE, RD, CARG3
    //| std 2, RB, L->base, BASE
    //|>
    //|<
    //| shld 0, TMP0, 0x2, TMP0
    //| std 2, STACK, SAVE_PC, PC
    //| call ctpr1, wbs = 0x8
    //|>
    //| // 0/1 or TValue * (metamethod) returned.
    //|<
    //| cmpbedb 0, CRET1, 0x1, pred0
    //| cmpbdb 1, CRET1, 0x1, pred1
    //| ldd 3, RB, L->base, BASE
    //| disp ctpr2, ->vmeta_binop
    //| nop 4
    //|>
    //|<
    //| addd 0, PC, 0x4, PC, pred0
    //| ct ctpr2, ~pred0
    //|>
    //| addd 0, TMP1, TMP0, PC, ~pred1
    //| ins_next
    //|
    //|->cont_condt:
    //| // BASE = base, CRET1 = result
    //|<
    //| ldd 0, CRET1, 0x0, ITYPE
    //| addd 1, PC, 0x4, PC
    //|>
    //|<
    //| ldh 0, PC, PC_RD, TMP0
    //| subd 1, PC, BCBIAS_J*4, TMP1
    //| nop 1
    //|>
    //| sard 0, ITYPE, 0x2f, ITYPE
    //|<
    //| cmpbsb 0, ITYPE, LJ_TISTRUECOND, pred0
    //| shld 1, TMP0, 0x2, TMP0
    //| nop 1
    //|>
    //| addd 0, TMP1, TMP0, PC, pred0         // Branch if result is true.
    //| ins_next
    //|
    //|->cont_condf:                          // BASE = base, CRET1 = result
    //|<
    //| ldd 0, CRET1, 0x0, ITYPE
    //| addd 1, PC, 0x4, PC
    //|>
    //|<
    //| ldh 0, PC, PC_RD, TMP0
    //| subd 1, PC, BCBIAS_J*4, TMP1
    //| nop 1
    //|>
    //| sard 0, ITYPE, 0x2f, ITYPE
    //|<
    //| cmpbsb 0, ITYPE, LJ_TISTRUECOND, pred0
    //| shld 1, TMP0, 0x2, TMP0
    //| nop 1
    //|>
    //| addd 0, TMP1, TMP0, PC, ~pred0        // Branch if result is false.
    //| ins_next
    //|
    //|->vmeta_equal:
    //| disp ctpr1, extern lj_meta_equal      // (lua_State *L, GCobj *o1, *o2, int ne)
    //|<
    //| ldd 0, STACK, SAVE_L, RB
    //| addd 1, RB, 0x0, CARG4
    //| andd 3, RD, U64x(0x00007fff,0xffffffff), RD
    //|>
    //|<
    //| ldh 0, PC, PC_RD, TMP0
    //| subd 2, PC, 0x4, PC
    //| subd 1, PC, BCBIAS_J*4, TMP1
    //| nop 1
    //|>
    //|<
    //| addd 0, RA, 0x0, CARG2
    //| addd 1, RB, 0x0, CARG1
    //| std 2, RB, L->base, BASE
    //|>
    //|<
    //| addd 0, RD, 0x0, CARG3
    //| shld 1, TMP0, 0x2, TMP0
    //| std 2, STACK, SAVE_PC, PC
    //| call ctpr1, wbs = 0x8
    //|>
    //| // 0/1 or TValue * (metamethod) returned.
    //|<
    //| cmpbedb 0, CRET1, 0x1, pred0
    //| cmpbdb 1, CRET1, 0x1, pred1
    //| addd 2, TMP1, 0x4, TMP1
    //| ldd 3, RB, L->base, BASE
    //| disp ctpr2, ->vmeta_binop
    //| nop 4
    //|>
    //|<
    //| addd 0, PC, 0x4, PC, pred0
    //| ct ctpr2, ~pred0
    //|>
    //| addd 0, TMP1, TMP0, PC, ~pred1
    //| ins_next
    //|
    //|->vmeta_equal_cd:
    dasm_put(Dst, 1347, Dt1(->top), FRAME_CONT, (3+1)*8, Dt7(->pc), Dt1(->base), BCBIAS_J*4, Dt1(->base), Dt1(->base), BCBIAS_J*4, LJ_TISTRUECOND, BCBIAS_J*4, LJ_TISTRUECOND, BCBIAS_J*4, Dt1(->base), Dt1(->base));
#line 1445 "vm_e2k.dasc"
    //|.if FFI
    //| disp ctpr1, extern lj_meta_equal_cd   // (lua_State *L, BCIns ins)
    //|<
    //| ldd 0, STACK, SAVE_L, RB
    //| subd 1, PC, 0x4, PC
    //|>
    //|<
    //| ldw 0, PC, 0xfffffffc, CARG2
    //| ldh 2, PC, PC_RD, TMP0
    //| nop 1
    //|>
    //|<
    //| subd 0, PC, BCBIAS_J*4, TMP1
    //| addd 1, RB, 0x0, CARG1
    //| std 2, RB, L->base, BASE
    //|>
    //|<
    //| addd 0, TMP1, 0x4, TMP1
    //| shld 1, TMP0, 0x2, TMP0
    //| std 2, STACK, SAVE_PC, PC
    //| call ctpr1, wbs = 0x8
    //|>
    //| // 0/1 or TValue * (metamethod) returned.
    //|<
    //| cmpbedb 0, CRET1, 0x1, pred0
    //| cmpbdb 1, CRET1, 0x1, pred1
    //| ldd 3, RB, L->base, BASE
    //| disp ctpr2, ->vmeta_binop
    //| nop 4
    //|>
    //|<
    //| addd 0, PC, 0x4, PC, pred0
    //| ct ctpr2, ~pred0
    //|>
    //| addd 0, TMP1, TMP0, PC, ~pred1
    //| ins_next
    //|.endif
    //|
    //|->vmeta_istype:
    //| disp ctpr1, extern lj_meta_istype     // (lua_State *L, BCReg ra, BCReg tp)
    //|<
    //| ldd 0, STACK, SAVE_L, RB
    //| nop 2
    //|>
    //|<
    //| std 2, RB, L->base, BASE
    //| shrd 0, RD, 0x3, CARG3
    //| shrd 1, RA, 0x3, CARG2
    //|>
    //|<
    //| addd 1, RB, 0x0, CARG1
    //| std 2, STACK, SAVE_PC, PC
    //| call ctpr1, wbs = 0x8
    //|>
    //| ldd 3, RB, L->base, BASE
    //| ins_next
    //|
    //|//-- Arithmetic metamethods ---------------------------------------------
    //|
    //|.macro vmeta_arith_base
    //| disp ctpr1, extern lj_meta_arith      // (lua_State *L, TValue *ra, *rb, *rc, BCReg op)
    //|<
    //| ldb 0, PC, PC_OP, CARG5
    //| addd 1, RA, 0x0, CARG2
    //| ldd 2, STACK, SAVE_L, CARG1
    //| nop 2
    //|>
    //|<
    //| addd 0, RC, 0x0, CARG4
    //| addd 1, RB, 0x0, CARG3
    //| std 2, CARG1, L->base, BASE
    //|>
    //|<
    //| addd 0, CARG1, 0x0, RB
    //| std 2, STACK, SAVE_PC, PC
    //| call ctpr1, wbs = 0x8
    //|>
    //| // NULL (finished) or TValue * (metamethod) returned.
    //|<
    //| ldd 3, RB, L->base, BASE
    //| cmpedb 4, CRET1, 0x0, pred0
    //| disp ctpr2, ->cont_nop
    //|>
    //|<
    //| disp ctpr1, ->vmeta_binop
    //| nop 3
    //|>
    //| ct ctpr2, pred0
    //| ct ctpr1
    //|.endmacro
    //|
    //|->vmeta_arith_vn:
    //|<
    //| addd 3, KBASE, RC, RC
    //| addd 4, BASE, RB, RB
    //| addd 5, BASE, RA, RA
    //|>
    //| vmeta_arith_base
    //|
    //|->vmeta_arith_nv:
    //|<
    //| addd 3, KBASE, RC, RB
    //| addd 4, BASE, RB, RC
    //| addd 5, BASE, RA, RA
    //|>
    //| vmeta_arith_base
    //|
    //|->vmeta_unm:
    //|<
    //| addd 3, BASE, RD, RC
    //| addd 4, BASE, RD, RB
    //| addd 5, BASE, RA, RA
    //|>
    //| vmeta_arith_base
    //|
    //|->vmeta_arith_vv:
    dasm_put(Dst, 1712, Dt1(->base), BCBIAS_J*4, Dt1(->base), Dt1(->base), Dt1(->base), Dt1(->base), Dt1(->base), Dt1(->base), Dt1(->base), Dt1(->base), Dt1(->base));
#line 1561 "vm_e2k.dasc"
    //|<
    //| addd 3, BASE, RC, RC
    //| addd 4, BASE, RB, RB
    //| addd 5, BASE, RA, RA
    //|>
    //| vmeta_arith_base
    //|
    //| // Call metamethod for binary op.
    //|->vmeta_binop:
    //| // BASE = old base, CRET1 = new base, stack = cont/func/o1/o2
    //|<
    //| addd 0, CRET1, 0x0, RA
    //| subd 1, CRET1, BASE, CRET1
    //|>
    //|<
    //| addd 1, CRET1, FRAME_CONT, PC
    //| std 2, RA, 0xffffffe8, PC             // [cont|PC]
    //| addd 3, 0x0, (2+1)*8, RD              // 2 args for func(o1, o2).
    //|>
    //| // BASE = old base, RA = new base, RD = (nargs+1)*8, PC = caller PC
    //|<
    //| ldd 0, RA, 0xfffffff0, RB
    //| disp ctpr1, ->vmeta_call
    //| nop 2
    //|>
    //|<
    //| sard 3, RB, 0x2f, ITYPE
    //| andd 4, RB, U64x(0x00007fff,0xffffffff), RB
    //|>
    //|<
    //| cmpesb 3, ITYPE, LJ_TFUNC, pred0
    //| nop 2
    //|>
    //|<
    //| addd 3, RA, 0x0, BASE, pred0
    //| ct ctpr1, ~pred0
    //|>
    //| ins_call
    //|
    //|->vmeta_len:
    //| disp ctpr1, extern lj_meta_len        // (lua_State *L, TValue *o)
    //|<
    //| ldh 0, PC, PC_RD, RD
    //| ldd 2, STACK, SAVE_L, RB
    //| nop 2
    //|>
    //|<
    //| shld 3, RD, 0x3, RD
    //| std 5, RB, L->base, BASE
    //|>
    //|<
    //| std 2, STACK, SAVE_PC, PC
    //| addd 3, BASE, RD, CARG2
    //| addd 4, RB, 0x0, CARG1
    //| call ctpr1, wbs = 0x8
    //|>
    //| // NULL (retry) or TValue * (metamethod) returned.
    //|<
    //| ldd 3, RB, L->base, BASE
    //| disp ctpr2, ->vmeta_binop             // Binop call for compatibility.
    //| nop 4
    //|>
    dasm_put(Dst, 1959, Dt1(->base), Dt1(->base), (2+1)*8, FRAME_CONT, LJ_TFUNC, Dt7(->pc), Dt1(->base), Dt1(->base));
#line 1623 "vm_e2k.dasc"
#if LJ_52
    //|<
    //| cmpedb 0, CRET1, 0x0, pred0
    //| ldd 3, BASE, RD, CARG1
    //| disp ctpr1, ->BC_LEN_Z
    //| nop 2
    //|>
    //| ct ctpr2, ~pred0
    //|<
    //| andd 0, CARG1, U64x(0x00007fff,0xffffffff), CARG1
    //| ct ctpr1
    //|>
    dasm_put(Dst, 2091);
#line 1635 "vm_e2k.dasc"
#else
    //| ct ctpr2
    dasm_put(Dst, 2105);
#line 1637 "vm_e2k.dasc"
#endif
    //|
    //|//-- Call metamethod ----------------------------------------------------
    //|
    //|->vmeta_call:                          // Resolve and call __call metamethod.
    //| // BASE = old base, RA = new base, RD = (nargs+1)*8
    //| disp ctpr1, extern lj_meta_call       // (lua_State *L, TValue *func, TValue *top)
    //|<
    //| ldd 0, STACK, SAVE_L, CARG1
    //| subd 1, RA, 0x10, CARG2
    //| addd 2, RA, RD, CARG3
    //| nop 2
    //|>
    //|<
    //| subd 1, CARG3, 0x8, CARG3
    //| std 2, CARG1, L->base, BASE
    //|>
    //|<
    //| std 2, STACK, SAVE_PC, PC
    //| call ctpr1, wbs = 0x8
    //|>
    //|<
    //| ldd 0, STACK, SAVE_L, TMP0
    //| ldd 2, RA, 0xfffffff0, RB
    //| disp ctpr2, ->BC_CALLT_Z
    //| nop 2
    //|>
    //|<
    //| ldd 3, TMP0, L->base, BASE
    //| addd 4, RD, 0x8, RD
    //| nop 2
    //|>
    //| // This is fragile. L->base must not move, KBASE must always be defined.
    //|<
    //| cmpedb 3, KBASE, BASE, pred0
    //| nop 2
    //|>
    //|<
    //| andd 3, RB, U64x(0x00007fff,0xffffffff), RB, ~pred0
    //| addd 4, RA, 0x0, BASE, ~pred0
    //| ct ctpr2, pred0                       // Continue with CALLT if flag set.
    //|>
    //| ins_call                              // Otherwise call resolved metamethod.
    //|
    //|//-- Argument coercion for 'for' statement ------------------------------
    //|
    //|->vmeta_for:
    //| disp ctpr1, extern lj_meta_for        // (lua_State *L, TValue *base)
    //|<
    //| ldd 0, STACK, SAVE_L, RB
    //| addd 1, RA, 0x0, CARG2
    //| ldwsm 2, PC, 0xfffffffc, TMP0
    //| nop 2
    //|>
    //|<
    //| andd 0, TMP0, 0xff, TMP1
    //| addd 1, RB, 0x0, CARG1
    //| std 2, RB, L->base, BASE
    //| shrd 3, TMP0, 0x5, RA
    //|>
    //|<
    //| shld 1, TMP1, 0x3, TMP1
    //| std 2, STACK, SAVE_PC, PC
    //| andd 3, RA, 0x7f8, RA
    //| call ctpr1, wbs = 0x8
    //|>
    //| addd 0, DISPATCH, TMP1, TMP1
    //|<
    //| ldd 0, TMP1, GG_DISP2STATIC, TMP1
    //| ldd 3, RB, L->base, BASE
    //| nop 2
    //|>
    //| movtd 0, TMP1, ctpr1
    //| ct ctpr1
    //|
    //|//-----------------------------------------------------------------------
    //|//-- Fast functions -----------------------------------------------------
    //|//-----------------------------------------------------------------------
    //|
    //|// Inlined GC threshold check.
    //|.macro ffgccheck
    //|<
    //| ldd 0, DISPATCH, DISPATCH_GL(gc.total), TMP1
    //| ldd 2, DISPATCH, DISPATCH_GL(gc.threshold), TMP0
    //| disp ctpr2, >1
    //|>
    //| ldd 0, STACK, SAVE_L, CARG1
    //| disp ctpr1, extern lj_gc_step         // (lua_State *L)
    //|<
    //| cmpbdb 0, TMP1, TMP0, pred0
    //| disp ctpr3, ->fff_fallback
    //| nop 2
    //|>
    //|<
    //| ct ctpr2, pred0
    //| std 2, STACK, SAVE_PC, PC, ~pred0
    //| addd 3, BASE, RD, RD, ~pred0
    //| addd 4, CARG1, 0x0, RB, ~pred0
    //|>
    //|<
    //| std 2, CARG1, L->base, BASE
    //| subd 3, RD, 0x8, RD
    //|>
    //|<
    //| std 2, CARG1, L->top, RD
    //| call ctpr1, wbs = 0x8
    //|>
    //|<
    //| ldd 3, RB, L->base, BASE
    //| ldd 5, RB, L->top, RD
    //| disp ctpr3, ->fff_fallback
    //| nop 2
    //|>
    //| subd 3, RD, BASE, RD
    //| addd 3, RD, 0x8, RD
    //|1:
    //|.endmacro
    //|
    //|//-- Base library: checks -----------------------------------------------
    //|
    //|->ff_assert:
    //|<
    //| ldd 3, BASE, 0x0, ITYPE
    //| disp ctpr1, ->fff_fallback
    //| nop 2
    //|>
    //|<
    //| addd 3, ITYPE, 0x0, RB
    //| sard 4, ITYPE, 0x2f, ITYPE
    //| disp ctpr2, ->fff_res
    //|>
    //|<
    //| cmpbdb 3, RD, (1+1)*8, pred0
    //| cmpbsb 4, ITYPE, LJ_TISTRUECOND, pred1
    //| nop 1
    //|>
    //|<
    //| pass pred0, p0
    //| pass pred1, p1
    //| landp ~p0, p1, p4
    //| pass p4, pred0
    //|>
    //|<
    //| ldd 0, BASE, 0xfffffff8, PC
    //| ct ctpr1, ~pred0
    //|>
    //|<
    //| stw 2, STACK, MULTRES, RD
    //| subd 4, RD, 0x10, RD
    //| std 5, BASE, 0xfffffff0, RB
    //|>
    //|<
    //| cmpedb 3, RD, 0x0, pred0
    //| disp ctpr1, >1
    //| nop 2
    //|>
    //|<
    //| addd 3, RD, 0x10, RD, pred0
    //| addd 4, BASE, 0x8, RA
    //| ct ctpr2, pred0
    //|>
    //|1:
    //|<
    //| ldd 3, RA, 0x0, RB
    //| subd 4, RD, 0x8, RD
    //|>
    //|<
    //| cmpedb 3, RD, 0x0, pred0
    //| nop 2
    //|>
    //|<
    //| addd 4, RA, 0x8, RA, ~pred0
    //| std 5, RA, 0xfffffff0, RB
    //| ct ctpr1, ~pred0
    //|>
    //|<
    //| ldw 0, STACK, MULTRES, RD
    //| ct ctpr2
    //| nop 2
    //|>
    //|
    //|->ff_type:
    //|<
    //| ldd 3, BASE, 0x0, RC
    //| adds 4, 0x0, LJ_TISNUM, RB
    //| disp ctpr1, ->fff_fallback
    //| nop 2
    //|>
    //|<
    //| sard 3, RC, 0x2f, RC
    //| cmpbdb 4, RD, (1+1)*8, pred0
    //|>
    //|<
    //| cmpbsb 4, RC, RB, pred1
    //| nop 1
    //|>
    //|<
    //| xors 3, RB, 0xffffffff, RC, pred1
    //| xors 4, RC, 0xffffffff, RC, ~pred1
    //| ct ctpr1, pred0
    //|>
    //|<
    //| ldd 0, BASE, 0xfffffff8, PC
    //| ldd 3, BASE, 0xfffffff0, RB
    //| shls 4, RC, 0x3, RC
    //| disp ctpr2, ->fff_res
    //| nop 2
    //|>
    //|<
    //| sxt 3, 0x6, RC, RC
    //| andd 4, RB, U64x(0x00007fff,0xffffffff), RB
    //| addd 5, 0x0, LJ_TSTR, ITYPE
    //|>
    //|<
    //| addd 3, RB, RC, TMP0
    //| shld 4, ITYPE, 0x2f, ITYPE
    //|>
    //|<
    //| ldd 3, TMP0, ((char *)(&((GCfuncC *)0)->upvalue)), RC
    //| nop 2
    //|>
    //| ord 3, RC, ITYPE, RC
    //|<
    //| addd 4, 0x0, (1+1)*8, RD
    //| std 5, BASE, 0xfffffff0, RC
    //| ct ctpr2
    //|>
    //|
    //|//-- Base library: getters and setters ---------------------------------
    //|
    //|->ff_getmetatable:
    dasm_put(Dst, 2108, Dt1(->base), Dt1(->base), Dt7(->pc), Dt1(->base), Dt1(->base), GG_DISP2STATIC, LJ_TISTRUECOND, (1+1)*8, LJ_TISNUM, (1+1)*8, LJ_TSTR, ((char *)(&((GCfuncC *)0)->upvalue)), (1+1)*8);
#line 1868 "vm_e2k.dasc"
    //|<
    //| ldd 3, BASE, 0x0, RB
    //| disp ctpr1, ->fff_fallback
    //|>
    //|<
    //| ldd 0, BASE, 0xfffffff8, PC
    //| cmpbdb 3, RD, (1+1)*8, pred0
    //| disp ctpr2, >1
    //| nop 1
    //|>
    //|<
    //| sard 3, RB, 0x2f, ITYPE
    //| andd 4, RB, U64x(0x00007fff,0xffffffff), RB
    //|>
    //|<
    //| cmpesb 3, ITYPE, LJ_TTAB, pred1
    //| cmpesb 4, ITYPE, LJ_TUDATA, pred2
    //| ct ctpr1, pred0
    //|>
    //| // Field metatable must be at same offset for GCtab and GCudata!
    //|<
    //| lddsm 3, RB, TAB->metatable, RB
    //| cmpbesb 4, ITYPE, LJ_TISNUM, pred3
    //| disp ctpr1, ->fff_res
    //| nop 1
    //|>
    //|<
    //| addd 3, 0x0, LJ_TISNUM, ITYPE, pred3
    //| addd 4, 0x0, LJ_TTAB, RC
    //| pass pred1, p0
    //| pass pred2, p1
    //| landp ~p0, ~p1, p4
    //| pass p4, pred0
    //|>
    //|<
    //| shld 3, RC, 0x2f, RC
    //| xord 4, ITYPE, U64x(0xffffffff,0xffffffff), ITYPE
    //| ct ctpr2, ~pred0
    //|>
    //| shld 0, ITYPE, 0x3, TMP0
    //| addd 0, TMP0, DISPATCH_GL(gcroot[GCROOT_BASEMT]), TMP0
    //|<
    //| ldd 0, DISPATCH, TMP0, RB
    //| nop 2
    //|>
    //|1:
    //|<
    //| lddsm 0, DISPATCH, DISPATCH_GL(gcroot)+8*(GCROOT_MMNAME+MM_metatable), TMP1
    //| cmpedb 3, RB, 0x0, pred0
    //| addd 4, 0x0, LJ_TNIL, TMP0
    //| ord 5, RC, RB, RC
    //|>
    //|<
    //| ldwsm 3, RB, TAB->hmask, RA
    //| lddsm 5, RB, TAB->node, CARG1
    //|>
    //|<
    //| addd 0, 0x0, LJ_TSTR, ITYPE
    //| std 5, BASE, 0xfffffff0, RC, ~pred0   // Store metatable as default result.
    //|>
    //|<
    //| shld 0, ITYPE, 0x2f, ITYPE
    //| addd 4, 0x0, (1+1)*8, RD
    //| std 5, BASE, 0xfffffff0, TMP0, pred0
    //| ct ctpr1, pred0
    //|>
    //|<
    //| ldw 0, TMP1, STR->sid, TMP0
    //| nop 2
    //|>
    //|<
    //| andd 0, RA, TMP0, RA
    //| ord 1, TMP1, ITYPE, TMP1
    //| disp ctpr2, >3
    //|>
    //|<
    //| smulx 0, RA, #NODE, RA
    //| nop 5
    //|>
    //| addd 0, RA, CARG1, RA
    //|2: // Rearranged logic, because we expect _not_ to find the key.
    //|<
    //| ldd 0, RA, NODE->key, TMP0
    //| disp ctpr3, <2
    //| nop 2
    //|>
    //|<
    //| cmpedb 0, TMP0, TMP1, pred0
    //| nop 2
    //|>
    //|<
    //| ldd 0, RA, NODE->next, RA, ~pred0
    //| ct ctpr2, pred0
    //| nop 2
    //|>
    //|<
    //| cmpedb 0, RA, 0x0, pred0
    //| nop 2
    //|>
    //| ct ctpr3, ~pred0
    //|<
    //| addd 3, 0x0, (1+1)*8, RD
    //| ct ctpr1                              // Not found, keep default result.
    //|>
    //|3:
    dasm_put(Dst, 2341, (1+1)*8, LJ_TUDATA, LJ_TTAB, LJ_TISNUM, Dt6(->metatable), LJ_TTAB, LJ_TISNUM, DISPATCH_GL(gcroot[GCROOT_BASEMT]), LJ_TNIL, DISPATCH_GL(gcroot)+8*(GCROOT_MMNAME+MM_metatable), Dt6(->node), Dt6(->hmask), LJ_TSTR, (1+1)*8, Dt5(->sid), sizeof(Node), DtB(->key), DtB(->next), (1+1)*8);
#line 1973 "vm_e2k.dasc"
    //|<
    //| ldd 0, RA, NODE->val, RB
    //| addd 3, 0x0, (1+1)*8, RD
    //| nop 2
    //|>
    //|<
    //| cmpedb 0, RB, LJ_TNIL, pred0
    //| nop 1
    //|>
    //|<
    //| std 5, BASE, 0xfffffff0, RB, ~pred0   // Return value of mt.__metatable.
    //| ct ctpr1
    //|>
    //|
    //|->ff_setmetatable:
    //|<
    //| ldd 3, BASE, 0x0, RB
    //| disp ctpr1, ->fff_fallback
    //|>
    //|<
    //| ldd 0, BASE, 0x8, RA
    //| nop 1
    //|>
    //|<
    //| addd 3, RB, 0x0, TMP1
    //| sard 4, RB, 0x2f, ITYPE
    //| andd 5, RB, U64x(0x00007fff,0xffffffff), RB
    //|>
    //|<
    //| cmpbdb 3, RD, (2+1)*8, pred0
    //| cmpesb 4, ITYPE, LJ_TTAB, pred1
    //| lddsm 5, RB, TAB->metatable, TMP0
    //|>
    //|<
    //| sard 3, RA, 0x2f, ITYPE
    //| andd 4, RA, U64x(0x00007fff,0xffffffff), RA
    //|>
    //|<
    //| cmpesb 0, ITYPE, LJ_TTAB, pred2
    //| pass pred0, p0
    //| pass pred1, p1
    //| landp ~p0, p1, p4
    //| pass p4, pred0
    //|>
    //|<
    //| cmpedbsm 3, TMP0, 0x0, pred1
    //| ct ctpr1, ~pred0
    //| nop 1
    //|>
    //|<
    //| pass pred1, p0
    //| pass pred2, p1
    //| landp p0, p1, p4
    //| pass p4, pred0
    //|>
    //|<
    //| ldd 0, BASE, 0xfffffff8, PC, pred0
    //| lddsm 2, DISPATCH, DISPATCH_GL(gc.grayagain), CARG1
    //| ldbsm 3, RB, TAB->marked, TMP0
    //| ct ctpr1, ~pred0
    //|>
    //| // Fast path: no mt for table yet and not clearing the mt.
    //|<
    //| std 2, RB, TAB->metatable, RA
    //| std 5, BASE, 0xfffffff0, TMP1            // Return original table.
    //| disp ctpr1, ->fff_res
    //| nop 1
    //|>
    //|<
    //| cmpandedb 3, TMP0, LJ_GC_BLACK, pred0    // isblack(table)
    //| andd 4, TMP0, ~LJ_GC_BLACK, TMP0         // black2gray(tab)
    //| nop 2
    //|>
    //|<
    //| addd 3, 0x0, (1+1)*8, RD, pred0
    //| stb 5, RB, TAB->marked, TMP0, ~pred0
    //| ct ctpr1, pred0
    //|>
    //| // Possible write barrier. Table is black, but skip iswhite(mt) check.
    //|<
    //| std 2, DISPATCH, DISPATCH_GL(gc.grayagain), RB
    //| std 5, RB, TAB->gclist, CARG1
    //| ct ctpr1
    //|>
    //|
    //|->ff_rawget:
    //|<
    //| ldd 2, STACK, SAVE_L, CARG1
    //| ldd 3, BASE, 0x0, CARG2
    //| disp ctpr2, ->fff_fallback
    //| nop 1
    //|>
    //| disp ctpr1, extern lj_tab_get         // (lua_State *L, GCtab *t, cTValue *key)
    //|<
    //| sard 3, CARG2, 0x2f, ITYPE
    //| andd 4, CARG2, U64x(0x00007fff,0xffffffff), CARG2
    //|>
    //|<
    //| cmpbdb 3, RD, (2+1)*8, pred0
    //| cmpesb 4, ITYPE, LJ_TTAB, pred1
    //| nop 1
    //|>
    //|<
    //| pass pred0, p0
    //| pass pred1, p1
    //| landp ~p0, p1, p4
    //| pass p4, pred0
    //|>
    //| ct ctpr2, ~pred0
    //|<
    //| addd 3, BASE, 0x8, CARG3
    //| call ctpr1, wbs = 0x8
    //|>
    //| // cTValue * returned.
    //|<
    //| ldd 0, CRET1, 0x0, RB
    //| ldd 2, BASE, 0xfffffff8, PC
    //| disp ctpr2, ->fff_res
    //| nop 4
    //|>
    //|<
    //| addd 4, 0x0, (1+1)*8, RD
    //| std 5, BASE, 0xfffffff0, RB
    //| ct ctpr2
    //|>
    //|
    //|//-- Base library: conversions ------------------------------------------
    //|
    //|->ff_tonumber:
    dasm_put(Dst, 2485, (1+1)*8, DtB(->val), LJ_TNIL, Dt6(->metatable), LJ_TTAB, (2+1)*8, LJ_TTAB, Dt6(->marked), DISPATCH_GL(gc.grayagain), Dt6(->metatable), ~LJ_GC_BLACK, LJ_GC_BLACK, Dt6(->marked), (1+1)*8, Dt6(->gclist), DISPATCH_GL(gc.grayagain), LJ_TTAB, (2+1)*8, (1+1)*8);
#line 2102 "vm_e2k.dasc"
    //| // Only handles the number case inline (without a base argument).
    //|<
    //| ldd 3, BASE, 0x0, RB
    //| disp ctpr1, ->fff_fallback
    //| nop 2
    //|>
    //|<
    //| sard 3, RB, 0x2f, ITYPE
    //| disp ctpr2, ->fff_res
    //|>
    //|<
    //| cmpedb 3, RD, (1+1)*8, pred0          // Exactly one argument.
    //| cmpbesb 4, ITYPE, LJ_TISNUM, pred1
    //| nop 1
    //|>
    //|<
    //| pass pred0, p0
    //| pass pred1, p1
    //| landp p0, p1, p4
    //| pass p4, pred0
    //|>
    //|<
    //| ldd 0, BASE, 0xfffffff8, PC, pred0
    //| ct ctpr1, ~pred0
    //|>
    //|<
    //| addd 4, 0x0, (1+1)*8, RD
    //| std 5, BASE, 0xfffffff0, RB
    //| ct ctpr2
    //|>
    //|
    //|->ff_tostring:
    //|<
    //| ldd 0, BASE, 0xfffffff8, PC
    //| ldd 2, DISPATCH, DISPATCH_GL(gcroot[GCROOT_BASEMT_NUM]), TMP0
    //| ldd 3, BASE, 0x0, RB
    //| disp ctpr1, ->fff_fallback
    //| nop 2
    //|>
    //|<
    //| cmpedb 3, TMP0, 0x0, pred3
    //| cmpbdb 4, RD, (1+1)*8, pred0
    //| sard 5, RB, 0x2f, ITYPE
    //| disp ctpr2, ->fff_res
    //|>
    //|<
    //| cmpesb 3, ITYPE, LJ_TSTR, pred1
    //| cmpbesb 4, ITYPE, LJ_TISNUM, pred2
    //| nop 1
    //|>
    //|<
    //| pass pred0, p0
    //| pass pred1, p1
    //| pass pred2, p2
    //| pass pred3, p3
    //| landp ~p0, p2, p4
    //| landp p4, p3, p5
    //| landp ~p1, p2, p6
    //| pass p5, pred0
    //| pass p6, pred2
    //|>
    //| ct ctpr1, ~pred0
    //| // Only handles the string or number case inline.
    //| // A __tostring method in the string base metatable is ignored.
    //|<
    //| addd 4, 0x0, (1+1)*8, RD, ~pred2
    //| std 5, BASE, 0xfffffff0, RB, pred1
    //| ct ctpr2, pred1
    //|>
    //| // Handle numbers inline, unless a number base metatable is present.
    //| ffgccheck
    dasm_put(Dst, 2643, LJ_TISNUM, (1+1)*8, (1+1)*8, DISPATCH_GL(gcroot[GCROOT_BASEMT_NUM]), (1+1)*8, LJ_TISNUM, LJ_TSTR, (1+1)*8, DISPATCH_GL(gc.threshold), DISPATCH_GL(gc.total), Dt1(->base), Dt1(->top), Dt1(->top), Dt1(->base));
#line 2173 "vm_e2k.dasc"
    //| disp ctpr1, extern lj_strfmt_num      // (lua_State *L, lua_Number *np)
    //|<
    //| ldd 3, STACK, SAVE_L, RB
    //| nop 3
    //|>
    //|<
    //| addd 1, BASE, 0x0, CARG2
    //| std 2, STACK, SAVE_PC, PC             // Redundant (but a defined value).
    //| addd 3, RB, 0x0, CARG1
    //| std 5, RB, L->base, BASE              // Add frame since C call can throw.
    //| call ctpr1, wbs = 0x8
    //|>
    //| // GCstr returned.
    //|<
    //| addd 2, 0x0, LJ_TSTR, TMP1
    //| ldd 3, RB, L->base, BASE
    //| disp ctpr2, ->fff_res
    //|>
    //| shld 0, TMP1, 0x2f, TMP1
    //| ord 0, TMP1, CRET1, TMP1
    //| std 2, BASE, 0xfffffff0, TMP1
    //| addd 3, 0x0, (1+1)*8, RD
    //| ct ctpr2
    //|
    //|//-- Base library: iterators -------------------------------------------
    //|
    //|->ff_next:
    //|<
    //| lddsm 2, STACK, SAVE_L, RB
    //| lddsm 3, BASE, 0x0, CARG2
    //| disp ctpr2, ->fff_fallback
    //|>
    //|<
    //| cmpbdb 3, RD, (1+1)*8, pred0
    //| cmpedb 4, RD, (1+1)*8, pred1          // Missing 2nd arg?
    //| nop 1
    //|>
    //|<
    //| sardsm 3, CARG2, 0x2f, ITYPE
    //| anddsm 4, CARG2, U64x(0x00007fff,0xffffffff), CARG2
    //|>
    //|<
    //| addd 0, 0x0, LJ_TNIL, TMP0
    //| cmpesbsm 3, ITYPE, LJ_TTAB, pred2
    //|>
    //| disp ctpr1, extern lj_tab_next        // (lua_State *L, GCtab *t, TValue *key)
    //|<
    //| std 5, BASE, 0x8, TMP0, pred1         // Set missing 2nd arg to nil
    //| pass pred0, p0
    //| pass pred2, p1
    //| landp ~p0, p1, p4
    //| pass p4, pred0
    //|>
    //|<
    //| ldd 0, BASE, 0xfffffff8, PC, pred0
    //| ct ctpr2, ~pred0
    //|>
    //|<
    //| std 2, RB, L->base, BASE
    //| std 5, RB, L->top, BASE
    //| nop 1
    //|>
    //|<
    //| addd 0, BASE, 0x8, CARG3
    //| addd 1, RB, 0x0, CARG1
    //| std 2, STACK, SAVE_PC, PC
    //| call ctpr1, wbs = 0x8
    //|>
    //| // Flag returned.
    //|<
    //| cmpedb 0, CRET1, 0x0, pred0
    //| ldd 3, RB, L->base, BASE
    //| lddsm 5, BASE, 0x8, TMP1
    //| disp ctpr2, ->fff_res
    //|>
    //|<
    //| lddsm 0, BASE, 0x10, CARG2
    //| addd 1, 0x0, LJ_TNIL, TMP0
    //| nop 3
    //|>
    //|<
    //| addd 4, 0x0, (1+1)*8, RD, pred0
    //| std 5, BASE, 0xfffffff0, TMP0, pred0  // End of traversal: return nil.
    //| ct ctpr2, pred0
    //|>
    //| // Copy key and value to results.
    //|<
    //| std 2, BASE, 0xfffffff0, TMP1
    //| addd 4, 0x0, (1+2)*8, RD
    //| std 5, BASE, 0xfffffff8, CARG2
    //| ct ctpr2
    //|>
    //|
    //|->ff_pairs:
    //|<
    //| ldd 3, BASE, 0x0, RB
    //| lddsm 5, BASE, 0xfffffff0, CARG1
    //| disp ctpr1, ->fff_fallback
    //| nop 2
    //|>
    //|<
    //| addd 3, RB, 0x0, TMP1
    //| sard 4, RB, 0x2f, ITYPE
    //| andd 5, RB, U64x(0x00007fff,0xffffffff), RB
    //|>
    //|<
    //| cmpbdb 3, RD, (1+1)*8, pred0
    //| cmpesb 4, ITYPE, LJ_TTAB, pred1
    //| lddsm 5, RB, TAB->metatable, TMP0
    //|>
    //|<
    //| addd 3, 0x0, LJ_TFUNC, ITYPE
    //| anddsm 4, CARG1, U64x(0x00007fff,0xffffffff), CARG1
    //| disp ctpr2, ->fff_res
    //|>
    //|<
    //| lddsm 3, CARG1, CFUNC->upvalue[0], CARG2
    //| shld 4, ITYPE, 0x2f, ITYPE
    //| pass pred0, p0
    //| pass pred1, p1
    //| landp ~p0, p1, p4
    //| pass p4, pred0
    //|>
    //| ct ctpr1, ~pred0
    dasm_put(Dst, 2776, Dt1(->base), Dt1(->base), LJ_TSTR, (1+1)*8, (1+1)*8, (1+1)*8, LJ_TTAB, LJ_TNIL, Dt1(->top), Dt1(->base), Dt1(->base), LJ_TNIL, (1+1)*8, (1+2)*8, Dt6(->metatable), LJ_TTAB, (1+1)*8, LJ_TFUNC, Dt8(->upvalue[0]));
#line 2297 "vm_e2k.dasc"
#if LJ_52
    //|<
    //| cmpedb 3, TMP0, 0x0, pred0
    //| nop 2
    //|>
    //| ct ctpr1, ~pred0
    dasm_put(Dst, 2960);
#line 2303 "vm_e2k.dasc"
#endif
    //|<
    //| ldd 0, BASE, 0xfffffff8, PC
    //| addd 1, 0x0, LJ_TNIL, TMP0
    //| ord 3, CARG2, ITYPE, CARG2
    //|>
    //|<
    //| std 2, BASE, 0xfffffff0, CARG2
    //| std 5, BASE, 0xfffffff8, TMP1
    //|>
    //|<
    //| addd 4, 0x0, (1+3)*8, RD
    //| std 5, BASE, 0x0, TMP0
    //| ct ctpr2
    //|>
    //|
    //|->ff_ipairs_aux:
    //|<
    //| lddsm 3, BASE, 0x0, RB
    //| cmpbdb 4, RD, (2+1)*8, pred0
    //| ldd 5, BASE, 0x8, TMP0
    //| disp ctpr1, ->fff_fallback
    //| nop 2
    //|>
    //|<
    //| sard 3, TMP0, 0x2f, TMP1
    //| faddd 4, TMP0, U64x(0x3ff00000,0x00000000), TMP0   // +1.0e0
    //| disp ctpr2, >1
    //|>
    //|<
    //| sard 3, RB, 0x2f, ITYPE
    //| andd 4, RB, U64x(0x00007fff,0xffffffff), RB
    //| ct ctpr1, pred0
    //|>
    //|<
    //| cmpesb 3, ITYPE, LJ_TTAB, pred0
    //| cmpbsb 4, TMP1, LJ_TISNUM, pred1
    //| ldw 5, RB, TAB->asize, CARG3
    //| disp ctpr3, ->fff_res
    //| nop 1
    //|>
    //|<
    //| ldwsm 3, RB, TAB->hmask, CARG4
    //| pass pred0, p0
    //| pass pred1, p1
    //| landp p0, p1, p4
    //| pass p4, pred0
    //|>
    //|<
    //| ldd 3, BASE, 0xfffffff8, PC, pred0
    //| ct ctpr1, ~pred0
    //|>
    //|<
    //| lddsm 3, RB, TAB->array, RD
    //| fdtoistr 4, TMP0, CARG2
    //| std 5, BASE, 0xfffffff0, TMP0
    //|>
    //|<
    //| cmpbsb 3, CARG2, CARG3, pred0
    //| sxt 4, 0x2, CARG2, CARG2
    //| nop 1
    //|>
    //| shld 3, CARG2, 0x3, RA
    //|<
    //| addd 3, RD, RA, RD, pred0
    //| ct ctpr2, ~pred0                      // Not in array part?
    //|>
    //|<
    //| ldw 3, RD, 0x0, TMP0
    //| lddsm 5, RD, 0x0, RB
    //| nop 2
    //|>
    //|<
    //| cmpesb 3, TMP0, LJ_TNIL, pred0
    //| nop 1
    //|>
    //|<
    //| addd 3, 0x0, (0+1)*8, RD, pred0
    //| ct ctpr3, pred0
    //|>
    //| // Copy array slot.
    //|<
    //| addd 3, 0x0, (1+2)*8, RD
    //| std 5, BASE, 0xfffffff8, RB
    //| ct ctpr3
    //|>
    //|1: // Check for empty hash part first. Otherwise call C function.
    //| disp ctpr1, extern lj_tab_getinth     // (GCtab *t, int32_t key)
    //|<
    //| cmpedb 3, CARG4, 0x0, pred0
    //| addd 4, RB, 0x0, CARG1
    //| nop 2
    //|>
    //|<
    //| addd 3, 0x0, (0+1)*8, RD, pred0
    //| ct ctpr3, pred0
    //|>
    //| call ctpr1, wbs = 0x8
    //| // cTValue * or NULL returned.
    //|<
    //| lddsm 0, CRET1, 0x0, RB
    //| cmpedb 1, CRET1, 0x0, pred0
    //| ldwsm 2, CRET1, 0x0, TMP0
    //| disp ctpr3, ->fff_res
    //| nop 2
    //|>
    //|<
    //| cmpesbsm 1, TMP0, LJ_TNIL, pred1
    //| nop 1
    //|>
    //|<
    //| pass pred0, p0
    //| pass pred1, p1
    //| landp ~p0, ~p1, p4
    //| pass p4, pred0
    //|>
    //|<
    //| addd 3, 0x0, (0+1)*8, RD, ~pred0
    //| ct ctpr3, ~pred0
    //|>
    //| // Copy array slot.
    //|<
    //| addd 3, 0x0, (1+2)*8, RD
    //| std 5, BASE, 0xfffffff8, RB
    //| ct ctpr3
    //|>
    //|
    //|->ff_ipairs:
    //|<
    //| ldd 3, BASE, 0x0, RB
    //| addd 4, 0x0, U64x(0x00007fff,0xffffffff), CARG2
    //| lddsm 5, BASE, 0xfffffff0, CARG1
    //| disp ctpr1, ->fff_fallback
    //| nop 2
    //|>
    //|<
    //| andd 2, CARG1, CARG2, CARG1
    //| addd 3, RB, 0x0, TMP1
    //| sard 4, RB, 0x2f, ITYPE
    //| andd 5, RB, CARG2, RB
    //|>
    //|<
    //| cmpbdb 3, RD, (1+1)*8, pred0
    //| cmpesb 4, ITYPE, LJ_TTAB, pred1
    //| lddsm 5, RB, TAB->metatable, TMP0
    //|>
    //|<
    //| lddsm 0, CARG1, CFUNC->upvalue[0], CARG2
    //| addd 1, 0x0, LJ_TFUNC, ITYPE
    //|>
    //|<
    //| shld 0, ITYPE, 0x2f, ITYPE
    //| pass pred0, p0
    //| pass pred1, p1
    //| landp ~p0, p1, p4
    //| pass p4, pred0
    //|>
    //| ct ctpr1, ~pred0
    dasm_put(Dst, 2965, LJ_TNIL, (1+3)*8, (2+1)*8, Dt6(->asize), LJ_TISNUM, LJ_TTAB, Dt6(->hmask), Dt6(->array), LJ_TNIL, (0+1)*8, (1+2)*8, (0+1)*8, LJ_TNIL, (0+1)*8, (1+2)*8, Dt6(->metatable), LJ_TTAB, (1+1)*8, LJ_TFUNC, Dt8(->upvalue[0]));
#line 2461 "vm_e2k.dasc"
#if LJ_52
    //|<
    //| cmpedb 3, TMP0, 0x0, pred0
    //| nop 2
    //|>
    //| ct ctpr1, ~pred0
    dasm_put(Dst, 3163);
#line 2467 "vm_e2k.dasc"
#endif
    //|<
    //| ldd 0, BASE, 0xfffffff8, PC
    //| ord 1, CARG2, ITYPE, CARG2
    //| disp ctpr1, ->fff_res
    //|>
    //|<
    //| addd 1, 0x0, 0x0, TMP0
    //| std 2, BASE, 0xfffffff8, TMP1
    //| std 5, BASE, 0xfffffff0, CARG2
    //|>
    //|<
    //| addd 4, 0x0, (1+3)*8, RD
    //| std 5, BASE, 0x0, TMP0
    //| ct ctpr1
    //|>
    //|
    //|//-- Base library: catch errors ----------------------------------------
    //|
    //|->ff_pcall:
    //|<
    //| ldbsm 2, DISPATCH, DISPATCH_GL(hookmask), RB
    //| cmpbdb 3, RD, (1+1)*8, pred0
    //| disp ctpr1, ->fff_fallback
    //| nop 2
    //|>
    //|<
    //| shrdsm 0, RB, HOOK_ACTIVE_SHIFT, RB
    //| addd 3, BASE, 0x10, RA
    //| disp ctpr2, >1
    //|>
    //| anddsm 0, RB, 0x1, RB
    //|<
    //| addd 0, 0x0, 16+FRAME_PCALL, PC, ~pred0
    //| subd 3, RD, 0x8, RD, ~pred0
    //| ct ctpr1, pred0
    //|>
    //|<
    //| addd 0, PC, RB, PC                    // Remember active hook before pcall.
    //| subd 3, RD, 0x8, KBASE
    //| addd 4, RA, RD, TMP0
    //|>
    //| // Note: this does a (harmless) copy of the function to the PC slot, too.
    //|1:
    //|<
    //| ldd 3, TMP0, 0xffffffe8, RB
    //| cmpbedb 4, KBASE, 0x0, pred0
    //| nop 2
    //|>
    //|<
    //| addd 3, RA, KBASE, TMP0, ~pred0
    //| subd 4, KBASE, 0x8, KBASE, ~pred0
    //| std 5, TMP0, 0xfffffff0, RB
    //| ct ctpr2, ~pred0
    //|>
    //| // BASE = old base, RA = new base, RD = (nargs+1)*8, PC = caller PC
    //|<
    //| ldd 3, RA, 0xfffffff0, RB
    //| disp ctpr1, ->vmeta_call
    //| nop 2
    //|>
    //|<
    //| sard 3, RB, 0x2f, ITYPE
    //| andd 4, RB, U64x(0x00007fff,0xffffffff), RB
    //|>
    //|<
    //| lddsm 3, RB, LFUNC->pc, CARG1
    //| cmpesb 4, ITYPE, LJ_TFUNC, pred0
    //| nop 2
    //|>
    //|<
    //| ldwsm 3, CARG1, 0x0, TMP0
    //| addd 4, RA, 0x0, BASE, pred0
    //| ldbsm 5, CARG1, 0x0, TMP1
    //| ct ctpr1, ~pred0
    //|>
    //|<
    //| std 5, BASE, 0xfffffff8, PC
    //| nop 1
    //|>
    //|<
    //| shld 0, TMP1, 0x3, TMP1               // jmp to [DISPATCH+OP*8]
    //| addd 1, CARG1, 0x4, PC
    //| shrd 3, TMP0, 0x5, RA
    //|>
    //|<
    //| ldd 0, TMP1, DISPATCH, TMP1
    //| andd 3, RA, 0x7f8, RA
    //| nop 2
    //|>
    //| movtd 0, TMP1, ctpr1
    //| ct ctpr1
    //|
    //|->ff_xpcall:
    //|<
    //| ldd 3, BASE, 0x8, RA
    //| ldd 5, BASE, 0x0, RB
    //| disp ctpr1, ->fff_fallback
    //| nop 2
    //|>
    //| sard 3, RA, 0x2f, ITYPE
    //|<
    //| cmpbdb 3, RD, (2+1)*8, pred0
    //| cmpesb 4, ITYPE, LJ_TFUNC, pred1
    //| nop 1
    //|>
    //|<
    //| pass pred0, p0
    //| pass pred1, p1
    //| landp ~p0, p1, p4
    //| pass p4, pred0
    //|>
    //|<
    //| addd 1, 0x0, 0x18+FRAME_PCALL, PC, pred0
    //| std 2, BASE, 0x0, RA, pred0           // Swap function and traceback.
    //| std 5, BASE, 0x8, RB, pred0
    //| ct ctpr1, ~pred0
    //|>
    //|<
    //| ldb 0, DISPATCH, DISPATCH_GL(hookmask), RB
    //| disp ctpr2, >1
    //| nop 1
    //|>
    //|<
    //| addd 3, BASE, 0x18, RA
    //| subd 4, RD, 0x10, RD
    //|>
    //|<
    //| shrd 0, RB, HOOK_ACTIVE_SHIFT, RB
    //| addd 3, RD, 0x0, KBASE
    //|>
    //|<
    //| andd 0, RB, 0x1, RB
    //| addd 3, RA, KBASE, TMP0
    //|>
    //|<
    //| addd 0, PC, RB, PC                    // Remember active hook before pcall.
    //| subd 3, KBASE, 0x8, KBASE
    //|>
    //| // Note: this does a (harmless) copy of the function to the PC slot, too.
    //|1:
    //|<
    //| ldd 3, TMP0, 0xffffffe8, RB
    //| cmpbedb 4, KBASE, 0x0, pred0
    //| nop 2
    //|>
    //|<
    //| addd 3, RA, KBASE, TMP0, ~pred0
    //| subd 4, KBASE, 0x8, KBASE, ~pred0
    //| std 5, TMP0, 0xfffffff0, RB
    //| ct ctpr2, ~pred0
    //|>
    //| // BASE = old base, RA = new base, RD = (nargs+1)*8, PC = caller PC
    //|<
    //| ldd 3, RA, 0xfffffff0, RB
    //| disp ctpr1, ->vmeta_call
    //| nop 2
    //|>
    //|<
    //| sard 3, RB, 0x2f, ITYPE
    //| andd 4, RB, U64x(0x00007fff,0xffffffff), RB
    //|>
    //|<
    //| lddsm 3, RB, LFUNC->pc, CARG1
    //| cmpesb 4, ITYPE, LJ_TFUNC, pred0
    //| nop 2
    //|>
    //|<
    //| ldwsm 3, CARG1, 0x0, TMP0
    //| addd 4, RA, 0x0, BASE, pred0
    //| ldbsm 5, CARG1, 0x0, TMP1
    //| ct ctpr1, ~pred0
    //|>
    //|<
    //| std 5, BASE, 0xfffffff8, PC
    //| nop 1
    //|>
    //|<
    //| shld 0, TMP1, 0x3, TMP1               // jmp to [DISPATCH+OP*8]
    //| addd 1, CARG1, 0x4, PC
    //| shrd 3, TMP0, 0x5, RA
    //|>
    //|<
    //| ldd 0, TMP1, DISPATCH, TMP1
    //| andd 3, RA, 0x7f8, RA
    //| nop 2
    //|>
    //| movtd 0, TMP1, ctpr1
    //| ct ctpr1
    //|
    //|//-- Coroutine library --------------------------------------------------
    //|
    //|.macro coroutine_resume_wrap, resume
    //|.if resume
    //|->ff_coroutine_resume:
    //|<
    //| ldd 3, BASE, 0xfffffff8, PC
    //| ldd 5, BASE, 0x0, RB
    //| disp ctpr1, ->fff_fallback
    //| nop 2
    //|>
    //|<
    //| sard 3, RB, 0x2f, ITYPE
    //| andd 4, RB, U64x(0x00007fff,0xffffffff), RB
    //|>
    //|<
    //| cmpbdb 3, RD, (1+1)*8, pred0
    //| cmpesb 4, ITYPE, LJ_TTHREAD, pred1
    //| nop 1
    //|>
    //|<
    //| pass pred0, p0
    //| pass pred1, p1
    //| landp ~p0, p1, p4
    //| pass p4, pred0
    //|>
    //|<
    //| std 2, STACK, SAVE_PC, PC, pred0
    //| ct ctpr1, ~pred0
    //|>
    //|.else
    //|->ff_coroutine_wrap_aux:
    //|<
    //| ldd 3, BASE, 0xfffffff0, RB
    //| ldd 5, BASE, 0xfffffff8, PC
    //| nop 2
    //|>
    //| andd 3, RB, U64x(0x00007fff,0xffffffff), RB
    //|<
    //| ldd 3, RB, CFUNC->upvalue[0].gcr, RB
    //| nop 2
    //|>
    //|<
    //| std 2, STACK, SAVE_PC, PC
    //| andd 3, RB, U64x(0x00007fff,0xffffffff), RB
    //|>
    //|.endif
    //|<
    //| ldd 3, RB, L->cframe, TMP0
    //| addd 4, RB, 0x0, TMP1
    //| ldbsm 5, RB, L->status, CARG1
    //|>
    //|<
    //| lddsm 3, RB, L->top, RA
    //| disp ctpr1, ->fff_fallback
    //| nop 1
    //|>
    //|<
    //| cmpedb 3, TMP0, 0x0, pred0
    //| cmpbedbsm 4, CARG1, LUA_YIELD, pred1
    //| lddsm 5, RB, L->base, TMP0
    //|>
    //| cmpedb 3, CARG1, LUA_YIELD, pred2
    //|<
    //| pass pred0, p0
    //| pass pred1, p1
    //| landp p0, p1, p4
    //| pass p4, pred0
    //|>
    //|<
    //| cmpbedb 3, RA, TMP0, pred1            // Check for presence of initial func.
    //| ct ctpr1, ~pred0
    //| nop 1
    //|>
    //|<
    //| lddsm 0, RB, L->maxstack, TMP0
    //| pass pred1, p0
    //| pass pred2, p1
    //| landp p0, ~p1, p4
    //| landp ~p0, ~p1, p5
    //| pass p4, pred0
    //| pass p5, pred1                        // Status != LUA_YIELD (i.e. 0)?
    //|>
    //|<
    //| ldd 3, RA, 0xfffffff8, PC, pred1      // Move initial function up.
    //| ct ctpr1, pred0
    //| nop 2
    //|>
    //|<
    //| addd 4, RA, 0x8, RA, pred1
    //| std 5, RA, 0x0, PC, pred1
    //|>
    //|.if resume
    //| addd 3, RA, RD, PC                       // Check stack space (-1-thread).
    //| subd 0, PC, 0x10, PC
    //|.else
    //| addd 3, RA, RD, PC                       // Check stack space (-1).
    //| subd 0, PC, 0x8, PC
    //|.endif
    //|<
    //| cmpbedb 0, PC, TMP0, pred0
    //| ldd 2, STACK, SAVE_L, CARG1
    //| disp ctpr2, >2
    //| nop 2
    //|>
    //|<
    //| std 2, CARG1, L->base, BASE, pred0
    //| std 5, RB, L->top, PC, pred0
    //| ct ctpr1, ~pred0
    //|>
    //|.if resume
    //| addd 3, BASE, 0x8, BASE                  // Keep resumed thread in stack for GC.
    //|.endif
    //|<
    //| std 2, CARG1, L->top, BASE
    //| disp ctpr3, >1
    //|>
    //|.if resume
    //| addd 3, BASE, RD, RB                     // RB = end of source for stack move.
    //| subd 3, RB, 0x18, RB
    //|.else
    //| addd 3, BASE, RD, RB                     // RB = end of source for stack move.
    //| subd 3, RB, 0x10, RB
    //|.endif
    //|<
    //| cmpedb 0, PC, RA, pred0
    //| subd 3, RB, PC, RB                       // Relative to PC.
    //| disp ctpr1, ->vm_resume               // (lua_State *L, TValue *base, 0, 0)
    //| nop 2
    //|>
    //| ct ctpr2, pred0
    //|1: // Move args to coroutine.
    //|<
    //| ldd 0, PC, RB, RC
    //| nop 2
    //|>
    //|<
    //| subd 1, PC, 0x8, PC
    //| std 2, PC, 0xfffffff8, RC
    //|>
    //|<
    //| cmpedb 0, PC, RA, pred0
    //| nop 2
    //|>
    //| ct ctpr3, ~pred0
    //|2:
    //|<
    //| addd 0, RA, 0x0, CARG2
    //| addd 1, TMP1, 0x0, CARG1
    //| call ctpr1, wbs = 0x8
    //|>
    //|<
    //| ldd 0, STACK, SAVE_L, RB
    //| addd 1, TMP1, 0x0, PC
    //| addd 2, 0x0, ~LJ_VMST_INTERP, TMP0
    //| disp ctpr2, >7
    //| nop 2
    //|>
    //|<
    //| ldd 3, RB, L->base, BASE
    //| nop 2
    //|>
    //|<
    //| cmpbedb 0, CRET1, LUA_YIELD, pred0
    //| stw 2, DISPATCH, DISPATCH_GL(vmstate), TMP0
    //| std 5, DISPATCH, DISPATCH_GL(cur_L), RB
    //| nop 2
    //|>
    //| ct ctpr2, ~pred0
    //|3:
    //|<
    //| ldd 0, PC, L->base, RA
    //| ldd 2, PC, L->top, KBASE
    //| lddsm 3, RB, L->maxstack, TMP0
    //| disp ctpr1, >5
    //| nop 2
    //|>
    //|<
    //| std 2, PC, L->top, RA                 // Clear coroutine stack.
    //| subd 3, KBASE, RA, PC
    //| disp ctpr2, >8
    //|>
    //|<
    //| cmpedb 3, PC, 0x0, pred0
    //| disp ctpr3, >4
    //| nop 2
    //|>
    //|<
    //| addd 3, BASE, PC, RD, ~pred0
    //| ct ctpr1, pred0                       // No results?
    //|>
    //|<
    //| cmpbedb 3, RD, TMP0, pred0
    //| addd 4, BASE, 0x0, CARG1
    //| nop 2
    //|>
    //|<
    //| subd 3, CARG1, RA, RB, pred0
    //| ct ctpr2, ~pred0                      // Need to grow stack?
    //|>
    //|4: // Move results from coroutine.
    //|<
    //| ldd 3, RA, 0x0, RD
    //| nop 2
    //|>
    //|<
    //| addd 4, RA, 0x8, RA
    //| std 5, RA, RB, RD
    //|>
    //|<
    //| cmpedb 3, RA, KBASE, pred0
    //| nop 2
    //|>
    //| ct ctpr3, ~pred0
    //|5:
    //|.if resume
    //|<
    //| addd 3, PC, (1+1)*8, RD               // (nresults+1)*8 = (1 + true)*8 + results*8.
    //| addd 4, 0x0, U64x(0xfffeffff,0xffffffff), ITYPE
    //|>
    //| std 5, BASE, 0xfffffff8, ITYPE        // Prepend true to results.
    //|.else
    //| addd 3, PC, 1*8, RD                   // (nresults+1)*8 = 8 + results*8.
    //|.endif
    //|6:
    //|<
    //| ldd 0, STACK, SAVE_PC, PC
    //| disp ctpr1, ->BC_RET_Z
    //|>
    //|<
    //| stw 2, STACK, MULTRES, RD
    //| disp ctpr2, ->vm_return
    //|>
    //|.if resume
    //| subd 3, 0x0, 0x8, RA
    //|.else
    //| addd 3, 0x0, 0x0, RA
    //|.endif
    //|<
    //| cmpandesb 0, PC, FRAME_TYPE, pred0
    //| nop 2
    //|>
    //| ct ctpr1, pred0
    //| ct ctpr2
    //|7: // Coroutine returned with error (at co->top-1).
    //|.if resume
    //|<
    //| ldd 0, PC, L->top, RA
    //| addd 1, 0x0, U64x(0xffff7fff,0xffffffff), ITYPE
    //| disp ctpr1, <6
    //| nop 1
    //|>
    //| std 5, BASE, 0xfffffff8, ITYPE        // Prepend false to results.
    //| subd 0, RA, 0x8, RA
    //| std 2, PC, L->top, RA                 // Clear error from coroutine stack.
    //| // Copy error message.
    //|<
    //| ldd 0, RA, 0x0, RD
    //| nop 2
    //|>
    //|<
    //| addd 4, 0x0, (1+2)*8, RD              // (nresults+1)*8 = (1 + false + error)*8.
    //| std 5, BASE, 0x0, RD
    //| ct ctpr1
    //|>
    //|.else
    //| disp ctpr1, extern lj_ffh_coroutine_wrap_err // (lua_State *L, lua_State *co)
    //|<
    //| addd 0, PC, 0x0, CARG2
    //| addd 1, RB, 0x0, CARG1
    //| nop 3
    //|>
    //| call ctpr1, wbs = 0x8
    //| // Error function does not return.
    //|.endif
    //|8:  // Handle stack expansion on return from yield.
    //| disp ctpr1, extern lj_state_growstack // (lua_State *L, int n)
    //|<
    //| addd 0, TMP1, 0x0, RA
    //| shrd 1, PC, 0x3, PC
    //| nop 3
    //|>
    //|<
    //| addd 0, PC, 0x0, CARG2
    //| addd 1, RB, 0x0, CARG1
    //| std 2, RA, L->top, KBASE              // Undo coroutine stack clearing.
    //| call ctpr1, wbs = 0x8
    //|>
    //|<
    //| ldd 3, RB, L->base, BASE
    //| disp ctpr2, <3                        // Retry the stack move.
    //| nop 4
    //|>
    //|<
    //| addd 0, TMP1, 0x0, PC
    //| ct ctpr2
    //|>
    //|.endmacro
    //|
    //| coroutine_resume_wrap 1        // coroutine.resume
    dasm_put(Dst, 3168, (1+3)*8, (1+1)*8, DISPATCH_GL(hookmask), HOOK_ACTIVE_SHIFT, 16+FRAME_PCALL, LJ_TFUNC, Dt7(->pc), LJ_TFUNC, (2+1)*8, 0x18+FRAME_PCALL, DISPATCH_GL(hookmask), HOOK_ACTIVE_SHIFT, LJ_TFUNC, Dt7(->pc));
    dasm_put(Dst, 3382, LJ_TTHREAD, (1+1)*8, Dt1(->status), Dt1(->cframe), Dt1(->top), Dt1(->base), LUA_YIELD, LUA_YIELD, Dt1(->maxstack), Dt1(->top), Dt1(->base), Dt1(->top), ~LJ_VMST_INTERP, Dt1(->base), DISPATCH_GL(cur_L), DISPATCH_GL(vmstate), LUA_YIELD);
#line 2957 "vm_e2k.dasc"
    //| coroutine_resume_wrap 0        // coroutine.wrap
    dasm_put(Dst, 3553, Dt1(->maxstack), Dt1(->top), Dt1(->base), Dt1(->top), (1+1)*8, FRAME_TYPE, Dt1(->top), Dt1(->top), (1+2)*8, Dt1(->top), Dt1(->base));
    dasm_put(Dst, 3695, Dt8(->upvalue[0].gcr), Dt1(->status), Dt1(->cframe), Dt1(->top), Dt1(->base), LUA_YIELD, LUA_YIELD, Dt1(->maxstack), Dt1(->top), Dt1(->base), Dt1(->top), ~LJ_VMST_INTERP, Dt1(->base), DISPATCH_GL(cur_L), DISPATCH_GL(vmstate), LUA_YIELD);
#line 2958 "vm_e2k.dasc"
    //|
    //|->ff_coroutine_yield:
    //|<
    //| ldd 0, STACK, SAVE_L, RB
    //| disp ctpr1, ->fff_fallback
    //| nop 2
    //|>
    //|<
    //| ldd 0, RB, L->cframe, TMP0
    //| addd 3, BASE, RD, TMP1
    //| return ctpr3
    //| nop 2
    //|>
    //|<
    //| cmpandedb 0, TMP0, CFRAME_RESUME, pred0
    //| nop 2
    //|>
    //| ct ctpr1, pred0
    //|<
    //| std 2, RB, L->base, BASE
    //| subd 3, TMP1, 0x8, RD
    //|>
    //|<
    //| std 2, RB, L->top, RD
    //| addd 3, 0x0, 0x0, RD
    //|>
    //|<
    //| addd 0, 0x0, LUA_YIELD, RRET1
    //| std 2, RB, L->cframe, RD
    //|>
    //|<
    //| stb 2, RB, L->status, RRET1
    //| ct ctpr3
    //|>
    //|
    //|//-- Math library -------------------------------------------------------
    //|
    //|->ff_math_abs:
    dasm_put(Dst, 3854, Dt1(->maxstack), Dt1(->top), Dt1(->base), Dt1(->top), 1*8, FRAME_TYPE, Dt1(->top), Dt1(->base), Dt1(->cframe), CFRAME_RESUME, Dt1(->base), Dt1(->top), Dt1(->cframe), LUA_YIELD, Dt1(->status));
#line 2996 "vm_e2k.dasc"
    //|<
    //| ldd 3, BASE, 0x0, RB
    //| disp ctpr1, ->fff_fallback
    //| nop 2
    //|>
    //|<
    //| sard 3, RB, 0x2f, ITYPE
    //| shld 4, RB, 0x1, RB
    //|>
    //|<
    //| cmpbdb 3, RD, (1+1)*8, pred0
    //| cmpbsb 4, ITYPE, LJ_TISNUM, pred1
    //| shrd 5, RB, 0x1, RB
    //| nop 1
    //|>
    //|<
    //| pass pred0, p0
    //| pass pred1, p1
    //| landp ~p0, p1, p4
    //| pass p4, pred0
    //|>
    //| ct ctpr1, ~pred0
    //|<
    //| ldd 0, BASE, 0xfffffff8, PC
    //| disp ctpr1, ->fff_res
    //| nop 4
    //|>
    //|<
    //| addd 3, 0x0, (1+1)*8, RD
    //| std 5, BASE, 0xfffffff0, RB
    //| ct ctpr1
    //|>
    //|
    //|->ff_math_sqrt:
    //|<
    //| ldd 3, BASE, 0x0, CARG1
    //| disp ctpr1, ->fff_fallback
    //| nop 2
    //|>
    //|<
    //| sard 3, CARG1, 0x2f, ITYPE
    //| fsqrtid 5, CARG1, TMP1
    //|>
    //|<
    //| cmpbdb 3, RD, (1+1)*8, pred0
    //| cmpbsb 4, ITYPE, LJ_TISNUM, pred1
    //|>
    //|<
    //| pass pred0, p0
    //| pass pred1, p1
    //| landp ~p0, p1, p4
    //| pass p4, pred0
    //|>
    //| ct ctpr1, ~pred0
    //| fsqrttd 5, CARG1, TMP1, TMP0
    //| // fallthrough
    //|
    //|->fff_resb:
    //|<
    //| ldd 0, BASE, 0xfffffff8, PC
    //| nop 2
    //|>
    //|<
    //| addd 3, 0x0, (1+1)*8, RD
    //| std 5, BASE, 0xfffffff0, TMP0
    //|>
    //| // fallthrough
    //|
    //|->fff_res:
    //|<
    //| cmpandedb 0, PC, FRAME_TYPE, pred0
    //| ldbsm 2, PC, 0x0, CARG4
    //| addd 3, 0x0, LJ_TNIL, TMP1
    //| stw 5, STACK, MULTRES, RD
    //| disp ctpr1, ->vm_return
    //|>
    //|<
    //| ldb 3, PC, PC_RB, RB, pred0
    //| ldw 5, PC, 0x0, CARG3, pred0
    //| disp ctpr2, >2
    //| nop 1
    //|>
    //| ldb 3, PC, PC_RA, RA, pred0
    //|<
    //| shld 0, CARG4, 0x3, CARG4, pred0
    //| addd 1, PC, 0x4, PC, pred0
    //| subd 3, 0x0, 0x10, RA, ~pred0         // Results start at BASE+RA = BASE-16
    //| shld 4, RB, 0x3, RB, pred0
    //| disp ctpr3, >1
    //|>
    //|<
    //| ldd 0, CARG4, DISPATCH, CARG4, pred0
    //| cmpbedbsm 3, RB, RD, pred1            // More results expected?
    //| ct ctpr1, ~pred0                      // Non-standard return case.
    //|>
    //|<
    //| shld 3, RA, 0x3, CARG5
    //| ct ctpr2, pred1
    //|>
    //|1:                                     // Fill up results with nil.
    //|<
    //| subd 3, RD, 0x18, TMP0
    //| addd 4, RD, 0x8, RD
    //|>
    //|<
    //| cmpbedb 3, RB, RD, pred1
    //| std 5, BASE, TMP0, TMP1
    //|>
    //| ct ctpr3, ~pred1
    //|2:
    //|<
    //| movtd 0, CARG4, ctpr1
    //| subd 3, BASE, 0x10, BASE
    //|>
    //|<
    //| shrd 3, CARG3, 0x5, RA
    //| shrd 4, CARG3, 0x15, RB
    //| shrd 5, CARG3, 0xd, RD
    //|>
    //|<
    //| subd 3, BASE, CARG5, BASE                   // base = base - (RA+2)*8
    //| andd 4, RD, 0x7fff8, RD
    //| andd 5, RA, 0x7f8, RA
    //|>
    //|<
    //| andd 3, RB, 0x7f8, RB
    //| andd 4, RD, 0x7f8, RC
    //| ct ctpr1
    //|>
    //|
    //|.macro math_round, func
    //|->ff_math_ .. func:
    //|<
    //| ldd 3, BASE, 0x0, CARG1
    //| disp ctpr2, ->fff_fallback
    //| nop 1
    //|>
    //| disp ctpr1, ->vm_ .. func
    //| sard 3, CARG1, 0x2f, ITYPE
    //|<
    //| cmpbsb 0, ITYPE, LJ_TISNUM, pred0
    //| nop 2
    //|>
    //| ct ctpr2, ~pred0
    //| call ctpr1, wbs = 0x8
    //|<
    //| addd 0, CRET1, 0x0, TMP0
    //| disp ctpr1, ->fff_resb
    //| nop 4
    //|>
    //| ct ctpr1
    //|.endmacro
    //|
    //| math_round floor
    //| math_round ceil
    dasm_put(Dst, 4014, LJ_TISNUM, (1+1)*8, (1+1)*8, LJ_TISNUM, (1+1)*8, (1+1)*8, LJ_TNIL, FRAME_TYPE, LJ_TISNUM);
#line 3151 "vm_e2k.dasc"
    //|
    //|->ff_math_log:
    //|<
    //| ldd 3, BASE, 0x0, CARG1
    //| disp ctpr2, ->fff_fallback
    //| nop 1
    //|>
    //| disp ctpr1, extern log
    //| sard 3, CARG1, 0x2f, ITYPE
    //|<
    //| cmpedb 3, RD, (1+1)*8, pred0
    //| cmpbsb 4, ITYPE, LJ_TISNUM, pred1
    //| nop 1
    //|>
    //|<
    //| pass pred0, p0
    //| pass pred1, p1
    //| landp p0, p1, p4
    //| pass p4, pred0
    //|>
    //| ct ctpr2, ~pred0
    //| call ctpr1, wbs = 0x8
    //|<
    //| addd 0, CRET1, 0x0, TMP0
    //| disp ctpr2, ->fff_resb
    //| nop 4
    //|>
    //| ct ctpr2
    //|
    //|.macro math_extern, func
    //|->ff_math_ .. func:
    //|<
    //| ldd 3, BASE, 0x0, CARG1
    //| disp ctpr2, ->fff_fallback
    //| nop 1
    //|>
    //| disp ctpr1, extern func
    //| sard 3, CARG1, 0x2f, ITYPE
    //|<
    //| cmpbdb 3, RD, (1+1)*8, pred0
    //| cmpbsb 4, ITYPE, LJ_TISNUM, pred1
    //| nop 1
    //|>
    //|<
    //| pass pred0, p0
    //| pass pred1, p1
    //| landp ~p0, p1, p4
    //| pass p4, pred0
    //|>
    //| ct ctpr2, ~pred0
    //| call ctpr1, wbs = 0x8
    //|<
    //| addd 0, CRET1, 0x0, TMP0
    //| disp ctpr2, ->fff_resb
    //| nop 4
    //|>
    //| ct ctpr2
    //|.endmacro
    //|
    //|.macro math_extern2, func
    //|->ff_math_ .. func:
    //|<
    //| ldd 3, BASE, 0x0, CARG1
    //| addd 4, 0x0, 0x2f, TMP0
    //| ldd 5, BASE, 0x8, CARG2
    //| disp ctpr2, ->fff_fallback
    //| nop 1
    //|>
    //| disp ctpr1, extern func
    //|<
    //| cmpbdb 3, RD, (2+1)*8, pred0
    //| sard 4, CARG1, TMP0, ITYPE
    //| sard 5, CARG2, TMP0, TMP1
    //|>
    //|<
    //| cmpbsb 3, ITYPE, LJ_TISNUM, pred1
    //| cmpbsb 4, TMP1, LJ_TISNUM, pred2
    //| nop 1
    //|>
    //|<
    //| pass pred0, p0
    //| pass pred1, p1
    //| pass pred2, p2
    //| landp ~p0, p1, p4
    //| landp p4, p2, p5
    //| pass p5, pred0
    //|>
    //| ct ctpr2, ~pred0
    //| call ctpr1, wbs = 0x8
    //|<
    //| addd 3, CRET1, 0x0, TMP0
    //| disp ctpr1, ->fff_resb
    //|>
    //| ct ctpr1
    //|.endmacro
    //|
    //| math_extern log10
    //| math_extern exp
    //| math_extern sin
    //| math_extern cos
    dasm_put(Dst, 4194, LJ_TISNUM, LJ_TISNUM, (1+1)*8, LJ_TISNUM, (1+1)*8, LJ_TISNUM, (1+1)*8, LJ_TISNUM, (1+1)*8);
#line 3251 "vm_e2k.dasc"
    //| math_extern tan
    //| math_extern asin
    //| math_extern acos
    //| math_extern atan
    dasm_put(Dst, 4370, LJ_TISNUM, (1+1)*8, LJ_TISNUM, (1+1)*8, LJ_TISNUM, (1+1)*8, LJ_TISNUM, (1+1)*8);
#line 3255 "vm_e2k.dasc"
    //| math_extern sinh
    //| math_extern cosh
    //| math_extern tanh
    //| math_extern2 pow
    dasm_put(Dst, 4515, LJ_TISNUM, (1+1)*8, LJ_TISNUM, (1+1)*8, LJ_TISNUM, (1+1)*8, LJ_TISNUM, (1+1)*8);
#line 3259 "vm_e2k.dasc"
    //| math_extern2 atan2
    //| math_extern2 fmod
    //|
    //|->ff_math_ldexp:
    //|<
    //| ldd 3, BASE, 0x0, TMP0
    //| addd 4, 0x0, 0x2f, CARG2
    //| ldd 5, BASE, 0x8, TMP1
    //| disp ctpr1, ->fff_fallback
    //| nop 2
    //|>
    //|<
    //| cmpbdb 3, RD, (2+1)*8, pred0
    //| sard 4, TMP0, CARG2, ITYPE
    //| sard 5, TMP1, CARG2, CARG1
    //| disp ctpr2, ->fff_res
    //|>
    //|<
    //| cmpbsb 3, ITYPE, LJ_TISNUM, pred1
    //| cmpbsb 4, CARG1, LJ_TISNUM, pred2
    //|>
    //| fdtoidtr 3, TMP1, TMP1
    //|<
    //| pass pred0, p0
    //| pass pred1, p1
    //| pass pred2, p2
    //| landp ~p0, p1, p4
    //| landp p4, p2, p5
    //| pass p5, pred0
    //|>
    //|<
    //| fscaled 4, TMP0, TMP1, TMP0
    //| ct ctpr1, ~pred0
    //|>
    //|<
    //| ldd 0, BASE, 0xfffffff8, PC
    //| nop 2
    //|>
    //|<
    //| addd 3, 0x0, (1+1)*8, RD
    //| std 5, BASE, 0xfffffff0, TMP0
    //| ct ctpr2
    //|>
    //|
    //|->ff_math_frexp:
    dasm_put(Dst, 4660, (2+1)*8, LJ_TISNUM, LJ_TISNUM, (2+1)*8, LJ_TISNUM, LJ_TISNUM, (2+1)*8, LJ_TISNUM, LJ_TISNUM, (2+1)*8, LJ_TISNUM, LJ_TISNUM, (1+1)*8);
#line 3304 "vm_e2k.dasc"
    //|<
    //| ldd 3, BASE, 0x0, CARG1
    //| disp ctpr2, ->fff_fallback
    //| nop 1
    //|>
    //| disp ctpr1, extern frexp
    //| sard 3, CARG1, 0x2f, ITYPE
    //|<
    //| cmpbdb 3, RD, (1+1)*8, pred0
    //| cmpbsb 4, ITYPE, LJ_TISNUM, pred1
    //| nop 1
    //|>
    //|<
    //| pass pred0, p0
    //| pass pred1, p1
    //| landp ~p0, p1, p4
    //| pass p4, pred0
    //|>
    //| ct ctpr2, ~pred0
    //|<
    //| addd 0, STACK, STACK_TMP, CARG2
    //| call ctpr1, wbs = 0x8
    //|>
    //|<
    //| ldd 0, BASE, 0xfffffff8, PC
    //| ldw 2, STACK, STACK_TMP, TMP0
    //| disp ctpr1, ->fff_res
    //| nop 2
    //|>
    //|<
    //| istofd 0, TMP0, TMP0
    //| std 5, BASE, 0xfffffff0, CRET1
    //|>
    //|<
    //| addd 3, 0x0, (1+2)*8, RD
    //| std 5, BASE, 0xfffffff8, TMP0
    //| ct ctpr1
    //|>
    //|
    //|->ff_math_modf:
    //|<
    //| ldd 3, BASE, 0x0, CARG1
    //| disp ctpr2, ->fff_fallback
    //| nop 1
    //|>
    //| disp ctpr1, extern modf
    //| sard 3, CARG1, 0x2f, ITYPE
    //|<
    //| cmpbdb 3, RD, (1+1)*8, pred0
    //| cmpbsb 4, ITYPE, LJ_TISNUM, pred1
    //| nop 1
    //|>
    //|<
    //| pass pred0, p0
    //| pass pred1, p1
    //| landp ~p0, p1, p4
    //| pass p4, pred0
    //|>
    //| ct ctpr2, ~pred0
    //|<
    //| subd 3, BASE, 0x10, CARG2
    //| call ctpr1, wbs = 0x8
    //|>
    //|<
    //| ldd 0, BASE, 0xfffffff8, PC
    //| disp ctpr2, ->fff_res
    //| nop 2
    //|>
    //|<
    //| addd 4, 0x0, (1+2)*8, RD
    //| std 5, BASE, 0xfffffff8, CRET1
    //| ct ctpr2
    //|>
    //|
    //|.macro math_minmax, name, ins
    //|->ff_ .. name:
    //|<
    //| ldd 3, BASE, 0x0, TMP0
    //| disp ctpr1, ->fff_fallback
    //| nop 2
    //|>
    //|<
    //| sard 3, TMP0, 0x2f, ITYPE
    //| disp ctpr2, ->fff_resb
    //|>
    //|<
    //| cmpbdb 3, RD, (1+1)*8, pred0
    //| cmpbsb 4, ITYPE, LJ_TISNUM, pred1
    //| disp ctpr3, >1
    //| nop 1
    //|>
    //|<
    //| pass pred0, p0
    //| pass pred1, p1
    //| landp ~p0, p1, p4
    //| pass p4, pred0
    //|>
    //|<
    //| addd 3, 0x0, 0x10, RA
    //| ct ctpr1, ~pred0
    //|>
    //|1: //  Handle numbers or integers.
    //|<
    //| cmpbsb 3, RA, RD, pred0
    //| addd 4, BASE, RA, TMP1
    //|>
    //|<
    //| lddsm 3, TMP1, 0xfffffff8, TMP1
    //| nop 1
    //|>
    //| ct ctpr2, ~pred0
    //| sard 3, TMP1, 0x2f, ITYPE
    //|<
    //| cmpbsb 3, ITYPE, LJ_TISNUM, pred0
    //| nop 2
    //|>
    //| ct ctpr1, ~pred0
    //|<
    //| ins 3, TMP0, TMP1, TMP0
    //| addd 4, RA, 0x8, RA
    //| ct ctpr3
    //|>
    //|.endmacro
    //|
    //| math_minmax math_min, fmind
    //| math_minmax math_max, fmaxd
    dasm_put(Dst, 4835, LJ_TISNUM, (1+1)*8, (1+2)*8, LJ_TISNUM, (1+1)*8, (1+2)*8, LJ_TISNUM, (1+1)*8, LJ_TISNUM, LJ_TISNUM, (1+1)*8);
#line 3430 "vm_e2k.dasc"
    //|
    //|//-- String library -----------------------------------------------------
    //|
    //|->ff_string_byte:
    //|<
    //| ldd 3, BASE, 0x0, RB
    //| disp ctpr1, ->fff_fallback
    //| nop 2
    //|>
    //|<
    //| sard 3, RB, 0x2f, ITYPE
    //| andd 4, RB, U64x(0x00007fff,0xffffffff), RB
    //| disp ctpr2, ->fff_res
    //|>
    //|<
    //| cmpedb 3, RD, (1+1)*8, pred0
    //| cmpesb 4, ITYPE, LJ_TSTR, pred1
    //| disp ctpr3, ->fff_resb
    //|>
    //| ldwsm 3, RB, STR->len, TMP0
    //|<
    //| pass pred0, p0
    //| pass pred1, p1
    //| landp p0, p1, p4
    //| pass p4, pred0
    //|>
    //| ct ctpr1, ~pred0
    //|<
    //| ldd 2, BASE, 0xfffffff8, PC
    //| ldbsm 3, RB, STR[1], RB
    //| cmpbsbsm 4, TMP0, 0x1, pred1
    //| nop 2
    //|>
    //|<
    //| addd 2, 0x0, (0+1)*8, RD, pred1
    //| istofd 3, RB, TMP0
    //| ct ctpr2, pred1                       // Return no results for empty string.
    //|>
    //| ct ctpr3
    //|
    //|->ff_string_char:
    //| ffgccheck
    //|<
    //| ldd 3, BASE, 0x0, TMP0
    //| addd 4, 0x0, 0x1, TMP1
    //| nop 2
    //|>
    //|<
    //| sard 3, TMP0, 0x2f, ITYPE
    //| fdtoistr 4, TMP0, RB
    //|>
    //|<
    //| cmpedb 3, RD, (1+1)*8, pred0
    //| cmpbsb 4, ITYPE, LJ_TISNUM, pred1
    //|>
    //|<
    //| pass pred0, p0                        // *Exactly* 1 arg.
    //| pass pred1, p1
    //| landp p0, p1, p4
    //| pass p4, pred0
    //|>
    //|<
    //| cmpbesb 3, RB, 255, pred1
    //| ct ctpr3, ~pred0
    //| nop 2
    //|>
    //|<
    //| stw 2, STACK, STACK_TMP, RB, pred1
    //| addd 3, STACK, STACK_TMP, RD, pred1   // Points to stack. Little-endian.
    //| ct ctpr3, ~pred1
    //|>
    //| // Fall through
    //|
    //|->fff_newstr:
    dasm_put(Dst, 5006, LJ_TISNUM, LJ_TSTR, (1+1)*8, Dt5(->len), Dt5([1]), (0+1)*8, DISPATCH_GL(gc.threshold), DISPATCH_GL(gc.total), Dt1(->base), Dt1(->top), Dt1(->top), Dt1(->base), LJ_TISNUM, (1+1)*8);
#line 3504 "vm_e2k.dasc"
    //| disp ctpr1, extern lj_str_new         // (lua_State *L, char *str, size_t l)
    //|<
    //| ldd 0, STACK, SAVE_L, RB
    //| sxt 1, 0x2, TMP1, CARG3               // Zero-extended to size_t.
    //| nop 2
    //|>
    //|<
    //| addd 0, RD, 0x0, CARG2
    //| addd 1, RB, 0x0, CARG1
    //| std 2, RB, L->base, BASE
    //|>
    //|<
    //| std 2, STACK, SAVE_PC, PC
    //| call ctpr1, wbs = 0x8
    //|>
    //| // GStr * returned.
    //|<
    //| addd 2, 0x0, LJ_TSTR, ITYPE
    //| ldd 3, RB, L->base, BASE
    //| disp ctpr1, ->fff_res
    //| nop 2
    //|>
    //| shld 0, ITYPE, 0x2f, ITYPE
    //|<
    //| ord 2, CRET1, ITYPE, CRET1
    //| ldd 3, BASE, 0xfffffff8, PC
    //|>
    //|<
    //| addd 0, 0x0, (1+1)*8, RD
    //| std 5, BASE, 0xfffffff0, CRET1
    //| ct ctpr1
    //|>
    //|
    //|->ff_string_sub:
    //| ffgccheck
    //|<
    //| lddsm 3, BASE, 0x10, TMP0
    //| addd 4, 0x0, 0x0, RA
    //| adds 5, 0x0, 0xffffffff, TMP1
    //| nop 1
    //|>
    //|<
    //| cmpbdb 3, RD, (1+2)*8, pred0
    //| cmpbedb 4, RD, (1+2)*8, pred1
    //|>
    //| sardsm 5, TMP0, 0x2f, ITYPE
    //|<
    //| cmpbsbsm 3, ITYPE, LJ_TISNUM, pred2
    //| nop 1
    //|>
    //|<
    //| pass pred0, p0
    //| pass pred1, p1
    //| pass pred2, p2
    //| landp ~p0, p2, p4
    //| landp ~p1, p2, p5
    //| pass p4, pred0
    //| pass p5, pred1
    //|>
    //|<
    //| fdtoistr 3, TMP0, TMP1, pred1
    //| ct ctpr3, ~pred0
    //|>
    //|<
    //| ldd 3, BASE, 0x0, RB
    //| addd 4, 0x0, U64x(0x00007fff,0xffffffff), CARG1
    //| ldd 5, BASE, 0x8, TMP0
    //| nop 2
    //|>
    //|<
    //| sard 3, RB, 0x2f, ITYPE
    //| andd 4, RB, CARG1, RB
    //| sard 5, TMP0, 0x2f, CARG1
    //|>
    //|<
    //| cmpesb 3, ITYPE, LJ_TSTR, pred0
    //| cmpbsb 4, CARG1, LJ_TISNUM, pred1
    //| ldwsm 5, RB, STR->len, RC
    //| disp ctpr1, >2
    //| nop 1
    //|>
    //|<
    //| fdtoistr 3, TMP0, RA
    //| pass pred0, p0
    //| pass pred1, p1
    //| landp p0, p1, p4
    //| pass p4, pred0
    //| disp ctpr2, >2
    //|>
    //|<
    //| cmpbsbsm 3, RC, TMP1, pred1
    //| cmplsbsm 4, RC, TMP1, pred2
    //| adds 5, TMP1, 0x1, CARG1
    //| ct ctpr3, ~pred0
    //|>
    //|<
    //| cmplesb 3, RA, 0x0, pred3
    //| cmpesb 4, RA, 0x0, pred4
    //| disp ctpr2, ->fff_newstr
    //|>
    //|<
    //| pass pred1, p0
    //| pass pred2, p1
    //| landp p0, p1, p4
    //| landp p0, ~p1, p5
    //| pass p4, pred0
    //| pass p5, pred1
    //|>
    //|<
    //| pass pred3, p0
    //| pass pred4, p1
    //| landp p0, ~p1, p4
    //| pass p4, pred2
    //|>
    //|<
    //| adds 3, CARG1, RC, TMP1, pred1        // end = end+(len+1)
    //| adds 4, RC, 0x0, TMP1, pred0          // end = len
    //| adds 5, 0x0, 0x1, RA, pred4           // start = 1
    //| ct ctpr1, ~pred2                      // start > 0?
    //|>
    //| // Negative start or underflow.
    //| adds 3, RA, RC, RA                    // start = start+(len+1)
    //| adds 3, RA, 0x1, RA
    //| cmplesb 3, RA, 0x0, pred0
    //| adds 3, 0x0, 0x1, RA, pred0           // start = 1
    //|2:
    dasm_put(Dst, 5168, Dt1(->base), Dt1(->base), LJ_TSTR, (1+1)*8, DISPATCH_GL(gc.threshold), DISPATCH_GL(gc.total), Dt1(->base), Dt1(->top), Dt1(->top), Dt1(->base), (1+2)*8, (1+2)*8, LJ_TISNUM, Dt5(->len), LJ_TISNUM, LJ_TSTR);
#line 3630 "vm_e2k.dasc"
    //|<
    //| subs 3, TMP1, RA, TMP1
    //| addd 4, RB, RA, CARG1
    //|>
    //|<
    //| cmplsb 3, TMP1, 0x0, pred0
    //| nop 1
    //|>
    //|<
    //| xors 3, TMP1, TMP1, TMP1, pred0       // Zero length. Any ptr in RD is ok.
    //| adds 4, TMP1, 0x1, TMP1, ~pred0
    //| addd 5, CARG1, #STR-1, RD, ~pred0
    //| ct ctpr2
    //|>
    //|
    //|.macro ffstring_op, name
    //|->ff_string_..name:
    //|<
    //| lddsm 0, DISPATCH, DISPATCH_GL(gc.total), RB
    //| lddsm 2, DISPATCH, DISPATCH_GL(gc.threshold), TMP0
    //| disp ctpr1, ->fff_fallback
    //|>
    //|<
    //| ldd 0, STACK, SAVE_L, CARG1
    //| cmpbdb 3, RD, (1+1)*8, pred0
    //| disp ctpr2, >1
    //| nop 2
    //|>
    //| ct ctpr1, pred0
    //|<
    //| cmpbdbsm 0, RB, TMP0, pred1
    //| nop 1
    //|>
    //| disp ctpr1, extern lj_gc_step         // (lua_State *L)
    //|<
    //| ct ctpr2, pred1
    //| std 2, CARG1, L->base, BASE, ~pred1
    //| addd 3, BASE, RD, RD, ~pred1
    //| std 5, STACK, SAVE_PC, PC, ~pred1
    //|>
    //|<
    //| subd 3, RD, 0x8, RD
    //| nop 2
    //|>
    //|<
    //| addd 3, CARG1, 0x0, RB 
    //| std 5, CARG1, L->top, RD
    //| call ctpr1, wbs = 0x8
    //|>
    //|<
    //| ldd 3, RB, L->base, BASE
    //| ldd 5, RB, L->top, RD
    //| nop 2
    //|>
    //| subd 3, RD, BASE, RD
    //| addd 3, RD, 0x8, RD
    //|1:
    //|<
    //| addd 0, DISPATCH, DISPATCH_GL(tmpbuf), CARG1
    //| ldd 3, BASE, 0x0, CARG2
    //| ldd 5, STACK, SAVE_L, RB
    //| disp ctpr2, ->fff_fallback
    //|>
    //| ldd 0, CARG1, SBUF->b, RC
    //| disp ctpr1, extern lj_buf_putstr_ .. name
    //|<
    //| sard 3, CARG2, 0x2f, ITYPE
    //| andd 4, CARG2, U64x(0x00007fff,0xffffffff), CARG2
    //|>
    //|<
    //| cmpesb 3, ITYPE, LJ_TSTR, pred0
    //| nop 2
    //|>
    //| ct ctpr2, ~pred0
    //|<
    //| std 2, CARG1, SBUF->L, RB
    //| std 5, RB, L->base, BASE
    //|>
    //|<
    //| std 2, CARG1, SBUF->p, RC
    //| std 5, STACK, SAVE_PC, PC
    //| call ctpr1, wbs = 0x8
    //|>
    //| disp ctpr1, extern lj_buf_tostr
    //|<
    //| addd 0, CRET1, 0x0, CARG1
    //| call ctpr1, wbs = 0x8
    //|>
    //| // GStr * returned.
    //|<
    //| addd 0, 0x0, LJ_TSTR, ITYPE
    //| ldd 3, RB, L->base, BASE
    //| disp ctpr1, ->fff_res
    //|>
    //| shld 0, ITYPE, 0x2f, ITYPE
    //| ord 0, CRET1, ITYPE, CRET1
    //| ldd 3, BASE, 0xfffffff8, PC
    //|<
    //| addd 3, 0x0, (1+1)*8, RD
    //| std 5, BASE, 0xfffffff0, CRET1
    //| ct ctpr1
    //|>
    //|.endmacro
    //|
    //| ffstring_op reverse
    //| ffstring_op lower
    dasm_put(Dst, 5365, sizeof(GCstr)-1, DISPATCH_GL(gc.threshold), DISPATCH_GL(gc.total), (1+1)*8, Dt1(->base), Dt1(->top), Dt1(->top), Dt1(->base), DISPATCH_GL(tmpbuf), DtE(->b), LJ_TSTR, Dt1(->base), DtE(->L), DtE(->p), Dt1(->base), LJ_TSTR, (1+1)*8);
#line 3736 "vm_e2k.dasc"
    //| ffstring_op upper
    dasm_put(Dst, 5521, DISPATCH_GL(gc.threshold), DISPATCH_GL(gc.total), (1+1)*8, Dt1(->base), Dt1(->top), Dt1(->top), Dt1(->base), DISPATCH_GL(tmpbuf), DtE(->b), LJ_TSTR, Dt1(->base), DtE(->L), DtE(->p), Dt1(->base), LJ_TSTR, (1+1)*8);
#line 3737 "vm_e2k.dasc"
    //|
    //|//-- Bit library --------------------------------------------------------
    //|
    //|.macro .ffunc_bit, name
    //|->ff_bit_..name:
    //|<
    //| lddsm 3, BASE, 0x0, TMP0
    //| cmpbdb 4, RD, (1+1)*8, pred0
    //| disp ctpr1, ->fff_fallback
    //| nop 2
    //|>
    //|<
    //| sardsm 3, TMP0, 0x2f, ITYPE
    //| fadddsm 4, TMP0, U64x(0x43380000,0x00000000), TMP0
    //| disp ctpr2, ->fff_resb
    //|>
    //|<
    //| cmpbsbsm 3, ITYPE, LJ_TISNUM, pred1
    //| nop 3
    //|>
    //| ct ctpr1, pred0
    //|<
    //| adds 3, TMP0, 0x0, RB, pred1
    //| ct ctpr1, ~pred1
    //|>
    //|.endmacro
    //|
    //|.macro .ffunc_bit_op, name, ins
    //| .ffunc_bit name
    //|<
    //| addd 3, RD, 0x0, TMP1                 // Save for fallback.
    //| addd 4, BASE, RD, RD
    //| disp ctpr1, ->fff_fallback
    //|>
    //| subd 3, RD, 0x10, RD
    //|1:
    //|<
    //| istofd 3, RB, TMP0
    //| cmpbedb 4, RD, BASE, pred0
    //| lddsm 5, RD, 0x0, CARG1
    //| disp ctpr3, <1
    //| nop 2
    //|>
    //|<
    //| sardsm 3, CARG1, 0x2f, ITYPE
    //| fadddsm 4, CARG1, U64x(0x43380000,0x00000000), CARG1
    //| ct ctpr2, pred0
    //|>
    //|<
    //| cmpbsb 3, ITYPE, LJ_TISNUM, pred0
    //| nop 2
    //|>
    //|<
    //| addd 3, TMP1, 0x0, RD, ~pred0         // Restore for fallback
    //| ct ctpr1, ~pred0
    //|>
    //|<
    //| adds 3, CARG1, 0x0, RA
    //| subd 4, RD, 0x8, RD
    //|>
    //|<
    //| ins 3, RB, RA, RB
    //| ct ctpr3
    //|>
    //|.endmacro
    //|
    //|.ffunc_bit_op band, ands
    dasm_put(Dst, 5661, DISPATCH_GL(gc.threshold), DISPATCH_GL(gc.total), (1+1)*8, Dt1(->base), Dt1(->top), Dt1(->top), Dt1(->base), DISPATCH_GL(tmpbuf), DtE(->b), LJ_TSTR, Dt1(->base), DtE(->L), DtE(->p), Dt1(->base), LJ_TSTR, (1+1)*8);
#line 3804 "vm_e2k.dasc"
    //|.ffunc_bit_op bor, ors
    //|.ffunc_bit_op bxor, xors
    dasm_put(Dst, 5801, (1+1)*8, LJ_TISNUM, LJ_TISNUM, (1+1)*8, LJ_TISNUM, LJ_TISNUM, (1+1)*8, LJ_TISNUM);
#line 3806 "vm_e2k.dasc"
    //|
    //|.ffunc_bit tobit
    //|<
    //| istofd 3, RB, TMP0
    //| ct ctpr2
    //|>
    //|
    //|.ffunc_bit bswap
    //|<
    //| sxt 3, 0x6, RB, RB
    //| addd 4, 0x0, U64x(0x80808080,0x00010203), TMP0
    //|>
    //|<
    //| pshufb 3, RB, RB, TMP0, RB
    //| nop 3
    //|>
    //|<
    //| istofd 3, RB, TMP0
    //| ct ctpr2
    //|>
    //|
    //|.ffunc_bit bnot
    //|<
    //| xors 3, RB, 0xffffffff, RB
    //|>
    //|<
    //| istofd 3, RB, TMP0
    //| ct ctpr2
    //|>
    //|
    //|.macro .ffunc_bit_sh, name, ins
    //|->ff_..bit_..name:
    //|<
    //| lddsm 3, BASE, 0x0, CARG1
    //| cmpbdb 4, RD, (2+1)*8, pred0
    //| lddsm 5, BASE, 0x8, CARG2
    //| disp ctpr1, ->fff_fallback
    //|>
    //|<
    //| addd 3, 0x0, U64x(0x43380000,0x00000000), TMP1
    //| disp ctpr2, ->fff_resb
    //| nop 1
    //|>
    //|<
    //| sardsm 3, CARG1, 0x2f, TMP0
    //| sardsm 4, CARG2, 0x2f, ITYPE
    //|>
    //|<
    //| fadddsm 3, CARG1, TMP1, CARG1
    //| fadddsm 4, CARG2, TMP1, CARG2
    //|>
    //|<
    //| cmpbsbsm 3, TMP0, LJ_TISNUM, pred1
    //| cmpbsbsm 4, ITYPE, LJ_TISNUM, pred2
    //| ct ctpr1, pred0
    //| nop 1
    //|>
    //|<
    //| pass pred1, p0
    //| pass pred2, p1
    //| landp p0, p1, p4
    //| pass p4, pred0
    //|>
    //|<
    //| adds 3, CARG1, 0x0, RB, pred0
    //| ands 4, CARG2, 0xff, RA, pred0
    //| ct ctpr1, ~pred0
    //|>
    //| ins 3, RB, RA, RB
    //|<
    //| istofd 3, RB, TMP0
    //| ct ctpr2
    //|>
    //|.endmacro
    //|
    //|.ffunc_bit_sh lshift, shls
    //|.ffunc_bit_sh rshift, shrs
    dasm_put(Dst, 5982, LJ_TISNUM, (1+1)*8, LJ_TISNUM, (1+1)*8, LJ_TISNUM, (1+1)*8, LJ_TISNUM, (2+1)*8, LJ_TISNUM, LJ_TISNUM);
#line 3883 "vm_e2k.dasc"
    //|.ffunc_bit_sh arshift, sars
    //|.ffunc_bit_sh rol, scls
    //|.ffunc_bit_sh ror, scrs
    //|
    //|//-----------------------------------------------------------------------
    //|
    //|->fff_fallback:                        // Call fast function fallback handler.
    dasm_put(Dst, 6177, (2+1)*8, LJ_TISNUM, LJ_TISNUM, (2+1)*8, LJ_TISNUM, LJ_TISNUM, (2+1)*8, LJ_TISNUM, LJ_TISNUM, (2+1)*8, LJ_TISNUM, LJ_TISNUM);
#line 3890 "vm_e2k.dasc"
    //| // BASE = new base, RD = (nargs+1)*8
    //|<
    //| ldd 0, STACK, SAVE_L, RB
    //| ldd 3, BASE, 0xfffffff8, PC           // Fallback may overwrite PC.
    //| addd 4, BASE, RD, RD
    //| ldd 5, BASE, 0xfffffff0, TMP1
    //| disp ctpr2, >5
    //| nop 2
    //|>
    //|<
    //| andd 2, TMP1, U64x(0x00007fff,0xffffffff), TMP1
    //| ldd 3, RB, L->maxstack, TMP0
    //|>
    //|<
    //| lddsm 0, TMP1, CFUNC->f, ITYPE
    //| subd 3, RD, 0x8, RD
    //|>
    //|<
    //| addd 3, RD, 8*LUA_MINSTACK, RA        // Ensure enough space for handler.
    //| std 5, RB, L->top, RD
    //|>
    //|<
    //| std 2, STACK, SAVE_PC, PC             // Redundant (but a defined value).
    //| cmpbedb 3, RA, TMP0, pred0
    //| addd 4, RB, 0x0, CARG1
    //| std 5, RB, L->base, BASE
    //| nop 1
    //|>
    //| movtdsm 0, ITYPE, ctpr1
    //| ct ctpr2, ~pred0                      // Need to grow stack.
    //| call ctpr1, wbs = 0x8                 // (lua_State *L)
    //| // Either throws an error, or recovers and returns -1, 0 or nresults+1.
    //|<
    //| ldd 3, RB, L->base, BASE
    //| shld 4, CRET1, 0x3, RD
    //| disp ctpr2, ->fff_res
    //|>
    //|<
    //| cmpledb 3, CRET1, 0x0, pred0
    //| nop 2
    //|>
    //| ct ctpr2, ~pred0                      // Returned nresults+1?
    //|1:
    //|<
    //| ldd 3, RB, L->top, RA
    //| cmpedb 4, CRET1, 0x0, pred0
    //| ldd 5, BASE, 0xfffffff0, RB
    //| disp ctpr1, ->vm_call_tail
    //| nop 2
    //|>
    //|<
    //| subd 3, RA, BASE, RA
    //| andd 4, RB, U64x(0x00007fff,0xffffffff), RB
    //|>
    //|<
    //| addd 3, RA, 0x8, RD
    //| ct ctpr1, ~pred0                      // Returned -1?
    //|>
    //| ins_callt                             // Returned 0: retry fast path.
    //|
    //|// Reconstruct previous base for vmeta_call during tailcall.
    //|->vm_call_tail:
    //|<
    //| cmpandesb 0, PC, FRAME_TYPE, pred0
    //| ldbsm 2, PC, PC_RA, RB
    //| addd 3, BASE, 0x0, RA
    //| disp ctpr1, >3
    //| nop 2
    //|>
    //|<
    //| lddsm 3, RA, 0xfffffff0, TMP1
    //| subdsm 4, 0x0, RB, RB
    //| disp ctpr2, ->vmeta_call
    //| nop 1
    //|>
    //|<
    //| shldsm 3, RB, 0x3, TMP0
    //| ct ctpr1, ~pred0
    //|>
    //| // BASE = old base, RA = new base, RD = (nargs+1)*8, PC = caller PC
    //|<
    //| addd 3, BASE, TMP0, BASE
    //| sard 4, TMP1, 0x2f, ITYPE
    //|>
    //|<
    //| cmpesb 3, ITYPE, LJ_TFUNC, pred0
    //| nop 1
    //|>
    //|<
    //| subd 3, BASE, 0x10, BASE              // base = base - (RB+2)*8
    //| andd 4, TMP1, U64x(0x00007fff,0xffffffff), RB
    //|>
    //|<
    //| addd 3, RA, 0x0, BASE, pred0
    //| ct ctpr2, ~pred0
    //|>
    //| ins_call
    //| // BASE = new base, RB = func, RD = (nargs+1)*8, PC = caller PC
    //|3:
    //| // BASE = old base, RA = new base, RD = (nargs+1)*8, PC = caller PC
    //|<
    //| ldd 3, RA, 0xfffffff0, TMP1
    //| addd 4, PC, 0x0, RB
    //| nop 2
    //|>
    //|<
    //| andd 3, RB, 0xfffffff8, RB
    //| sard 4, TMP1, 0x2f, ITYPE
    //|>
    //|<
    //| cmpesb 3, ITYPE, LJ_TFUNC, pred0
    //| subd 4, BASE, RB, BASE
    //| andd 5, TMP1, U64x(0x00007fff,0xffffffff), RB
    //| nop 2
    //|>
    //|<
    //| addd 3, RA, 0x0, BASE, pred0
    //| ct ctpr2, ~pred0
    //|>
    //| ins_call
    //| // BASE = new base, RB = func, RD = (nargs+1)*8, PC = caller PC
    //|5: // Grow stack for fallback handler.
    //| disp ctpr1, extern lj_state_growstack // (lua_State *L, int n)
    //|<
    //| addd 0, 0x0, LUA_MINSTACK, CARG2
    //| addd 3, RB, 0x0, CARG1
    //| nop 3
    //|>
    //| call ctpr1, wbs = 0x8
    //|<
    //| addd 2, 0x0, 0x0, CRET1               // Simulate a return 0.
    //| ldd 3, RB, L->base, BASE
    //| disp ctpr2, <1                        // Dumb retry (goes through ff first).
    //| nop 4
    //|>
    //| ct ctpr2
    //|
    //|//-----------------------------------------------------------------------
    //|//-- Special dispatch targets -------------------------------------------
    //|//-----------------------------------------------------------------------
    //|
    //|->vm_record:                           // Dispatch target for recording phase.
    dasm_put(Dst, 6370, Dt1(->maxstack), Dt8(->f), Dt1(->top), 8*LUA_MINSTACK, Dt1(->base), Dt1(->base), Dt1(->top), Dt7(->pc), FRAME_TYPE, LJ_TFUNC, Dt7(->pc), LJ_TFUNC, Dt7(->pc), LUA_MINSTACK, Dt1(->base));
#line 4032 "vm_e2k.dasc"
    //| do_fault
    //|
    //|->vm_rethook:                          // Dispatch target for return hooks.
    //| ldb 0, DISPATCH, DISPATCH_GL(hookmask), RD
    //| cmpandedb 0, RD, HOOK_ACTIVE, pred0
    //| disp ctpr1, >5                        // Hook already active?
    //| ct ctpr1, ~pred0
    //| disp ctpr1, >1
    //| ct ctpr1
    //|
    //|->vm_inshook:                          // Dispatch target for instr/line hooks.
    //| ldb 0, DISPATCH, DISPATCH_GL(hookmask), RD
    //| cmpandedb 0, RD, HOOK_ACTIVE, pred0
    //| disp ctpr1, >5                        // Hook already active?
    //| ct ctpr1, ~pred0
    //| cmpandedb 0, RD, LUA_MASKLINE|LUA_MASKCOUNT, pred0
    //| disp ctpr1, >5
    //| ct ctpr1, pred0
    //| ldw 0, DISPATCH, DISPATCH_GL(hookcount), TMP0
    //| subd 0, TMP0, 0x1, TMP0
    //| stw 2, DISPATCH, DISPATCH_GL(hookcount), TMP0
    //| cmpedb 0, TMP0, 0x0, pred0
    //| disp ctpr1, >1
    //| ct ctpr1, pred0
    //| cmpandedb 0, RD, LUA_MASKLINE, pred0
    //| disp ctpr1, >5
    //| ct ctpr1, pred0
    //|1:
    //| ldd 0, STACK, SAVE_L, RB
    //| std 2, RB, L->base, BASE
    //| addd 0, PC, 0x0, CARG2
    //| addd 0, RB, 0x0, CARG1
    //| // SAVE_PC must hold the _previous_ PC. The callee updates it with PC.
    //| disp ctpr1, extern lj_dispatch_ins    // (lua_State *L, const BCIns *pc)
    //| call ctpr1, wbs = 0x8
    //|3:
    //| ldd 0, RB, L->base, BASE
    //|4:
    //| ldb 0, PC, PC_RA, RA
    //| shld 0, RA, 0x3, RA
    //|5:
    //| ldb 0, PC, PC_OP, TMP1
    //| shld 0, TMP1, 0x3, TMP1
    //| ldh 0, PC, PC_RD, RD
    //| shrd 0, RD, 0x5, RB
    //| shld 0, RD, 0x3, RD
    //| andd 0, RB, 0x7f8, RB
    //| andd 0, RD, 0x7f8, RC
    //| addd 0, DISPATCH, TMP1, TMP1
    //| ldd 0, TMP1, GG_DISP2STATIC, TMP1
    //| movtd 0, TMP1, ctpr1
    //| ct ctpr1
    //|
    //|->cont_hook:                           // Continue from hook yield.
    dasm_put(Dst, 6612, DISPATCH_GL(hookmask), HOOK_ACTIVE, DISPATCH_GL(hookmask), HOOK_ACTIVE, LUA_MASKLINE|LUA_MASKCOUNT, DISPATCH_GL(hookcount), DISPATCH_GL(hookcount), LUA_MASKLINE, Dt1(->base), Dt1(->base), GG_DISP2STATIC);
#line 4086 "vm_e2k.dasc"
    //| do_fault
    //|
    //|->vm_callhook:                         // Dispatch target for call hooks.
    //| std 2, STACK, SAVE_PC, PC
    //|
    //|->vm_hotcall:                          // Hot call counter underflow.
    //| addd 0, BASE, RD, RD
    //| subd 0, RD, 0x8, RD
    //| ldd 0, STACK, SAVE_L, RB
    //| std 2, RB, L->base, BASE
    //| std 2, RB, L->top, RD
    //| addd 0, PC, 0x0, CARG2
    //| addd 0, RB, 0x0, CARG1
    //| disp ctpr1, extern lj_dispatch_call   // (lua_State *L, const BCIns *pc)
    //| call ctpr1, wbs = 0x8
    //| // ASMFunction returned.
    //| addd 0, 0x0, 0x0, TMP0
    //| std 2, STACK, SAVE_PC, TMP0              // Invalidate for subsequent line hook.
    //| ldd 0, RB, L->base, BASE
    //| addd 0, CRET1, 0x0, RA
    //| ldd 0, RB, L->top, RD
    //| subd 0, RD, BASE, RD
    //| movtd 0, RA, ctpr1
    //| ldb 0, PC, PC_RA, RA
    //| shld 0, RA, 0x3, RA
    //| addd 0, RD, 0x8, RD
    //| ct ctpr1
    //|
    //|->vm_profhook:                         // Dispatch target for profiler hook.
    dasm_put(Dst, 6762, Dt1(->base), Dt1(->top), Dt1(->base), Dt1(->top));
#line 4115 "vm_e2k.dasc"
#if LJ_HASPROFILE
    //| ldd 0, STACK, SAVE_L, RB
    //| std 2, RB, L->base, BASE
    //| addd 0, PC, 0x0, CARG2
    //| addd 0, RB, 0x0, CARG1
    //| disp ctpr1, extern lj_dispatch_profile // (lua_State *L, const BCIns *pc)
    //| call ctpr1, wbs = 0x8
    //| ldd 0, RB, L->base, BASE
    //| // HOOK_PROFILE is off again, so re-dispatch to dynamic instruction.
    //| subd 0, PC, 0x4, PC
    //| ins_next
    dasm_put(Dst, 6836, Dt1(->base), Dt1(->base));
#line 4126 "vm_e2k.dasc"
#endif
    //|
    //|//-----------------------------------------------------------------------
    //|//-- Trace exit handler -------------------------------------------------
    //|//-----------------------------------------------------------------------
    //|
    //| // Unsupported
    //|
    //|//-----------------------------------------------------------------------
    //|//-- Math helper functions ----------------------------------------------
    //|//-----------------------------------------------------------------------
    //|
    //|// FP value rounding. Called by math.floor/math.ceil fast functions.
    //|.macro vm_round, name, mode
    //|->name:
    //|<
    //| setwd wsz = 0x4, nfx = 0x1, dbl = 0x0
    //| andd 0, RARG1, U64x(0x7fffffff,0xffffffff), RARG3 // |x|
    //| disp ctpr1, >3
    //|>
    //|<
    //| andd 0, RARG1, U64x(0x80000000,0x00000000), RARG2 // Isolate sign bit.
    //| nop 2
    //|>
    //|<
    //| fcmpnltdb 0, RARG3, U64x(0x43300000,0x00000000), pred1 // No truncation if |x| >= 2^52.
    //| return ctpr3
    //| nop 4
    //|>
    //| ct ctpr1, pred1
    //|.if mode == 2                          // trunc(x)?
    //|<
    //| faddd 0, RARG3, U64x(0x43300000,0x00000000), RARG4 // (|x| + 2^52) - 2^52
    //| nop 3
    //|>
    //|<
    //| fsubd 0, RARG4, U64x(0x43300000,0x00000000), RARG4
    //| nop 3
    //|>
    //|<
    //| fcmpltdb 0, RARG3, RARG4, pred0       // |x| < result?
    //| nop 3
    //|>
    //|<
    //| fsubd 0, RARG4, U64x(0x3ff00000,0x00000000), RARG4, pred0 // if yes, substruct -1.
    //| nop 3
    //|>
    //|<
    //| ord 0, RARG4, RARG2, RARG4            // Merge sign bit back in.
    //| nop 3
    //|>
    //|.else
    //|<
    //| faddd 0, RARG3, U64x(0x43300000,0x00000000), RARG4 // (|x| + 2^52) - 2^52
    //| nop 3
    //|>
    //|<
    //| fsubd 0, RARG4, U64x(0x43300000,0x00000000), RARG4
    //| nop 3
    //|>
    //|<
    //| ord 0, RARG4, RARG2, RARG4            // Merge sign bit back in.
    //| nop 3
    //|>
    //| .if mode == 1                         // ceil(x)?
    //|  addd 0, 0x0, U64x(0xbff00000,0x00000000), RARG2
    //|<
    //|  fcmpnledb 0, RARG1, RARG4, pred0     // x > result?
    //|  nop 3
    //|>
    //| .else                                 // floor(x)?
    //|  addd 0, 0x0, U64x(0x3ff00000,0x00000000), RARG2
    //|<
    //|  fcmpltdb 0, RARG1, RARG4, pred0      // x < result?
    //|  nop 3
    //|>
    //| .endif
    //|<
    //| fsubd 0, RARG4, RARG2, RARG4, pred0   // If yes, substruct +-1.
    //| nop 3
    //|>
    //|.endif
    //|3:
    //|<
    //| addd 0, RARG4, 0x0, RRET1, ~pred1
    //| ct ctpr3
    //|>
    //|.endmacro
    //|
    //| vm_round vm_floor, 0
    //| vm_round vm_ceil,  1
    //| vm_round vm_trunc, 2
    //|
    //|// modulo x%y. Called by BC_MOD* and vm_arith.
    //|->vm_mod:
    //| setwd wsz = 0x4, nfx = 0x1, dbl = 0x0
    //| fdivd 5, RARG1, RARG2, RARG3
    //| andd 0, RARG3, U64x(0x7fffffff,0xffffffff), RARG4 // |x/y|
    //| fcmpnltdb 0, RARG4, U64x(0x43300000,0x00000000), pred0 // |x/y| >= 2^52
    //| disp ctpr1, >2
    //| ct ctpr1, pred0
    //| andd 0, RARG3, U64x(0x80000000,0x00000000), RARG5 // Isolate sign bit.
    //| faddd 0, RARG4, U64x(0x43300000,0x00000000), RARG4 // (|x/y| + 2^52) - 2^52
    //| fsubd 0, RARG4, U64x(0x43300000,0x00000000), RARG4
    //| ord 0, RARG4, RARG5, RARG4               // Merge sign bit back in.
    //| fcmpltdb 0, RARG3, RARG4, pred0
    //| disp ctpr1, >1                        // x/y < result?
    //| ct ctpr1, ~pred0
    //| fsubd 0, RARG4, U64x(0x3ff00000,0x00000000), RARG4 // If yes, subtract 1.0.
    //|1:
    //| fmuld 0, RARG2, RARG4, RARG2
    //| fsubd 0, RARG1, RARG2, RRET1
    //| return ctpr3
    //| ct ctpr3
    //|2:
    //| fmuld 0, RARG2, RARG3, RARG2
    //| fsubd 0, RARG1, RARG2, RRET1
    //| return ctpr3
    //| ct ctpr3
    //|
    //|//-----------------------------------------------------------------------
    //|//-- Miscellaneous functions --------------------------------------------
    //|//-----------------------------------------------------------------------
    //|
    //|//-----------------------------------------------------------------------
    //|//-- Assertions ---------------------------------------------------------
    //|//-----------------------------------------------------------------------
    //|
    //|->assert_bad_for_arg_type:
    //| disp ctpr1, extern raise              // sigtrap
    //| addd 0, 0x5, 0x0, CARG1
    //| call ctpr1, wbs = 0x8
    //|
    //|//-----------------------------------------------------------------------
    //|//-- FFI helper functions -----------------------------------------------
    //|//-----------------------------------------------------------------------
    //|
    //|// Handler for callback functions.
    //|->vm_ffi_callback:
    //|.if FFI
    //| do_fault
    //|.endif
    //|
    //|->cont_ffi_callback:                   // Return from FFI callback.
    //|.if FFI
    //| .type CTSTATE, CTState
#define DtF(_V) (int)(ptrdiff_t)&(((CTState *)0)_V)
#line 4272 "vm_e2k.dasc"
    //| disp ctpr1, extern lj_ccallback_leave // (CTState *cts, TValue *o)
    //|<
    //| ldd 0, STACK, SAVE_L, RA
    //| addd 1, CRET1, 0x0, CARG2
    //| ldd 2, DISPATCH, DISPATCH_GL(ctype_state), PC
    //| nop 2
    //|>
    //|<
    //| std 2, RA, L->base, BASE
    //| std 5, PC, CTSTATE->L, RA
    //|>
    //|<
    //| addd 1, PC, 0x0, CARG1
    //| std 2, RA, L->top, RB
    //| call ctpr1, wbs = 0x8
    //|>
    //|<
    //| ldd 0, PC, CTSTATE->cb.gpr[0], RRET1
    //| return ctpr3
    //|>
    //| ct ctpr3
    //|.endif
    //|
    //|->vm_ffi_call:                         // Call C function via FFI.
    dasm_put(Dst, 6888, DISPATCH_GL(ctype_state), DtF(->L), Dt1(->base), Dt1(->top), DtF(->cb.gpr[0]));
#line 4296 "vm_e2k.dasc"
    //|.if FFI
    //| .type CCSTATE, CCallState
#define Dt10(_V) (int)(ptrdiff_t)&(((CCallState *)0)_V)
#line 4298 "vm_e2k.dasc"
    //|<
    //| setwd wsz = 0x8, nfx = 0x1, dbl = 0x0
    //| setbn rsz = 0x3, rbs = 0x4, rcur = 0x0
    //| disp ctpr1, >2
    //|>
    //|<
    //| ldw 0, RARG1, CCSTATE->spadj, RARG3
    //| ldb 2, RARG1, CCSTATE->nsp, RARG5
    //| disp ctpr2, >1
    //| nop 2
    //|>
    //|<
    //| subd 0, 0x0, RARG3, RARG3
    //| subd 1, RARG5, 0x1, RARG5
    //|>
    //|<
    //| getsp 0, RARG3, RARG4                 // allocate stack for parameters and return value
    //| cmpldb 1, RARG5, 0x0, pred0
    //| nop 2
    //|>
    //| // Copy stack slots.
    //|<
    //| shld 0, RARG5, 0x3, RARG5, ~pred0
    //| ct ctpr1, pred0
    //|>
    //|1:
    //|<
    //| addd 0, RARG5, 0x40, RARG2
    //| addd 1, RARG1, offsetof(CCallState, stack), RARG6
    //|>
    //|<
    //| ldd 0, RARG6, RARG5, RARG6            // read stack parameters
    //| subd 1, RARG5, 0x8, RARG5
    //|>
    //|<
    //| cmpldb 0, RARG5, 0x0, pred0
    //| nop 2
    //|>
    //|<
    //| std 2, RARG4, RARG2, RARG6            // write to allocated stack
    //| ct ctpr2, ~pred0
    //|>
    //|2: // wrire register parameters on stack too
    //|<
    //| ldd 0, RARG1, CCSTATE->gpr[0], CARG1
    //| ldd 2, RARG1, CCSTATE->func, RARG2
    //| ldd 3, RARG1, CCSTATE->gpr[1], CARG2
    //| ldd 5, RARG1, CCSTATE->gpr[2], CARG3
    //|>
    //|<
    //| ldd 0, RARG1, CCSTATE->gpr[3], CARG4
    //| ldd 2, RARG1, CCSTATE->gpr[4], CARG5
    //| ldd 3, RARG1, CCSTATE->gpr[5], CARG6
    //|>
    //|<
    //| ldd 0, RARG1, CCSTATE->gpr[7], CARG8
    //| ldd 2, RARG1, CCSTATE->gpr[6], CARG7
    //|>
    //|<
    //| movtd 0, RARG2, ctpr1
    //| std 2, RARG4, 0x0, CARG1
    //| std 5, RARG4, 0x8, CARG2
    //|>
    //|<
    //| std 2, RARG4, 0x10, CARG3
    //| std 5, RARG4, 0x18, CARG4
    //|>
    //|<
    //| std 2, RARG4, 0x20, CARG5
    //| std 5, RARG4, 0x28, CARG6
    //|>
    //|<
    //| std 2, RARG4, 0x30, CARG7
    //| std 5, RARG4, 0x38, CARG8
    //| call ctpr1, wbs = 0x4
    //|>
    //| // speculatively write from return regs, if result > 8*8 bytes, read all from stack
    //|<
    //| ldw 0, RARG1, CCSTATE->ret_size, RARG2
    //| disp ctpr2, >3
    //| nop 1
    //|>
    //| disp ctpr1, extern memcpy
    //|<
    //| cmpedb 0, RARG2, 0x0, pred0
    //| nop 2
    //|>
    //|<
    //| ldd 0, RARG1, CCSTATE->ret_stack, CARG1, ~pred0
    //| addd 1, RARG2, 0x0, CARG3, ~pred0
    //| addd 2, RARG4, 0x0, CARG2, ~pred0
    //| ct ctpr2, pred0
    //|>
    //| call ctpr1, wbs = 0x4
    //| return ctpr3
    //| ct ctpr3
    //|3:
    //|<
    //| stdsm 2, RARG1, CCSTATE->gpr[0], CRET1
    //| stdsm 5, RARG1, CCSTATE->gpr[1], CRET2
    //| return ctpr3
    //|>
    //|<
    //| stdsm 2, RARG1, CCSTATE->gpr[2], CRET3
    //| stdsm 5, RARG1, CCSTATE->gpr[3], CRET4
    //|>
    //|<
    //| stdsm 2, RARG1, CCSTATE->gpr[4], CRET5
    //| stdsm 5, RARG1, CCSTATE->gpr[5], CRET6
    //|>
    //|<
    //| stdsm 2, RARG1, CCSTATE->gpr[6], CRET7
    //| stdsm 5, RARG1, CCSTATE->gpr[7], CRET8
    //| ct ctpr3
    //|>
    //|.endif
    //|//-----------------------------------------------------------------------
    dasm_put(Dst, 7139, Dt10(->nsp), Dt10(->spadj), offsetof(CCallState, stack), Dt10(->gpr[2]), Dt10(->gpr[1]), Dt10(->func), Dt10(->gpr[0]), Dt10(->gpr[5]), Dt10(->gpr[4]), Dt10(->gpr[3]), Dt10(->gpr[6]), Dt10(->gpr[7]), Dt10(->ret_size), Dt10(->ret_stack), Dt10(->gpr[1]), Dt10(->gpr[0]), Dt10(->gpr[3]), Dt10(->gpr[2]), Dt10(->gpr[5]), Dt10(->gpr[4]), Dt10(->gpr[7]), Dt10(->gpr[6]));
#line 4415 "vm_e2k.dasc"
}

/* Generate the code for a single instruction. */
static void build_ins(BuildCtx *ctx, BCOp op, int defop)
{
    int vk = 0;
    //|=>defop:
    dasm_put(Dst, 7304, defop);
#line 4422 "vm_e2k.dasc"

    switch (op) {

    /* -- Comparison ops ---------------------------------------------------- */

    /* Remember: all ops branch for a true comparison, fall through otherwise. */

    case BC_ISLT: case BC_ISGE: case BC_ISLE: case BC_ISGT:
        //| // ins_AD RA = src1*8, RD = src2*8, JMP with RD = target
        //| // To preserve NaN semantics GE/GT branch on unordered, but LT/LE don't.
        //|<
        //| addd 0, PC, 0x4, CARG3
        //| ldd 3, BASE, RA, RA
        //| ldd 5, BASE, RD, RD
        //| disp ctpr1, ->vmeta_comp
        //| nop 1
        //|>
        //|<
        //| ldh 0, CARG3, PC_RD, CARG2
        //| subd 1, CARG3, BCBIAS_J*4, CARG1
        //|>
        dasm_put(Dst, 7306, BCBIAS_J*4);
#line 4443 "vm_e2k.dasc"
        switch (op) {
        case BC_ISLT:
        //|<
        //| fcmpltdb 3, RA, RD, pred2
        //| sard 4, RA, 0x2f, ITYPE
        //| sard 5, RD, 0x2f, RB
        //|>
        dasm_put(Dst, 7321);
#line 4450 "vm_e2k.dasc"
          break;
        case BC_ISGE:
        //|<
        //| fcmpnltdb 3, RA, RD, pred2
        //| sard 4, RA, 0x2f, ITYPE
        //| sard 5, RD, 0x2f, RB
        //|>
        dasm_put(Dst, 7328);
#line 4457 "vm_e2k.dasc"
          break;
        case BC_ISLE:
        //|<
        //| fcmpledb 3, RA, RD, pred2
        //| sard 4, RA, 0x2f, ITYPE
        //| sard 5, RD, 0x2f, RB
        //|>
        dasm_put(Dst, 7335);
#line 4464 "vm_e2k.dasc"
          break;
        case BC_ISGT:
        //|<
        //| fcmpnledb 3, RA, RD, pred2
        //| sard 4, RA, 0x2f, ITYPE
        //| sard 5, RD, 0x2f, RB
        //|>
        dasm_put(Dst, 7342);
#line 4471 "vm_e2k.dasc"
          break;
        default: break;
        }
        //|<
        //| cmpbsb 3, ITYPE, LJ_TISNUM, pred0
        //| cmpbsb 4, RB, LJ_TISNUM, pred1
        //| nop 2
        //|>
        //|<
        //| shld 0, CARG2, 0x2, CARG2
        //| pass pred0, p0
        //| pass pred1, p1
        //| pass pred2, p2
        //| landp p0, p1, p4
        //| pass p4, pred0
        //| landp p4, p2, p5
        //| landp p4, ~p2, p6
        //| pass p5, pred1
        //| pass p6, pred2
        //|>
        //|<
        //| addd 0, CARG3, 0x0, PC, pred2
        //| addd 1, CARG1, CARG2, PC, pred1
        //| ct ctpr1, ~pred0
        //|>
        //|<
        //| ldw 0, PC, 0x0, TMP0
        //| ldb 2, PC, 0x0, TMP1
        //| addd 1, PC, 0x4, PC
        //| nop 2
        //|>
        //|<
        //| shld 2, TMP1, 0x3, TMP1
        //| shrd 3, TMP0, 0xd, RD
        //| shrd 4, TMP0, 0x15, RB
        //| shrd 5, TMP0, 0x5, RA
        //|>
        //|<
        //| ldd 2, TMP1, DISPATCH, TMP1
        //| andd 3, RD, 0x7fff8, RD
        //| andd 4, RA, 0x7f8, RA
        //| nop 2
        //|>
        //|<
        //| movtd 0, TMP1, ctpr1
        //| andd 3, RB, 0x7f8, RB
        //| andd 4, RD, 0x7f8, RC
        //|>
        //| ct ctpr1
        dasm_put(Dst, 7349, LJ_TISNUM, LJ_TISNUM);
#line 4520 "vm_e2k.dasc"
        break;

    case BC_ISEQV: case BC_ISNEV:
        vk = op == BC_ISEQV;
        //| // ins_AD RA = src1*8, RD = src2*8, JMP with RD = target
        //|<
        //| addd 0, PC, 0x4, PC
        //| ldd 3, BASE, RD, RD
        //| ldd 5, BASE, RA, RA
        //| disp ctpr1, >3
        //| nop 1
        //|>
        //|<
        //| ldh 0, PC, PC_RD, CARG1
        //| subd 2, PC, BCBIAS_J*4, CARG2
        //|>
        //|<
        //| fcmpuoddb 3, RA, RD, pred2
        //| fcmpeqdb 4, RA, RD, pred3
        //| disp ctpr2, >2
        //|>
        //|<
        //| sard 4, RA, 0x2f, ITYPE
        //| sard 5, RD, 0x2f, RB
        //| disp ctpr3, >1
        //|>
        //|<
        //| shld 0, CARG1, 0x2, CARG1
        //| cmpbsb 3, RB, LJ_TISNUM, pred0
        //| cmpbsb 4, ITYPE, LJ_TISNUM, pred1
        //| nop 1
        //|>
        //|<
        //| pass pred0, p0
        //| pass pred1, p1
        //| landp p0, p1, p4
        //| pass p4, pred0
        //|>
        //|<
        //| pass pred2, p0
        //| pass pred3, p1
        //| landp ~p0, p1, p4
        //| pass p4, pred1
        //| ct ctpr1, ~pred0
        //|>
        dasm_put(Dst, 7394, BCBIAS_J*4, LJ_TISNUM, LJ_TISNUM);
#line 4565 "vm_e2k.dasc"
        if (vk) {
        //| ct ctpr2, ~pred1
        //|1: // EQ: Branch to the target.
        //| addd 0, CARG2, CARG1, PC
        //|2: // NE: Fallthrough to next instruction.
        dasm_put(Dst, 7435);
#line 4570 "vm_e2k.dasc"
        } else {
        //| ct ctpr3, pred1
        //|2: // NE: Branch to the target.
        //| addd 0, CARG2, CARG1, PC
        //|1: // EQ: Fallthrough to next instruction.
        dasm_put(Dst, 7442);
#line 4575 "vm_e2k.dasc"
        }
        //|<
        //| ldw 0, PC, 0x0, TMP0
        //| ldb 2, PC, 0x0, TMP1
        //| addd 1, PC, 0x4, PC
        //| nop 2
        //|>
        //|<
        //| shld 2, TMP1, 0x3, TMP1
        //| shrd 3, TMP0, 0xd, RD
        //| shrd 4, TMP0, 0x15, RB
        //| shrd 5, TMP0, 0x5, RA
        //|>
        //|<
        //| ldd 2, TMP1, DISPATCH, TMP1
        //| andd 3, RD, 0x7fff8, RD
        //| andd 4, RA, 0x7f8, RA
        //| nop 2
        //|>
        //|<
        //| movtd 0, TMP1, ctpr1
        //| andd 3, RB, 0x7f8, RB
        //| andd 4, RD, 0x7f8, RC
        //|>
        //| ct ctpr1
        //|3: // Either or both types are not numbers.
        //|.if FFI
        //| disp ctpr1, ->vmeta_equal_cd
        //|<
        //| cmpesb 3, RB, LJ_TCDATA, pred0
        //| cmpesb 4, ITYPE, LJ_TCDATA, pred1
        //| nop 2
        //|>
        //|<
        //| pass pred0, p0
        //| pass pred1, p1
        //| landp ~p0, ~p1, p4
        //| pass p4, pred0
        //|>
        //| ct ctpr1, ~pred0
        //|.endif
        //|<
        //| cmpbesb 1, RB, LJ_TISTABUD, pred2
        //| cmpedb 3, RA, RD, pred0
        //| cmpesb 4, RB, ITYPE, pred1
        //| andd 5, RA, U64x(0x00007fff,0xffffffff), RA
        //| disp ctpr1, ->vmeta_equal
        //|>
        //|<
        //| lddsm 3, RA, TAB->metatable, RB
        //| nop 1
        //|>
        //|<
        //| pass pred1, p0
        //| pass pred2, p1
        //| landp p0, p1, p4
        //| pass p4, pred1
        //| ct ctpr3, pred0                   // Same GCobjs or pvalues?
        //|>
        //|<
        //| ldbsm 3, RB, TAB->nomm, TMP0
        //| cmpedbsm 4, RB, 0x0, pred0
        //| ct ctpr2, ~pred1                  // Not the same type? or Different objects and not table/ud?
        //|>
        //| // Different tables or userdatas. Need to check __eq metamethod.
        //| // Field metatable must be at same offset for GCtab and GCudata!
        //|<
        //| ct ctpr2, pred0                   // No metatable?
        //| nop 1
        //|>
        //|<
        //| cmpandedb 3, TMP0, 1<<MM_eq, pred0
        //| nop 2
        //|>
        //| ct ctpr2, ~pred0                  //  Or 'no __eq' flag set?
        dasm_put(Dst, 7449, LJ_TCDATA, LJ_TCDATA, LJ_TISTABUD, Dt6(->metatable), Dt6(->nomm), 1<<MM_eq);
#line 4650 "vm_e2k.dasc"
        if (vk) {
        //|<
        //| addd 3, 0x0, 0x0, RB              // ne = 0
        //| ct ctpr1                          // Handle __eq metamethod.
        //|>
        dasm_put(Dst, 7527);
#line 4655 "vm_e2k.dasc"
        } else {
        //|<
        //| addd 3, 0x0, 0x1, RB              // ne = 1
        //| ct ctpr1                          // Handle __eq metamethod.
        //|>
        dasm_put(Dst, 7532);
#line 4660 "vm_e2k.dasc"
        }
        break;

    case BC_ISEQS: case BC_ISNES:
        vk = op == BC_ISEQS;
        //| // ins_AND RA = src*8, RD = str_const*8, JMP with RD = target
        //|<
        //| addd 0, PC, 0x4, PC
        //| ldd 3, BASE, RA, RA
        //| subd 4, KBASE, RD, RD
        //| disp ctpr1, >3
        //|>
        //|<
        //| ldh 0, PC, PC_RD, CARG1
        //| ldd 3, RD, 0xfffffff8, RD
        //| disp ctpr2, >2
        //|>
        //|<
        //| subd 0, PC, BCBIAS_J*4, CARG2
        //| disp ctpr3, >1
        //|>
        //|<
        //| sard 3, RA, 0x2f, ITYPE
        //| andd 4, RA, U64x(0x00007fff,0xffffffff), RA
        //|>
        //|<
        //| cmpesb 3, ITYPE, LJ_TSTR, pred1
        //| cmpedb 4, RA, RD, pred0
        //| nop 2
        //|>
        //|<
        //| shld 0, CARG1, 0x2, CARG1
        //| ct ctpr1, ~pred1
        //|>
        dasm_put(Dst, 7537, BCBIAS_J*4, LJ_TSTR);
#line 4694 "vm_e2k.dasc"
        if (vk) {
        //| ct ctpr2, ~pred0
        //|1: // EQ: Branch to the target.
        //| addd 0, CARG2, CARG1, PC
        //|2: // NE: Fallthrough to next instruction.
        //|.if not FFI
        //|3:
        //|.endif
        dasm_put(Dst, 7573);
#line 4702 "vm_e2k.dasc"
        } else {
        //| ct ctpr3, pred0
        //|.if not FFI
        //|3:
        //|.endif
        //|2: // NE: Branch to the target.
        //| addd 0, CARG2, CARG1, PC
        //|1: // EQ: Fallthrough to next instruction.
        dasm_put(Dst, 7580);
#line 4710 "vm_e2k.dasc"
        }
        //|<
        //| ldw 0, PC, 0x0, TMP0
        //| ldb 2, PC, 0x0, TMP1
        //| addd 1, PC, 0x4, PC
        //| nop 2
        //|>
        //|<
        //| shld 2, TMP1, 0x3, TMP1
        //| shrd 3, TMP0, 0xd, RD
        //| shrd 4, TMP0, 0x15, RB
        //| shrd 5, TMP0, 0x5, RA
        //|>
        //|<
        //| ldd 2, TMP1, DISPATCH, TMP1
        //| andd 3, RD, 0x7fff8, RD
        //| andd 4, RA, 0x7f8, RA
        //| nop 2
        //|>
        //|<
        //| movtd 0, TMP1, ctpr1
        //| andd 3, RB, 0x7f8, RB
        //| andd 4, RD, 0x7f8, RC
        //|>
        //| ct ctpr1
        //|.if FFI
        //|3:
        //|<
        //| cmpesb 3, ITYPE, LJ_TCDATA, pred0
        //| disp ctpr1, ->vmeta_equal_cd
        //| nop 2
        //|>
        //| ct ctpr2, ~pred0
        //| ct ctpr1
        //|.endif
        dasm_put(Dst, 7587, LJ_TCDATA);
#line 4745 "vm_e2k.dasc"
        break;

    case BC_ISEQN: case BC_ISNEN:
        vk = op == BC_ISEQN;
        //| // ins_AD RA = src*8, RD = num_const*8, JMP with RD = target
        //|<
        //| addd 0, PC, 0x4, PC
        //| ldd 3, BASE, RA, RA
        //| ldd 5, KBASE, RD, RD
        //| disp ctpr1, >3
        //|>
        //|<
        //| ldh 0, PC, PC_RD, CARG1
        //| subd 1, PC, BCBIAS_J*4, CARG2
        //| disp ctpr3, >1
        //|>
        //|<
        //| disp ctpr2, >2
        //|>
        //|<
        //| fcmpuoddb 3, RD, RA, pred2
        //| fcmpeqdb 4, RD, RA, pred3
        //| sard 5, RA, 0x2f, ITYPE
        //|>
        //|<
        //| cmpbsb 3, ITYPE, LJ_TISNUM, pred0
        //| nop 2
        //|>
        //|<
        //| shld 0, CARG1, 0x2, CARG1
        //| ct ctpr1, ~pred0
        //| pass pred2, p0
        //| pass pred3, p1
        //| landp ~p0, p1, p4
        //| pass p4, pred1
        //|>
        dasm_put(Dst, 7623, BCBIAS_J*4, LJ_TISNUM);
#line 4781 "vm_e2k.dasc"
        if (vk) {
        //| ct ctpr2, ~pred1
        //|1: // EQ: Branch to the target.
        //| addd 0, CARG2, CARG1, PC
        //|2: // NE: Fallthrough to next instruction.
        //|.if not FFI
        //|3:
        //|.endif
        dasm_put(Dst, 7657);
#line 4789 "vm_e2k.dasc"
        } else {
        //| ct ctpr3, pred1
        //|.if not FFI
        //|3:
        //|.endif
        //|2: // NE: Branch to the target.
        //| addd 0, CARG2, CARG1, PC
        //|1: // EQ: Fallthrough to next instruction.
        dasm_put(Dst, 7664);
#line 4797 "vm_e2k.dasc"
        }
        //|<
        //| ldw 0, PC, 0x0, TMP0
        //| ldb 2, PC, 0x0, TMP1
        //| addd 1, PC, 0x4, PC
        //| nop 2
        //|>
        //|<
        //| shld 2, TMP1, 0x3, TMP1
        //| shrd 3, TMP0, 0xd, RD
        //| shrd 4, TMP0, 0x15, RB
        //| shrd 5, TMP0, 0x5, RA
        //|>
        //|<
        //| ldd 2, TMP1, DISPATCH, TMP1
        //| andd 3, RD, 0x7fff8, RD
        //| andd 4, RA, 0x7f8, RA
        //| nop 2
        //|>
        //|<
        //| movtd 0, TMP1, ctpr1
        //| andd 3, RB, 0x7f8, RB
        //| andd 4, RD, 0x7f8, RC
        //|>
        //| ct ctpr1
        //|.if FFI
        //|3:
        //|<
        //| cmpesb 3, ITYPE, LJ_TCDATA, pred0
        //| disp ctpr1, ->vmeta_equal_cd
        //| nop 2
        //|>
        //| ct ctpr2, ~pred0
        //| ct ctpr1
        //|.endif
        dasm_put(Dst, 7671, LJ_TCDATA);
#line 4832 "vm_e2k.dasc"
        break;

    case BC_ISEQP: case BC_ISNEP:
        vk = op == BC_ISEQP;
        //| // ins_AND RA = src*8, RD = primitive_type*8 (~), JMP with RD = target
        //|<
        //| addd 0, PC, 0x4, PC
        //| ldd 3, BASE, RA, RA
        //| shrd 4, RD, 0x3, RD
        //| disp ctpr1, ->vmeta_equal_cd
        //|>
        //|<
        //| ldh 0, PC, PC_RD, CARG1
        //| subd 1, PC, BCBIAS_J*4, CARG2
        //| nop 1
        //|>
        //|<
        //| xord 3, RD, 0xffffffff, RD
        //| sard 4, RA, 0x2f, RA
        //|>
        //|<
        //| shld 0, CARG1, 0x2, CARG1
        //| cmpesb 3, RA, RD, pred0
        //| cmpesb 4, RA, LJ_TCDATA, pred1
        //| nop 1
        //|>
        //|<
        //| pass pred0, p0
        //| pass pred1, p1
        //| landp ~p0, p1, p4
        //| landp ~p0, ~p1, p5
        //| pass p4, pred2
        //| pass p5, pred1
        //|>
        dasm_put(Dst, 7707, BCBIAS_J*4, LJ_TCDATA);
#line 4866 "vm_e2k.dasc"
        if (vk) {
        //|<
        //| ct ctpr1, pred2
        //| addd 0, CARG2, CARG1, PC, pred0
        //|>
        dasm_put(Dst, 7739);
#line 4871 "vm_e2k.dasc"
        } else {
        //|<
        //| ct ctpr1, pred2
        //| addd 0, CARG2, CARG1, PC, pred1
        //|>
        dasm_put(Dst, 7744);
#line 4876 "vm_e2k.dasc"
        }
        //|<
        //| ldw 0, PC, 0x0, TMP0
        //| ldb 2, PC, 0x0, TMP1
        //| addd 1, PC, 0x4, PC
        //| nop 2
        //|>
        //|<
        //| shld 2, TMP1, 0x3, TMP1
        //| shrd 3, TMP0, 0xd, RD
        //| shrd 4, TMP0, 0x15, RB
        //| shrd 5, TMP0, 0x5, RA
        //|>
        //|<
        //| ldd 2, TMP1, DISPATCH, TMP1
        //| andd 3, RD, 0x7fff8, RD
        //| andd 4, RA, 0x7f8, RA
        //| nop 2
        //|>
        //|<
        //| movtd 0, TMP1, ctpr1
        //| andd 3, RB, 0x7f8, RB
        //| andd 4, RD, 0x7f8, RC
        //|>
        //| ct ctpr1
        dasm_put(Dst, 7749);
#line 4901 "vm_e2k.dasc"
        break;

    /* -- Unary test and copy ops ------------------------------------------- */

    case BC_ISTC: case BC_ISFC: case BC_IST: case BC_ISF:
        //| // ins_AD RA = dst*8 or unused, RD = src*8, JMP with RD = target
        //|<
        //| addd 0, PC, 0x4, PC
        //| ldd 3, BASE, RD, RD
        //|>
        //|<
        //| ldh 0, PC, PC_RD, CARG1
        //| subd 1, PC, BCBIAS_J*4, CARG2
        //| nop 1
        //|>
        //|<
        //| sard 3, RD, 0x2f, ITYPE
        //|>
        //|<
        //| shld 0, CARG1, 0x2, CARG1
        //| cmpbsb 3, ITYPE, LJ_TISTRUECOND, pred0
        //| nop 1
        //|>
        dasm_put(Dst, 7774, BCBIAS_J*4, LJ_TISTRUECOND);
#line 4924 "vm_e2k.dasc"
        if (op == BC_IST || op == BC_ISTC) {
        //| addd 0, CARG2, CARG1, PC, pred0
        dasm_put(Dst, 7795);
#line 4926 "vm_e2k.dasc"
        } else {
        //| addd 0, CARG2, CARG1, PC, ~pred0
        dasm_put(Dst, 7800);
#line 4928 "vm_e2k.dasc"
        }
        if (op == BC_ISTC || op == BC_ISFC) {
        //| std 5, BASE, RA, RD
        dasm_put(Dst, 7805);
#line 4931 "vm_e2k.dasc"
        }
        //|<
        //| ldw 0, PC, 0x0, TMP0
        //| ldb 2, PC, 0x0, TMP1
        //| addd 1, PC, 0x4, PC
        //| nop 2
        //|>
        //|<
        //| shld 2, TMP1, 0x3, TMP1
        //| shrd 3, TMP0, 0xd, RD
        //| shrd 4, TMP0, 0x15, RB
        //| shrd 5, TMP0, 0x5, RA
        //|>
        //|<
        //| ldd 2, TMP1, DISPATCH, TMP1
        //| andd 3, RD, 0x7fff8, RD
        //| andd 4, RA, 0x7f8, RA
        //| nop 2
        //|>
        //|<
        //| movtd 0, TMP1, ctpr1
        //| andd 3, RB, 0x7f8, RB
        //| andd 4, RD, 0x7f8, RC
        //|>
        //| ct ctpr1
        dasm_put(Dst, 7808);
#line 4956 "vm_e2k.dasc"
        break;

    case BC_ISTYPE:
        //| // ins_AD RA = src*8, RD = -type*8
        //|<
        //| ldwsm 0, PC, 0x0, TMP0
        //| ldbsm 2, PC, 0x0, TMP1
        //| ldd 3, BASE, RA, RB
        //| disp ctpr1, ->vmeta_istype
        //| nop 2
        //|>
        //|<
        //| shldsm 2, TMP1, 0x3, TMP1
        //| sard 3, RB, 0x2c, RB
        //|>
        //|<
        //| lddsm 2, TMP1, DISPATCH, TMP1
        //| andd 3, RB, U64x(0xffffffff,0xfffffff8), RB
        //|>
        //| addd 3, RB, RD, RB
        //| cmpedb 3, RB, 0x0, pred0
        //|<
        //| movtdsm 0, TMP1, ctpr2
        //| nop 1
        //|>
        //|<
        //| addd 1, PC, 0x4, PC, pred0
        //| shrd 3, TMP0, 0xd, RD, pred0
        //| shrd 4, TMP0, 0x15, RB, pred0
        //| shrd 5, TMP0, 0x5, RA, pred0
        //| ct ctpr1, ~pred0
        //|>
        //|<
        //| andd 3, RD, 0x7fff8, RD
        //| andd 4, RA, 0x7f8, RA
        //|>
        //|<
        //| andd 3, RB, 0x7f8, RB
        //| andd 4, RD, 0x7f8, RC
        //| ct ctpr2
        //|>
        dasm_put(Dst, 7833);
#line 4997 "vm_e2k.dasc"
        break;

    case BC_ISNUM:
        //| // ins_AD RA = src*8, RD = -(TISNUM-1)*8
        //|<
        //| ldwsm 0, PC, 0x0, TMP0
        //| ldbsm 2, PC, 0x0, TMP1
        //| ldd 3, BASE, RA, CARG1
        //| disp ctpr2, ->vmeta_istype
        //| nop 2
        //|>
        //|<
        //| shldsm 2, TMP1, 0x3, TMP1
        //| sard 3, CARG1, 0x2f, ITYPE
        //|>
        //|<
        //| lddsm 2, TMP1, DISPATCH, TMP1
        //| cmpbsb 3, ITYPE, LJ_TISNUM, pred0
        //| nop 2
        //|>
        //|<
        //| movtdsm 0, TMP1, ctpr1
        //| shrd 3, TMP0, 0xd, RD, pred0
        //| shrd 4, TMP0, 0x15, RB, pred0
        //| shrd 5, TMP0, 0x5, RA, pred0
        //| ct ctpr2, ~pred0
        //|>
        //|<
        //| addd 1, PC, 0x4, PC
        //| andd 3, RD, 0x7fff8, RD
        //| andd 4, RA, 0x7f8, RA
        //|>
        //|<
        //| andd 3, RB, 0x7f8, RB
        //| andd 4, RD, 0x7f8, RC
        //| ct ctpr1
        //|>
        dasm_put(Dst, 7879, LJ_TISNUM);
#line 5034 "vm_e2k.dasc"
        break;

    /* -- Unary ops --------------------------------------------------------- */

    case BC_MOV:
        //| // ins_AD RA = dst*8, RD = src*8
        //|<
        //| addd 1, PC, 0x4, PC
        //| ldb 2, PC, 0x0, TMP1
        //| ldd 3, BASE, RD, CARG1
        //| ldw 5, PC, 0x0, TMP0
        //| nop 2
        //|>
        //|<
        //| shld 2, TMP1, 0x3, TMP1
        //| shrd 3, TMP0, 0xd, RD
        //| shrd 4, TMP0, 0x5, RA
        //| std 5, BASE, RA, CARG1
        //|>
        //|<
        //| ldd 2, TMP1, DISPATCH, TMP1
        //| andd 3, RD, 0x7fff8, RD
        //| shrd 4, TMP0, 0x15, RB
        //| nop 2
        //|>
        //|<
        //| movtd 0, TMP1, ctpr1
        //| andd 3, RB, 0x7f8, RB
        //| andd 4, RD, 0x7f8, RC
        //|>
        //|<
        //| andd 3, RA, 0x7f8, RA
        //| ct ctpr1
        //|>
        dasm_put(Dst, 7918);
#line 5068 "vm_e2k.dasc"
        break;

    case BC_NOT:
        //| // ins_AD RA = dst*8, RD = src*8
        //|<
        //| ldw 0, PC, 0x0, TMP0
        //| addd 1, PC, 0x4, PC
        //| ldb 2, PC, 0x0, TMP1
        //| ldd 3, BASE, RD, CARG2
        //| addd 4, 0x0, 0x2, CARG1
        //| addd 5, RA, 0x0, CARG3
        //| nop 2
        //|>
        //|<
        //| shld 2, TMP1, 0x3, TMP1
        //| sard 3, CARG2, 0x2f, CARG2
        //| shrd 4, TMP0, 0xd, RD
        //| shrd 5, TMP0, 0x15, RB
        //|>
        //|<
        //| ldd 2, TMP1, DISPATCH, TMP1
        //| cmpbsb 3, CARG2, LJ_TISTRUECOND, pred0
        //| shrd 4, TMP0, 0x5, RA
        //| andd 5, RD, 0x7fff8, RD
        //| nop 2
        //|>
        //|<
        //| movtd 0, TMP1, ctpr1
        //| subd 3, CARG1, 0x1, CARG1, pred0
        //| andd 4, RB, 0x7f8, RB
        //|>
        //|<
        //| shld 3, CARG1, 0x2f, CARG1
        //| andd 4, RD, 0x7f8, RC
        //|>
        //|<
        //| xord 3, CARG1, 0xffffffff, CARG1
        //| andd 4, RA, 0x7f8, RA
        //|>
        //|<
        //| std 5, BASE, CARG3, CARG1
        //| ct ctpr1
        //|>
        dasm_put(Dst, 7947, LJ_TISTRUECOND);
#line 5111 "vm_e2k.dasc"
        break;

    case BC_UNM:
        //| // ins_AD RA = dst*8, RD = src*8
        //|<
        //| ldwsm 0, PC, 0x0, TMP0
        //| ldbsm 2, PC, 0x0, TMP1
        //| ldd 3, BASE, RD, CARG1
        //| disp ctpr1, ->vmeta_unm
        //| nop 2
        //|>
        //|<
        //| shldsm 2, TMP1, 0x3, TMP1
        //| sard 3, CARG1, 0x2f, ITYPE
        //| xord 4, CARG1, U64x(0x80000000,0x00000000), CARG1
        //| addd 5, RA, 0x0, CARG2
        //|>
        //|<
        //| lddsm 2, TMP1, DISPATCH, TMP1
        //| cmpbsb 3, ITYPE, LJ_TISNUM, pred0
        //| nop 2
        //|>
        //|<
        //| movtdsm 0, TMP1, ctpr2
        //| ct ctpr1, ~pred0
        //|>
        //|<
        //| addd 1, PC, 0x4, PC
        //| shrd 3, TMP0, 0xd, RD
        //| shrd 4, TMP0, 0x15, RB
        //| shrd 5, TMP0, 0x5, RA
        //|>
        //|<
        //| andd 3, RD, 0x7fff8, RD
        //| andd 4, RA, 0x7f8, RA
        //| std 5, BASE, CARG2, CARG1
        //|>
        //|<
        //| andd 3, RB, 0x7f8, RB
        //| andd 4, RD, 0x7f8, RC
        //| ct ctpr2
        //|>
        dasm_put(Dst, 7995, LJ_TISNUM);
#line 5153 "vm_e2k.dasc"
        break;

    case BC_LEN:
        //| // ins_AD RA = dst*8, RD = src*8
        //|<
        //| ldd 3, BASE, RD, RD
        //| ldwsm 0, PC, 0x0, TMP0
        //| ldbsm 2, PC, 0x0, TMP1
        //| disp ctpr1, >2
        //|>
        //|<
        //| disp ctpr2, ->vmeta_len
        //| nop 1
        //|>
        //|<
        //| shldsm 2, TMP1, 0x3, TMP1
        //| sard 3, RD, 0x2f, ITYPE
        //| andd 4, RD, U64x(0x00007fff,0xffffffff), RD
        //| addd 5, RA, 0x0, CARG4
        //|>
        //|<
        //| ldwsm 0, RD, STR->len, CARG2
        //| lddsm 2, TMP1, DISPATCH, TMP1
        //| cmpesb 3, ITYPE, LJ_TSTR, pred0
        //| cmpedb 4, ITYPE, LJ_TTAB, pred1
        //| addd 5, RD, 0x0, CARG1
        //| nop 1
        //|>
        //|<
        //| pass pred0, p0
        //| pass pred1, p1
        //| landp ~p0, ~p1, p4
        //| pass p4, pred2
        //|>
        //| ct ctpr2, pred2
        //|<
        //| istofd 3, CARG2, CARG3
        //| ct ctpr1, ~pred0
        //|>
        //|1:
        //|<
        //| movtd 0, TMP1, ctpr1
        //| addd 1, PC, 0x4, PC
        //| shrd 3, TMP0, 0xd, RD
        //| shrd 4, TMP0, 0x15, RB
        //| shrd 5, TMP0, 0x5, RA
        //|>
        //|<
        //| andd 3, RD, 0x7fff8, RD
        //| andd 4, RA, 0x7f8, RA
        //| std 5, BASE, CARG4, CARG3
        //|>
        //|<
        //| andd 3, RB, 0x7f8, RB
        //| andd 4, RD, 0x7f8, RC
        //| ct ctpr1
        //|>
        //|2:
        dasm_put(Dst, 8038, LJ_TTAB, LJ_TSTR, Dt5(->len));
#line 5211 "vm_e2k.dasc"
#if LJ_52
        //|<
        //| disp ctpr1, >4
        //| ldd 3, RD, TAB->metatable, RB
        //| nop 2
        //|>
        //|<
        //| cmpedb 3, RB, 0x0, pred0
        //| nop 2
        //|>
        //| ct ctpr1, ~pred0
        //|3:
        dasm_put(Dst, 8100, Dt6(->metatable));
#line 5223 "vm_e2k.dasc"
#endif
        //|->BC_LEN_Z:
        //|<
        //| disp ctpr1, extern lj_tab_len     // (GCtab *t)
        //| nop 4
        //|>
        //| call ctpr1, wbs = 0x8
        //| // Length of table returned.
        //|<
        //| ldw 0, PC, 0x0, TMP0
        //| istofd 1, CRET1, CARG3
        //| ldb 2, PC, 0x0, TMP1
        //| disp ctpr2, <1
        //| nop 2
        //|>
        //|<
        //| ldb 0, PC, PC_RA, CARG4
        //| shld 1, TMP1, 0x3, TMP1
        //|>
        //|<
        //| ldd 2, TMP1, DISPATCH, TMP1
        //| nop 1
        //|>
        //|<
        //| shld 3, CARG4, 0x3, CARG4
        //| ct ctpr2
        //|>
        dasm_put(Dst, 8112);
#line 5250 "vm_e2k.dasc"
#if LJ_52
        //|4: // Check for __len.
        //|<
        //| ldb 3, RB, TAB->nomm, CARG5
        //| disp ctpr1, <3
        //| nop 2
        //|>
        //|<
        //| cmpandedb 0, CARG5, 1<<MM_len, pred0
        //| nop 2
        //|>
        //| ct ctpr1, ~pred0
        //| ct ctpr2                          // 'no __len' flag NOT set: check.
        dasm_put(Dst, 8138, Dt6(->nomm), 1<<MM_len);
#line 5263 "vm_e2k.dasc"
#endif
        break;

    /* -- Binary ops -------------------------------------------------------- */

    //|.macro ins_arith_opt, ins, ch
    //|| vk = ((int)op - BC_ADDVN) / (BC_ADDNV-BC_ADDVN);
    //|| switch (vk) {
    //||  case 0:
    //|<
    //| ldbsm 2, PC, 0x0, CARG3
    //| ldd 3, KBASE, RC, TMP1
    //| addd 4, RA, 0x0, CARG1
    //| ldd 5, BASE, RB, TMP0
    //| disp ctpr1, ->vmeta_arith_vn
    //|>
    //| addd 3, PC, 0x0, CARG2
    //| ldwsm 5, CARG2, 0x0, CARG5
    //|<
    //| shld 2, CARG3, 0x3, CARG3
    //| sard 3, TMP0, 0x2f, ITYPE
    //| ins ch, TMP0, TMP1, CARG2
    //|>
    //|<
    //| lddsm 2, CARG3, DISPATCH, CARG3
    //| cmpbsb 3, ITYPE, LJ_TISNUM, pred0
    //| nop 2
    //|>
    //||   break;
    //||  case 1:
    //|<
    //| ldbsm 2, PC, 0x0, CARG3
    //| ldd 3, KBASE, RC, TMP1
    //| addd 4, RA, 0x0, CARG1
    //| ldd 5, BASE, RB, TMP0
    //| disp ctpr1, ->vmeta_arith_nv
    //|>
    //| addd 3, PC, 0x0, CARG2
    //| ldwsm 5, CARG2, 0x0, CARG5
    //|<
    //| shld 2, CARG3, 0x3, CARG3
    //| sard 3, TMP0, 0x2f, ITYPE
    //| ins ch, TMP1, TMP0, CARG2
    //|>
    //|<
    //| lddsm 2, CARG3, DISPATCH, CARG3
    //| cmpbsb 3, ITYPE, LJ_TISNUM, pred0
    //| nop 2
    //|>
    //||   break;
    //||  default:
    //|<
    //| ldbsm 2, PC, 0x0, CARG3
    //| ldd 3, BASE, RC, TMP1
    //| addd 4, RA, 0x0, CARG1
    //| ldd 5, BASE, RB, TMP0
    //| disp ctpr1, ->vmeta_arith_vv
    //|>
    //| addd 3, PC, 0x0, CARG2
    //| ldwsm 5, CARG2, 0x0, CARG5
    //|<
    //| shld 0, CARG3, 0x3, CARG3
    //| sard 3, TMP0, 0x2f, ITYPE
    //| ins ch, TMP0, TMP1, CARG2
    //|>
    //|<
    //| lddsm 2, CARG3, DISPATCH, CARG3
    //| sard 3, TMP1, 0x2f, CARG4
    //|>
    //|<
    //| cmpbsb 3, CARG4, LJ_TISNUM, pred1
    //| cmpbsb 4, ITYPE, LJ_TISNUM, pred0
    //|>
    //|<
    //| pass pred0, p0
    //| pass pred1, p1
    //| landp p0, p1, p4
    //| pass p4, pred0
    //|>
    //||  break;
    //|| }
    //|<
    //| movtd 0, CARG3, ctpr2
    //| addd 1, PC, 0x4, PC, pred0
    //|>
    //|<
    //| shrd 3, CARG5, 0xd, RD, pred0
    //| shrd 4, CARG5, 0x15, RB, pred0
    //| shrd 5, CARG5, 0x5, RA, pred0
    //| ct ctpr1, ~pred0
    //|>
    //|<
    //| andd 3, RD, 0x7fff8, RD
    //| andd 4, RA, 0x7f8, RA
    //|>
    //|<
    //| andd 3, RB, 0x7f8, RB
    //| andd 4, RD, 0x7f8, RC
    //| std 5, BASE, CARG1, CARG2
    //| ct ctpr2
    //|>
    //|.endmacro

    case BC_ADDVN: case BC_ADDNV: case BC_ADDVV:
        //| // ins_ABC RA = dst*8, RB = src1*8, RC = src2*8 or num_const*8
        //| ins_arith_opt faddd, 4
         vk = ((int)op - BC_ADDVN) / (BC_ADDNV-BC_ADDVN);
         switch (vk) {
          case 0:
        dasm_put(Dst, 8155, LJ_TISNUM);
           break;
          case 1:
        dasm_put(Dst, 8178, LJ_TISNUM);
           break;
          default:
        dasm_put(Dst, 8201, LJ_TISNUM, LJ_TISNUM);
          break;
         }
        dasm_put(Dst, 8233);
#line 5369 "vm_e2k.dasc"
        break;

    case BC_SUBVN: case BC_SUBNV: case BC_SUBVV:
        //| // ins_ABC RA = dst*8, RB = src1*8, RC = src2*8 or num_const*8
        //| ins_arith_opt fsubd, 4
         vk = ((int)op - BC_ADDVN) / (BC_ADDNV-BC_ADDVN);
         switch (vk) {
          case 0:
        dasm_put(Dst, 8260, LJ_TISNUM);
           break;
          case 1:
        dasm_put(Dst, 8283, LJ_TISNUM);
           break;
          default:
        dasm_put(Dst, 8306, LJ_TISNUM, LJ_TISNUM);
          break;
         }
        dasm_put(Dst, 8338);
#line 5374 "vm_e2k.dasc"
        break;

    case BC_MULVN: case BC_MULNV: case BC_MULVV:
        //| // ins_ABC RA = dst*8, RB = src1*8, RC = src2*8 or num_const*8
        //| ins_arith_opt fmuld, 4
         vk = ((int)op - BC_ADDVN) / (BC_ADDNV-BC_ADDVN);
         switch (vk) {
          case 0:
        dasm_put(Dst, 8365, LJ_TISNUM);
           break;
          case 1:
        dasm_put(Dst, 8388, LJ_TISNUM);
           break;
          default:
        dasm_put(Dst, 8411, LJ_TISNUM, LJ_TISNUM);
          break;
         }
        dasm_put(Dst, 8443);
#line 5379 "vm_e2k.dasc"
        break;

    case BC_DIVVN: case BC_DIVNV: case BC_DIVVV:
        //| // ins_ABC RA = dst*8, RB = src1*8, RC = src2*8 or num_const*8
        //| ins_arith_opt fdivd, 5
         vk = ((int)op - BC_ADDVN) / (BC_ADDNV-BC_ADDVN);
         switch (vk) {
          case 0:
        dasm_put(Dst, 8470, LJ_TISNUM);
           break;
          case 1:
        dasm_put(Dst, 8493, LJ_TISNUM);
           break;
          default:
        dasm_put(Dst, 8516, LJ_TISNUM, LJ_TISNUM);
          break;
         }
        dasm_put(Dst, 8548);
#line 5384 "vm_e2k.dasc"
        break;

    case BC_MODVN: case BC_MODNV: case BC_MODVV:
        //| // ins_ABC RA = dst*8, RB = src1*8, RC = src2*8 or num_const*8
        switch (op) {
        case BC_MODVN:
        //|<
        //| ldwsm 0, PC, 0x0, TMP0
        //| ldbsm 2, PC, 0x0, TMP1
        //| ldd 3, BASE, RB, CARG1
        //| ldd 5, KBASE, RC, CARG2
        //| disp ctpr1, ->vmeta_arith_vn
        //| nop 2
        //|>
        //|<
        //| shldsm 2, TMP1, 0x3, TMP1
        //| sard 3, CARG1, 0x2f, ITYPE
        //| disp ctpr2, ->vm_mod
        //|>
        //|<
        //| lddsm 2, TMP1, DISPATCH, TMP1
        //| cmpbsb 3, ITYPE, LJ_TISNUM, pred0
        //| nop 2
        //|>
        //|<
        //| ct ctpr1, ~pred0
        //|>
        dasm_put(Dst, 8575, LJ_TISNUM);
#line 5411 "vm_e2k.dasc"
          break;
        case BC_MODNV:
        //|<
        //| ldwsm 0, PC, 0x0, TMP0
        //| ldbsm 2, PC, 0x0, TMP1
        //| ldd 3, KBASE, RC, CARG1
        //| ldd 5, BASE, RB, CARG2
        //| disp ctpr1, ->vmeta_arith_nv
        //| nop 2
        //|>
        //|<
        //| shldsm 2, TMP1, 0x3, TMP1
        //| sard 3, CARG2, 0x2f, ITYPE
        //| disp ctpr2, ->vm_mod
        //|>
        //|<
        //| lddsm 2, TMP1, DISPATCH, TMP1
        //| cmpbsb 3, ITYPE, LJ_TISNUM, pred0
        //| nop 2
        //|>
        //| ct ctpr1, ~pred0
        dasm_put(Dst, 8597, LJ_TISNUM);
#line 5432 "vm_e2k.dasc"
          break;
        case BC_MODVV:
        //|<
        //| ldwsm 0, PC, 0x0, TMP0
        //| ldbsm 2, PC, 0x0, TMP1
        //| ldd 3, BASE, RB, CARG1
        //| ldd 5, BASE, RC, CARG2
        //| disp ctpr1, ->vmeta_arith_vv
        //| nop 2
        //|>
        //|<
        //| shldsm 2, TMP1, 0x3, TMP1
        //| sard 3, CARG1, 0x2f, ITYPE
        //| sard 4, CARG2, 0x2f, CARG3
        //| disp ctpr2, ->vm_mod
        //|>
        //|<
        //| lddsm 2, TMP1, DISPATCH, TMP1
        //| cmpbsb 3, ITYPE, LJ_TISNUM, pred0
        //| cmpbsb 4, CARG3, LJ_TISNUM, pred1
        //| nop 1
        //|>
        //|<
        //| pass pred0, p0
        //| pass pred1, p1
        //| landp p0, p1, p4
        //| pass p4, pred0
        //|>
        //| ct ctpr1, ~pred0
        dasm_put(Dst, 8619, LJ_TISNUM, LJ_TISNUM);
#line 5461 "vm_e2k.dasc"
          break;
        default:
          break;
        }
        //| call ctpr2, wbs = 0x8
        //|<
        //| movtd 0, TMP1, ctpr1
        //| std 5, BASE, RA, CRET1
        //|>
        //|<
        //| addd 1, PC, 0x4, PC
        //| shrd 3, TMP0, 0xd, RD
        //| shrd 4, TMP0, 0x15, RB
        //| shrd 5, TMP0, 0x5, RA
        //|>
        //|<
        //| andd 3, RD, 0x7fff8, RD
        //| andd 4, RA, 0x7f8, RA
        //| nop 2
        //|>
        //|<
        //| andd 3, RB, 0x7f8, RB
        //| andd 4, RD, 0x7f8, RC
        //| ct ctpr1
        //|>
        dasm_put(Dst, 8648);
#line 5486 "vm_e2k.dasc"
        break;

    case BC_POW:
        //| // ins_ABC RA = dst*8, RB = src1*8, RC = src2*8 or num_const*8
        //|<
        //| ldw 0, PC, 0x0, TMP0
        //| ldb 2, PC, 0x0, TMP1
        //| ldd 3, BASE, RB, CARG1
        //| ldd 5, BASE, RC, CARG2
        //| disp ctpr2, ->vmeta_arith_vv
        //| nop 1
        //|>
        //| disp ctpr1, extern pow
        //|<
        //| shld 2, TMP1, 0x3, TMP1
        //| sard 3, CARG1, 0x2f, CARG3
        //| sard 4, CARG2, 0x2f, ITYPE
        //|>
        //|<
        //| ldd 2, TMP1, DISPATCH, TMP1
        //| cmpbsb 3, CARG3, LJ_TISNUM, pred0
        //| cmpbsb 4, ITYPE, LJ_TISNUM, pred1
        //| nop 1
        //|>
        //|<
        //| pass pred0, p0
        //| pass pred1, p1
        //| landp p0, p1, p4
        //| pass p4, pred0
        //|>
        //| ct ctpr2, ~pred0
        //| call ctpr1, wbs = 0x8
        //|<
        //| movtd 0, TMP1, ctpr1
        //| ldb 2, PC, PC_RA, CARG2
        //|>
        //|<
        //| addd 1, PC, 0x4, PC
        //| shrd 3, TMP0, 0xd, RD
        //| shrd 4, TMP0, 0x15, RB
        //| shrd 5, TMP0, 0x5, RA
        //|>
        //|<
        //| andd 3, RD, 0x7fff8, RD
        //| andd 4, RA, 0x7f8, RA
        //|>
        //|<
        //| shld 0, CARG2, 0x3, CARG2
        //| andd 3, RB, 0x7f8, RB
        //| andd 4, RD, 0x7f8, RC
        //|>
        //|<
        //| std 5, BASE, CARG2, CRET1
        //| ct ctpr1
        //|>
        dasm_put(Dst, 8675, LJ_TISNUM, LJ_TISNUM);
#line 5541 "vm_e2k.dasc"
        break;

    case BC_CAT:
        //| // ins_ABC // RA = dst*8, RB = src_start*8, RC = src_end*8
        //|<
        //| ldd 0, STACK, SAVE_L, CARG1
        //| addd 3, BASE, RC, CARG2
        //| addd 4, RC, 0x0, CARG3
        //|>
        //| subd 3, CARG3, RB, CARG3
        //|<
        //| shrd 0, CARG3, 0x3, CARG3
        //| std 2, CARG1, L->base, BASE
        //|>
        //|->BC_CAT_Z:
        //| disp ctpr1, extern lj_meta_cat    // (lua_State *L, TValue *top, int left)
        //|<
        //| std 2, STACK, SAVE_PC, PC
        //| addd 3, CARG1, 0x0, RB
        //| nop 3
        //|>
        //| call ctpr1, wbs = 0x8
        //| // NULL (finished) or TValue * (metamethod) returned.
        //|<
        //| ldwsm 0, PC, 0x0, TMP0
        //| ldbsm 2, PC, 0x0, TMP1
        //| ldb 3, PC, PC_RB, CARG2
        //| ldb 5, PC, PC_RA, CARG3
        //| disp ctpr2, ->vmeta_binop
        //| nop 2
        //|>
        //|<
        //| cmpedb 0, CRET1, 0x0, pred0
        //| shldsm 2, TMP1, 0x3, TMP1
        //| ldd 3, RB, L->base, BASE
        //| shld 4, CARG2, 0x3, CARG2
        //| shld 5, CARG3, 0x3, CARG3
        //| nop 1
        //|>
        //|<
        //| lddsm 2, TMP1, DISPATCH, TMP1
        //| ct ctpr2, ~pred0
        //|>
        //|<
        //| addd 1, PC, 0x4, PC
        //| ldd 3, BASE, CARG2, CARG4
        //| nop 1
        //|>
        //|<
        //| movtd 0, TMP1, ctpr1
        //| shrd 3, TMP0, 0xd, RD
        //| shrd 4, TMP0, 0x15, RB
        //| shrd 5, TMP0, 0x5, RA
        //|>
        //|<
        //| andd 3, RD, 0x7fff8, RD
        //| andd 4, RA, 0x7f8, RA
        //|>
        //|<
        //| andd 3, RB, 0x7f8, RB
        //| andd 4, RD, 0x7f8, RC
        //| std 5, BASE, CARG3, CARG4            // Copy result to Stk[RA] from Stk[RB].
        //| ct ctpr1
        //|>
        dasm_put(Dst, 8734, Dt1(->base), Dt1(->base));
#line 5605 "vm_e2k.dasc"
        break;

    /* -- Constant ops ------------------------------------------------------ */

    case BC_KSTR:
        //| // ins_AND RA = dst*8, RD = str_const*8 (~)
        //|<
        //| ldb 0, PC, 0x0, CARG2
        //| addd 2, PC, 0x4, PC
        //| ldw 3, PC, 0x0, CARG1
        //| subd 4, KBASE, RD, TMP0
        //| addd 5, RA, 0x0, CARG3
        //| nop 1
        //|>
        //|<
        //| ldd 3, TMP0, 0xfffffff8, TMP1
        //| addd 4, 0x0, LJ_TSTR, ITYPE
        //|>
        //|<
        //| shld 2, CARG2, 0x3, CARG2
        //| shrd 3, CARG1, 0xd, RD
        //| shrd 4, CARG1, 0x15, RB
        //| shrd 5, CARG1, 0x5, RA
        //|>
        //|<
        //| ldd 2, CARG2, DISPATCH, CARG2
        //| andd 3, RD, 0x7fff8, RD
        //| andd 4, RA, 0x7f8, RA
        //|>
        //| shld 3, ITYPE, 0x2f, ITYPE
        //|<
        //| andd 3, RB, 0x7f8, RB
        //| andd 4, RD, 0x7f8, RC
        //| ord 5, TMP1, ITYPE, TMP1
        //|>
        //|<
        //| movtd 0, CARG2, ctpr1
        //| std 5, BASE, CARG3, TMP1
        //|>
        //| ct ctpr1
        dasm_put(Dst, 8806, LJ_TSTR);
#line 5645 "vm_e2k.dasc"
        break;

    case BC_KCDATA:
        //|.if FFI
        //| // ins_AND RA = dst*8, RD = cdata_const*8 (~)
        //|<
        //| ldw 0, PC, 0x0, TMP0
        //| addd 1, PC, 0x4, PC
        //| ldb 2, PC, 0x0, TMP1
        //| subd 3, KBASE, RD, CARG1
        //| addd 4, 0x0, LJ_TCDATA, ITYPE
        //| addd 5, RA, 0x0, CARG2
        //|>
        //|<
        //| ldd 3, CARG1, 0xfffffff8, CARG1
        //| shld 4, ITYPE, 0x2f, ITYPE
        //| nop 1
        //|>
        //|<
        //| shld 2, TMP1, 0x3, TMP1
        //| shrd 3, TMP0, 0xd, RD
        //| shrd 4, TMP0, 0x15, RB
        //| shrd 5, TMP0, 0x5, RA
        //|>
        //|<
        //| ldd 2, TMP1, DISPATCH, TMP1
        //| ord 3, CARG1, ITYPE, CARG1
        //| nop 2
        //|>
        //|<
        //| movtd 0, TMP1, ctpr1
        //| std 5, BASE, CARG2, CARG1
        //|>
        //|<
        //| andd 3, RD, 0x7fff8, RD
        //| andd 4, RA, 0x7f8, RA
        //|>
        //|<
        //| andd 3, RB, 0x7f8, RB
        //| andd 4, RD, 0x7f8, RC
        //| ct ctpr1
        //|>
        //|.endif
        dasm_put(Dst, 8848, LJ_TCDATA);
#line 5688 "vm_e2k.dasc"
        break;

    case BC_KSHORT:
        //| // ins_AD RA = dst*8, RD = int16_literal*8
        //|<
        //| ldw 0, PC, 0x0, TMP0
        //| addd 1, PC, 0x4, PC
        //| ldb 2, PC, 0x0, TMP1
        //| shrd 3, RD, 0x3, CARG1
        //| nop 2
        //|>
        //|<
        //| shld 2, TMP1, 0x3, TMP1
        //| sxt 3, 0x1, CARG1, CARG1          // Sign-extend literal.
        //| shrd 4, TMP0, 0xd, RD
        //| addd 5, RA, 0x0, CARG2
        //|>
        //|<
        //| ldd 2, TMP1, DISPATCH, TMP1
        //| idtofd 3, CARG1, CARG1
        //| shrd 4, TMP0, 0x15, RB
        //| shrd 5, TMP0, 0x5, RA
        //| nop 2
        //|>
        //|<
        //| movtd 0, TMP1, ctpr1
        //| andd 3, RD, 0x7fff8, RD
        //| andd 4, RA, 0x7f8, RA
        //|>
        //|<
        //| andd 3, RB, 0x7f8, RB
        //| andd 4, RD, 0x7f8, RC
        //|>
        //|<
        //| std 5, BASE, CARG2, CARG1
        //| ct ctpr1
        //|>
        dasm_put(Dst, 8890);
#line 5725 "vm_e2k.dasc"
        break;

    case BC_KNUM:
        //| // ins_AD RA = dst*8, RD = num_const*8
        //|<
        //| addd 1, PC, 0x4, PC
        //| ldb 2, PC, 0x0, TMP1
        //| ldd 3, KBASE, RD, CARG1
        //| addd 4, RA, 0x0, CARG2
        //| ldw 5, PC, 0x0, TMP0
        //| nop 2
        //|>
        //|<
        //| shld 2, TMP1, 0x3, TMP1
        //| shrd 3, TMP0, 0xd, RD
        //| shrd 4, TMP0, 0x15, RB
        //| shrd 5, TMP0, 0x5, RA
        //|>
        //|<
        //| ldd 2, TMP1, DISPATCH, TMP1
        //| andd 3, RD, 0x7fff8, RD
        //| andd 4, RA, 0x7f8, RA
        //| nop 2
        //|>
        //|<
        //| movtd 0, TMP1, ctpr1
        //| andd 3, RB, 0x7f8, RB
        //| andd 4, RD, 0x7f8, RC
        //|>
        //|<
        //| std 5, BASE, CARG2, CARG1
        //| ct ctpr1
        //|>
        dasm_put(Dst, 8925);
#line 5758 "vm_e2k.dasc"
        break;

    case BC_KPRI:
        //| // ins_AD RA = dst*8, RD = primitive_type*8 (~)
        //|<
        //| ldw 0, PC, 0x0, TMP0
        //| addd 1, PC, 0x4, PC
        //| ldb 2, PC, 0x0, TMP1
        //| shld 3, RD, 0x2c, CARG1
        //| addd 4, RA, 0x0, CARG2
        //| nop 2
        //|>
        //|<
        //| shld 2, TMP1, 0x3, TMP1
        //| shrd 3, TMP0, 0xd, RD
        //| shrd 4, TMP0, 0x15, RB
        //| shrd 5, TMP0, 0x5, RA
        //|>
        //|<
        //| ldd 2, TMP1, DISPATCH, TMP1
        //| andd 3, RD, 0x7fff8, RD
        //| andd 4, RA, 0x7f8, RA
        //| nop 2
        //|>
        //|<
        //| movtd 0, TMP1, ctpr1
        //| andd 3, RB, 0x7f8, RB
        //| andd 4, RD, 0x7f8, RC
        //| xord 5, CARG1, 0xffffffff, CARG1
        //|>
        //|<
        //| std 5, BASE, CARG2, CARG1
        //| ct ctpr1
        //|>
        dasm_put(Dst, 8954);
#line 5792 "vm_e2k.dasc"
        break;

    case BC_KNIL:
        //| // ins_AD RA = dst_start*8, RD = dst_end*8
        //|<
        //| ldw 0, PC, 0x0, TMP0
        //| addd 1, PC, 0x4, PC
        //| ldb 2, PC, 0x0, TMP1
        //| addd 3, BASE, RA, RA
        //| addd 4, BASE, RD, RD
        //| addd 5, 0x0, LJ_TNIL, RB
        //| disp ctpr1, >1
        //| nop 2
        //|>
        //|<
        //| shld 2, TMP1, 0x3, TMP1
        //| addd 3, RA, 0x8, RA
        //|>
        //| ldd 2, TMP1, DISPATCH, TMP1
        //| std 5, RA, 0xfffffff8, RB         // Sets minimum 2 slots
        //|1:
        //|<
        //| addd 3, RA, 0x8, RA
        //| std 5, RA, 0x0, RB
        //|>
        //|<
        //| cmpbedb 3, RA, RD, pred0
        //| nop 2
        //|>
        //|<
        //| movtd 0, TMP1, ctpr2
        //| ct ctpr1, pred0
        //|>
        //|<
        //| shrd 3, TMP0, 0xd, RD
        //| shrd 4, TMP0, 0x15, RB
        //| shrd 5, TMP0, 0x5, RA
        //|>
        //|<
        //| andd 3, RD, 0x7fff8, RD
        //| andd 4, RA, 0x7f8, RA
        //|>
        //|<
        //| andd 3, RB, 0x7f8, RB
        //| andd 4, RD, 0x7f8, RC
        //| ct ctpr2
        //|>
        dasm_put(Dst, 8987, LJ_TNIL);
#line 5839 "vm_e2k.dasc"
        break;

    /* -- Upvalue and function ops ------------------------------------------ */

    case BC_UGET:
        //| // ins_AD RA = dst*8, RD = upvalue*8
        //|<
        //| ldw 0, PC, 0x0, TMP0
        //| addd 1, PC, 0x4, PC
        //| ldb 2, PC, 0x0, TMP1
        //| ldd 3, BASE, 0xfffffff0, RB
        //| addd 4, RA, 0x0, CARG4
        //| nop 2
        //|>
        //|<
        //| shld 2, TMP1, 0x3, TMP1
        //| andd 3, RB, U64x(0x00007fff,0xffffffff), RB
        //| shrd 4, TMP0, 0x5, RA
        //|>
        //|<
        //| ldd 2, TMP1, DISPATCH, TMP1
        //| addd 3, RB, RD, CARG1
        //| shrd 4, TMP0, 0xd, RD
        //| shrd 5, TMP0, 0x15, RB
        //|>
        //|<
        //| ldd 3, CARG1, offsetof(GCfuncL, uvptr), CARG2
        //| andd 4, RD, 0x7fff8, RD
        //| nop 2
        //|>
        //|<
        //| movtd 0, TMP1, ctpr1
        //| ldd 3, CARG2, UPVAL->v, CARG1
        //| andd 4, RA, 0x7f8, RA
        //| nop 2
        //|>
        //|<
        //| ldd 3, CARG1, 0x0, CARG2
        //| andd 4, RB, 0x7f8, RB
        //| andd 5, RD, 0x7f8, RC
        //| nop 2
        //|>
        //|<
        //| std 5, BASE, CARG4, CARG2
        //| ct ctpr1
        //|>
        dasm_put(Dst, 9039, offsetof(GCfuncL, uvptr), DtA(->v));
#line 5885 "vm_e2k.dasc"
        break;

    case BC_USETV:
#define TV2MARKOFS \
 ((int32_t)offsetof(GCupval, marked)-(int32_t)offsetof(GCupval, tv))
        //| // ins_AD RA = upvalue*8, RD = src*8
        //|<
        //| ldw 0, PC, 0x0, TMP0
        //| addd 1, PC, 0x4, PC
        //| ldb 2, PC, 0x0, TMP1
        //| ldd 3, BASE, 0xfffffff0, RB
        //| nop 2
        //|>
        //|<
        //| shld 2, TMP1, 0x3, TMP1
        //| andd 3, RB, U64x(0x00007fff,0xffffffff), RB
        //|>
        //|<
        //| ldd 2, TMP1, DISPATCH, TMP1
        //| ldd 3, BASE, RD, CARG5
        //| addd 4, RB, RA, CARG2
        //| shrd 5, TMP0, 0xd, RD
        //|>
        //|<
        //| ldd 3, CARG2, offsetof(GCfuncL, uvptr), CARG6
        //| shrd 4, TMP0, 0x15, RB
        //| shrd 5, TMP0, 0x5, RA
        //| nop 2
        //|>
        //|<
        //| ldb 3, CARG6, UPVAL->closed, CARG2
        //| andd 4, RD, 0x7fff8, RD
        //| ldd 5, CARG6, UPVAL->v, CARG6
        //| nop 2
        //|>
        //|<
        //| movtd 0, TMP1, ctpr3
        //| ldbsm 3, CARG6, TV2MARKOFS, CARG1
        //| cmpedb 4, CARG2, 0x0, pred0
        //| andd 5, RA, 0x7f8, RA
        //| nop 2
        //|>
        //|<
        //| cmpandedbsm 3, CARG1, LJ_GC_BLACK, pred1
        //| std 5, CARG6, 0x0, CARG5
        //| nop 1
        //|>
        //|<
        //| andd 3, RB, 0x7f8, RB
        //| andd 4, RD, 0x7f8, RC
        //| pass pred0, p0
        //| pass pred1, p1
        //| landp ~p0, ~p1, p4
        //| pass p4, pred0
        //|>
        //|<
        //| addd 2, DISPATCH, GG_DISP2G, CARG1
        //| sard 3, CARG5, 0x2f, CARG4
        //| andd 4, CARG5, U64x(0x00007fff,0xffffffff), CARG5
        //| addd 5, CARG6, 0x0, CARG2
        //| ct ctpr3, ~pred0                  // isblack(uv)?
        //|>
        //|<
        //| ldbsm 3, CARG5, GCOBJ->gch.marked, CARG3
        //| subs 4, CARG4, LJ_TISGCV, CARG4
        //| nop 1
        //|>
        //| disp ctpr1, extern lj_gc_barrieruv // (global_State *g, TValue *tv)
        //|<
        //| cmpbesb 3, CARG4, LJ_TNUMX - LJ_TISGCV, pred0
        //| cmpandedbsm 4, CARG3, LJ_GC_WHITES, pred1
        //| nop 1
        //|>
        //|<
        //| pass pred0, p0                    // tvisgcv(v)
        //| pass pred1, p1                    // iswhite(v)
        //| landp ~p0, ~p1, p4
        //| pass p4, pred0
        //|>
        //| ct ctpr3, ~pred0
        //| // Crossed a write barrier. Move the barrier forward.
        //| call ctpr1, wbs = 0x8
        //| movtd 0, TMP1, ctpr3
        //| ct ctpr3
        dasm_put(Dst, 9084, offsetof(GCfuncL, uvptr), DtA(->v), DtA(->closed), TV2MARKOFS, LJ_GC_BLACK, GG_DISP2G, LJ_TISGCV, Dt4(->gch.marked), LJ_GC_WHITES, LJ_TNUMX - LJ_TISGCV);
#line 5969 "vm_e2k.dasc"
        break;
#undef TV2MARKOFS

    case BC_USETS:
        //| // ins_AND RA = upvalue*8, RD = str_const*8 (~)
        //|<
        //| ldw 0, PC, 0x0, TMP0
        //| addd 1, PC, 0x4, PC
        //| ldb 2, PC, 0x0, TMP1
        //| ldd 3, BASE, 0xfffffff0, CARG4
        //| subd 4, KBASE, RD, CARG2
        //| addd 5, 0x0, LJ_TSTR, ITYPE
        //|>
        //|<
        //| ldd 3, CARG2, 0xfffffff8, CARG3
        //| shld 4, ITYPE, 0x2f, ITYPE
        //| nop 1
        //|>
        //|<
        //| shld 2, TMP1, 0x3, TMP1
        //| andd 3, CARG4, U64x(0x00007fff,0xffffffff), CARG4
        //| shrd 4, TMP0, 0xd, RD
        //|>
        //|<
        //| ldd 2, TMP1, DISPATCH, TMP1
        //| addd 3, CARG4, RA, CARG1
        //| shrd 4, TMP0, 0x5, RA
        //| shrd 5, TMP0, 0x15, RB
        //|>
        //|<
        //| ldd 3, CARG1, offsetof(GCfuncL, uvptr), CARG4
        //| ord 4, ITYPE, CARG3, ITYPE
        //| andd 5, RD, 0x7fff8, RD
        //| nop 2
        //|>
        //|<
        //| movtd 0, TMP1, ctpr3
        //| ldd 3, CARG4, UPVAL->v, CARG5
        //| andd 4, RA, 0x7f8, RA
        //| ldb 5, CARG4, UPVAL->marked, CARG6
        //| nop 1
        //|>
        //|<
        //| andd 3, RB, 0x7f8, RB
        //| andd 4, RD, 0x7f8, RC
        //|>
        //|<
        //| cmpandedb 3, CARG6, LJ_GC_BLACK, pred0
        //| std 5, CARG5, 0x0, ITYPE
        //|>
        //|1:
        //| ct ctpr3, pred0                   // isblack(uv)?
        //|// Check if string is white and ensure upvalue is closed.
        //|<
        //| addd 2, DISPATCH, GG_DISP2G, CARG1
        //| ldb 3, CARG3, GCOBJ->gch.marked, CARG3
        //| addd 4, CARG5, 0x0, CARG2
        //| ldbsm 5, CARG4, UPVAL->closed, CARG6
        //| nop 1
        //|>
        //| disp ctpr1, extern lj_gc_barrieruv // (global_State *g, TValue *tv)
        //|<
        //| cmpandedb 3, CARG3, LJ_GC_WHITES, pred0
        //| cmpedbsm 4, CARG6, 0x0, pred1
        //| nop 1
        //|>
        //|<
        //| pass pred0, p0                    // iswhite(str)?
        //| pass pred1, p1
        //| landp ~p0, ~p1, p4
        //| pass p4, pred0
        //|>
        //| ct ctpr3, ~pred0
        //| // Crossed a write barrier. Move the barrier forward.
        //| call ctpr1, wbs = 0x8
        //| movtd 0, TMP1, ctpr3
        //| ct ctpr3
        dasm_put(Dst, 9182, LJ_TSTR, offsetof(GCfuncL, uvptr), DtA(->marked), DtA(->v), LJ_GC_BLACK, DtA(->closed), Dt4(->gch.marked), GG_DISP2G, LJ_GC_WHITES);
#line 6046 "vm_e2k.dasc"
        break;

    case BC_USETN:
        //| // ins_AD RA = upvalue*8, RD = num_const*8
        //|<
        //| ldw 0, PC, 0x0, TMP0
        //| addd 1, PC, 0x4, PC
        //| ldb 2, PC, 0x0, TMP1
        //| ldd 3, BASE, 0xfffffff0, CARG2
        //| ldd 5, KBASE, RD, CARG1
        //| nop 2
        //|>
        //|<
        //| shld 2, TMP1, 0x3, TMP1
        //| andd 3, CARG2, U64x(0x00007fff,0xffffffff), CARG2
        //| shrd 4, TMP0, 0xd, RD
        //|>
        //|<
        //| ldd 2, TMP1, DISPATCH, TMP1
        //| addd 3, CARG2, RA, CARG3
        //| shrd 4, TMP0, 0x5, RA
        //| andd 5, RD, 0x7fff8, RD
        //|>
        //|<
        //| ldd 3, CARG3, offsetof(GCfuncL, uvptr), CARG2
        //| andd 4, RA, 0x7f8, RA
        //| nop 1
        //|>
        //|<
        //| movtd 0, TMP1, ctpr1
        //| shrd 3, TMP0, 0x15, RB
        //|>
        //|<
        //| ldd 3, CARG2, UPVAL->v, CARG3
        //| nop 2
        //|>
        //|<
        //| andd 3, RB, 0x7f8, RB
        //| andd 4, RD, 0x7f8, RC
        //| std 5, CARG3, 0x0, CARG1
        //| ct ctpr1
        //|>
        dasm_put(Dst, 9274, offsetof(GCfuncL, uvptr), DtA(->v));
#line 6088 "vm_e2k.dasc"
        break;

    case BC_USETP:
        //| // ins_AD RA = upvalue*8, RD = primitive_type*8 (~)
        //|<
        //| ldw 0, PC, 0x0, TMP0
        //| addd 1, PC, 0x4, PC
        //| ldb 2, PC, 0x0, TMP1
        //| ldd 3, BASE, 0xfffffff0, CARG1
        //| shld 4, RD, 0x2c, CARG3
        //| nop 2
        //|>
        //|<
        //| shld 2, TMP1, 0x3, TMP1
        //| andd 3, CARG1, U64x(0x00007fff,0xffffffff), CARG1
        //| xord 4, CARG3, 0xffffffff, CARG3
        //| shrd 5, TMP0, 0xd, RD
        //|>
        //|<
        //| ldd 2, TMP1, DISPATCH, TMP1
        //| addd 3, CARG1, RA, CARG2
        //| shrd 4, TMP0, 0x15, RB
        //| shrd 5, TMP0, 0x5, RA
        //|>
        //|<
        //| ldd 3, CARG2, offsetof(GCfuncL, uvptr), CARG1
        //| andd 4, RD, 0x7fff8, RD
        //| nop 1
        //|>
        //| movtd 0, TMP1, ctpr1
        //|<
        //| ldd 3, CARG1, UPVAL->v, CARG2
        //| andd 4, RA, 0x7f8, RA
        //| nop 2
        //|>
        //|<
        //| andd 3, RB, 0x7f8, RB
        //| andd 4, RD, 0x7f8, RC
        //| std 5, CARG2, 0x0, CARG3
        //| ct ctpr1
        //|>
        dasm_put(Dst, 9319, offsetof(GCfuncL, uvptr), DtA(->v));
#line 6129 "vm_e2k.dasc"
        break;

    case BC_UCLO:
        //| // ins_AD RA = level*8, RD = target*8
        //|<
        //| subd 0, PC, BCBIAS_J*4, PC
        //| shrd 1, RD, 0x1, RD
        //| ldd 2, STACK, SAVE_L, RB
        //| addd 3, BASE, RA, CARG2
        //| disp ctpr2, >1
        //|>
        //| disp ctpr1, extern lj_func_closeuv // (lua_State *L, TValue *level)
        //|<
        //| ldw 0, PC, RD, TMP0
        //| addd 1, PC, RD, PC
        //| ldb 2, PC, RD, TMP1
        //|>
        //|<
        //| ldd 0, RB, L->openupval, CARG3
        //| addd 1, RB, 0x0, CARG1
        //| addd 2, PC, 0x4, PC
        //| nop 1
        //|>
        //|<
        //| shld 1, TMP1, 0x3, TMP1
        //|>
        //|<
        //| ldd 2, TMP1, DISPATCH, TMP1
        //| cmpedb 0, CARG3, 0x0, pred0
        //| nop 2
        //|>
        //|<
        //| ct ctpr2, pred0
        //| std 2, RB, L->base, BASE
        //|>
        //| call ctpr1, wbs = 0x8
        //| ldd 0, RB, L->base, BASE
        //|1:
        //|<
        //| movtd 0, TMP1, ctpr2
        //| shrd 3, TMP0, 0xd, RD
        //| shrd 4, TMP0, 0x15, RB
        //| shrd 5, TMP0, 0x5, RA
        //|>
        //|<
        //| andd 3, RD, 0x7fff8, RD
        //| andd 4, RA, 0x7f8, RA
        //|>
        //|<
        //| andd 3, RB, 0x7f8, RB
        //| andd 4, RD, 0x7f8, RC
        //| ct ctpr2
        //|>
        dasm_put(Dst, 9366, BCBIAS_J*4, Dt1(->openupval), Dt1(->base), Dt1(->base));
#line 6182 "vm_e2k.dasc"
        break;

    case BC_FNEW:
        //| // ins_AND RA = dst*8, RD = proto_const*8 (~) (holding function prototype)
        //| disp ctpr1, extern lj_func_newL_gc // (lua_State *L, GCproto *pt, GCfuncL *parent)
        //|<
        //| ldd 0, STACK, SAVE_L, RB
        //| ldd 3, BASE, 0xfffffff0, CARG3
        //| subd 4, KBASE, RD, TMP0
        //| nop 1
        //|>
        //| ldd 3, TMP0, 0xfffffff8, CARG2       // Fetch GCproto *.
        //|<
        //| addd 0, RB, 0x0, CARG1
        //| std 2, RB, L->base, BASE
        //|>
        //|<
        //| std 2, STACK, SAVE_PC, PC
        //| andd 3, CARG3, U64x(0x00007fff,0xffffffff), CARG3
        //| call ctpr1, wbs = 0x8
        //|>
        //| // GCfuncL * returned.
        //|<
        //| ldb 0, PC, PC_RA, RA
        //| ldb 2, PC, 0x0, TMP1
        //| ldw 3, PC, 0x0, TMP0
        //| ldd 5, RB, L->base, BASE
        //| nop 2
        //|>
        //|<
        //| shld 0, TMP1, 0x3, TMP1
        //| shld 1, RA, 0x3, RA
        //| addd 2, 0x0, LJ_TFUNC, ITYPE
        //| shrd 3, TMP0, 0xd, RD
        //| shrd 4, TMP0, 0x15, RB
        //|>
        //|<
        //| ldd 0, TMP1, DISPATCH, TMP1
        //| shld 1, ITYPE, 0x2f, ITYPE
        //| addd 2, PC, 0x4, PC
        //| andd 3, RD, 0x7fff8, RD
        //|>
        //|<
        //| ord 0, CRET1, ITYPE, CRET1
        //| andd 3, RB, 0x7f8, RB
        //| andd 4, RD, 0x7f8, RC
        //|>
        //|<
        //| std 2, BASE, RA, CRET1
        //| shrd 5, TMP0, 0x5, RA
        //|>
        //|<
        //| movtd 0, TMP1, ctpr1
        //| andd 4, RA, 0x7f8, RA
        //|>
        //| ct ctpr1
        dasm_put(Dst, 9430, Dt1(->base), Dt1(->base), LJ_TFUNC);
#line 6238 "vm_e2k.dasc"
        break;

    /* -- Table ops --------------------------------------------------------- */

    case BC_TNEW:
        //| // ins_AD RA = dst*8, RD = (hbits|asize)*8
        //|<
        //| ldw 0, PC, 0x0, TMP0
        //| ldb 2, PC, 0x0, TMP1
        //| ldd 3, STACK, SAVE_L, RB
        //| disp ctpr2, >1
        //|>
        //|<
        //| ldd 0, DISPATCH, DISPATCH_GL(gc.total), CARG4
        //| ldd 2, DISPATCH, DISPATCH_GL(gc.threshold), CARG5
        //| nop 1
        //|>
        //| disp ctpr1, extern lj_gc_step_fixtop // (lua_State *L)
        //|<
        //| cmpbdb 0, CARG4, CARG5, pred0
        //| shld 1, TMP1, 0x3, TMP1
        //| std 2, STACK, SAVE_PC, PC
        //| addd 3, RB, 0x0, CARG1
        //| std 5, RB, L->base, BASE
        //|>
        //|<
        //| ldd 2, TMP1, DISPATCH, TMP1
        //| nop 1
        //|>
        //|<
        //| shrd 3, RD, 0x3, RD, pred0
        //| ct ctpr2, pred0
        //|>
        //| call ctpr1, wbs = 0x8
        //|<
        //| ldh 3, PC, PC_RD, RD
        //| nop 2
        //|>
        //|1:
        //| disp ctpr1, extern lj_tab_new     // (lua_State *L, int32_t asize, uint32_t hbits)
        //|<
        //| shrd 3, RD, 0xb, CARG3
        //| andd 4, RD, 0x7ff, CARG2
        //| addd 5, RB, 0x0, CARG1
        //|>
        //|<
        //| cmpedb 3, CARG2, 0x7ff, pred0
        //| nop 1
        //|>
        //| addd 3, 0x0, 0x801, CARG2, pred0 // Turn 0x7ff into 0x801.
        //| call ctpr1, wbs = 0x8
        //| // Table * returned.
        //|<
        //| movtd 0, TMP1, ctpr3
        //| addd 1, 0x0, LJ_TTAB, ITYPE
        //| ldb 2, PC, PC_RA, CARG2
        //| ldd 3, RB, L->base, BASE
        //| shrd 4, TMP0, 0xd, RD
        //| shrd 5, TMP0, 0x5, RA
        //| nop 2
        //|>
        //|<
        //| shld 0, CARG2, 0x3, CARG2
        //| shld 1, ITYPE, 0x2f, ITYPE
        //| addd 2, PC, 0x4, PC
        //| shrd 3, TMP0, 0x15, RB
        //|>
        //|<
        //| ord 0, CRET1, ITYPE, CRET1
        //| andd 3, RD, 0x7fff8, RD
        //| andd 4, RA, 0x7f8, RA
        //|>
        //|<
        //| andd 3, RB, 0x7f8, RB
        //| andd 4, RD, 0x7f8, RC
        //| std 5, BASE, CARG2, CRET1
        //| ct ctpr3
        //|>
        dasm_put(Dst, 9499, DISPATCH_GL(gc.threshold), DISPATCH_GL(gc.total), Dt1(->base), Dt1(->base), LJ_TTAB);
#line 6316 "vm_e2k.dasc"
        break;

    case BC_TDUP:
        //| // ins_AND RA = dst*8, RD = table_const*8 (~)
        //|<
        //| ldw 0, PC, 0x0, TMP0
        //| ldb 2, PC, 0x0, TMP1
        //| ldd 3, STACK, SAVE_L, RB
        //| disp ctpr2, >1
        //|>
        //|<
        //| ldd 0, DISPATCH, DISPATCH_GL(gc.total), CARG3
        //| ldd 2, DISPATCH, DISPATCH_GL(gc.threshold), CARG4
        //| nop 1
        //|>
        //| disp ctpr1, extern lj_gc_step_fixtop // (lua_State *L)
        //|<
        //| shld 1, TMP1, 0x3, TMP1
        //| std 2, STACK, SAVE_PC, PC
        //| addd 3, RB, 0x0, CARG1
        //| std 5, RB, L->base, BASE
        //|>
        //|<
        //| cmpbdb 0, CARG3, CARG4, pred0
        //| ldd 2, TMP1, DISPATCH, TMP1
        //| nop 2
        //|>
        //| ct ctpr2, pred0
        //| call ctpr1, wbs = 0x8
        //|<
        //| ldh 3, PC, PC_RD, RD
        //| nop 3
        //|>
        //| shld 3, RD, 0x3, RD
        //|1:
        //| disp ctpr1, extern lj_tab_dup     // (lua_State *L, Table *kt)
        //|<
        //| subd 3, KBASE, RD, CARG3
        //| addd 4, RB, 0x0, CARG1
        //|>
        //|<
        //| ldd 3, CARG3, 0xfffffff8, CARG2
        //| nop 2
        //|>
        //| call ctpr1, wbs = 0x8
        //|<
        //| movtd 0, TMP1, ctpr3
        //| addd 2, PC, 0x4, PC
        //| ldd 3, RB, L->base, BASE
        //| addd 4, 0x0, LJ_TTAB, ITYPE
        //| ldb 5, PC, PC_RA, CARG2
        //| nop 2
        //|>
        //|<
        //| shrd 3, TMP0, 0xd, RD
        //| shrd 4, TMP0, 0x15, RB
        //| shrd 5, TMP0, 0x5, RA
        //|>
        //|<
        //| shld 3, CARG2, 0x3, CARG2
        //| shld 4, ITYPE, 0x2f, ITYPE
        //|>
        //|<
        //| ord 3, CRET1, ITYPE, CRET1
        //| andd 4, RD, 0x7fff8, RD
        //| andd 5, RA, 0x7f8, RA
        //|>
        //|<
        //| andd 3, RB, 0x7f8, RB
        //| andd 4, RD, 0x7f8, RC
        //| std 5, BASE, CARG2, CRET1
        //| ct ctpr3
        //|>
        dasm_put(Dst, 9597, DISPATCH_GL(gc.threshold), DISPATCH_GL(gc.total), Dt1(->base), LJ_TTAB, Dt1(->base));
#line 6389 "vm_e2k.dasc"
        break;

    case BC_GGET:
        //| // ins_AND RA = dst*8, RD = str_const*8 (~)
        //|<
        //| ldb 2, PC, 0x0, CARG4
        //| ldd 3, BASE, 0xfffffff0, RB
        //| addd 4, 0x0, LJ_TSTR, CARG1
        //| subd 5, KBASE, RD, TMP0
        //| nop 1
        //|>
        //| ldw 3, PC, 0x0, CARG3
        //|<
        //| ldd 3, TMP0, 0xfffffff8, RC
        //| andd 4, RB, U64x(0x00007fff,0xffffffff), RB
        //|>
        //|<
        //| shld 0, CARG4, 0x3, CARG4
        //| ldd 3, RB, LFUNC->env, RB
        //| shld 4, CARG1, 0x2f, CARG1
        //| nop 2
        //|>
        //|<
        //| ldw 3, RB, TAB->hmask, TMP0       // RB = GCtab *, RC = GCstr *
        //| ldw 5, RC, STR->sid, TMP1
        //|>
        //|<
        //| ldd 2, CARG4, DISPATCH, CARG4
        //| ldd 3, RB, TAB->node, CARG2
        //| nop 1
        //|>
        //|<
        //| andd 4, TMP0, TMP1, TMP1          // idx = str->sid & tab->hmask
        //|>
        //|<
        //| movtd 0, CARG4, ctpr3
        //| shld 3, TMP1, 0x5, TMP0
        //| shld 4, TMP1, 0x3, TMP1
        //|>
        //| subd 3, TMP0, TMP1, TMP1
        //|<
        //| addd 3, CARG2, TMP1, TMP0         // node = tab->node + (idx*32-idx*8)
        //| ord 4, RC, CARG1, ITYPE
        //|>
        //|<
        //| ldd 3, TMP0, NODE->key, TMP1
        //| lddsm 5, TMP0, NODE->next, CARG5
        //| nop 2
        //|>
        //|1:
        //|<
        //| disp ctpr2, <1
        //| cmpedbsm 3, CARG5, 0x0, pred2
        //| cmpedb 4, TMP1, ITYPE, pred3
        //| lddsm 5, TMP0, NODE->val, CARG4    // Get node value.
        //| nop 1
        //|>
        //|<
        //| disp ctpr1, >2
        //| pass pred3, p0
        //| pass pred2, p1
        //| landp ~p0, ~p1, p4
        //| pass p4, pred4
        //| landp ~p0, p1, p5
        //| pass p5, pred2
        //|>
        //|<
        //| addd 3, CARG5, 0x0, TMP0, ~pred3   // Follow hash chain.
        //| addd 4, CARG4, 0x0, ITYPE, pred3
        //|>
        //|<
        //| ldd 3, TMP0, NODE->key, TMP1, pred4
        //| cmpedbsm 4, ITYPE, LJ_TNIL, pred1
        //| lddsm 5, TMP0, NODE->next, CARG5, pred4
        //| nop 1
        //|>
        //| ct ctpr2, pred4
        //|<
        //| addd 3, 0x0, LJ_TNIL, ITYPE, pred2 // End of hash chain: key not found, nil result.
        //| ct ctpr1, pred2
        //|>
        //|<
        //| addd 2, PC, 0x4, PC, ~pred1
        //| shrd 3, CARG3, 0xd, RD, ~pred1
        //| shrd 4, CARG3, 0x15, RB, ~pred1
        //| std 5, BASE, RA, ITYPE, ~pred1
        //| ct ctpr1, pred1
        //|>
        //|<
        //| andd 3, RD, 0x7fff8, RD
        //| andd 4, RB, 0x7f8, RB
        //| shrd 5, CARG3, 0x5, RA
        //|>
        //|<
        //| andd 4, RD, 0x7f8, RC
        //| andd 5, RA, 0x7f8, RA
        //| ct ctpr3
        //|>
        //|2:
        //|<
        //| disp ctpr1, ->vmeta_tgets
        //| ldd 3, RB, TAB->metatable, TMP0   //  Check for __index if table value is nil
        //| nop 2
        //|>
        //|<
        //| ldbsm 3, TMP0, TAB->nomm, TMP1
        //| cmpedb 4, TMP0, 0x0, pred0
        //| nop 2
        //|>
        //| cmpandedbsm 4, TMP1, 1<<MM_index, pred1
        //|<
        //| pass pred0, p0                    // No metatable: done
        //| pass pred1, p1                    // 'no __index' flag set: done.
        //| landp ~p0, p1, p4
        //| pass p4, pred0
        //|>
        //|<
        //| addd 0, PC, 0x4, PC, ~pred0
        //| shrd 3, CARG3, 0xd, RD, ~pred0
        //| shrd 4, CARG3, 0x15, RB, ~pred0
        //| std 5, BASE, RA, ITYPE, ~pred0
        //| ct ctpr1, pred0
        //|>
        //|<
        //| shrd 3, CARG3, 0x5, RA
        //| andd 4, RB, 0x7f8, RB
        //| andd 5, RD, 0x7fff8, RD
        //|>
        //|<
        //| andd 3, RA, 0x7f8, RA
        //| andd 4, RD, 0x7f8, RC
        //| ct ctpr3
        //|>
        dasm_put(Dst, 9693, LJ_TSTR, Dt7(->env), Dt5(->sid), Dt6(->hmask), Dt6(->node), DtB(->next), DtB(->key), DtB(->val), DtB(->next), LJ_TNIL, DtB(->key), LJ_TNIL, Dt6(->metatable), Dt6(->nomm), 1<<MM_index);
#line 6522 "vm_e2k.dasc"
        break;

    case BC_GSET:
        //| // ins_AND RA = src*8, RD = str_const*8 (~)
        //|<
        //| ldwsm 0, PC, 0x0, CARG5
        //| ldbsm 2, PC, 0x0, CARG6
        //| ldd 3, BASE, 0xfffffff0, RB
        //| subd 4, KBASE, RD, TMP0
        //| disp ctpr1, ->BC_TSETS_Z
        //| nop 2
        //|>
        //|<
        //| shldsm 2, CARG6, 0x3, CARG6
        //| ldd 3, TMP0, 0xfffffff8, RC
        //| andd 4, RB, U64x(0x00007fff,0xffffffff), RB
        //|>
        //|<
        //| ldd 0, RB, LFUNC->env, RB
        //| lddsm 2, CARG6, DISPATCH, CARG6
        //| nop 1
        //|>
        //| ct ctpr1
        dasm_put(Dst, 9852, Dt7(->env));
#line 6545 "vm_e2k.dasc"
        break;

    case BC_TGETV:
        //| // ins_ABC RA = dst*8, RB = table*8, RC = key*8
        //|<
        //| ldw 0, PC, 0x0, CARG3
        //| ldb 2, PC, 0x0, CARG4
        //| ldd 3, BASE, RB, RB
        //| ldd 5, BASE, RC, RC
        //| disp ctpr1, ->vmeta_tgetv
        //| nop 2
        //|>
        //|<
        //| fdtoistr 3, RC, TMP0
        //| disp ctpr3, >1
        //|>
        //|<
        //| sard 3, RB, 0x2f, CARG1
        //| sard 4, RC, 0x2f, ITYPE
        //| andd 5, RB, U64x(0x00007fff,0xffffffff), RB
        //| disp ctpr2, >2
        //|>
        //| istofd 3, TMP0, TMP1
        //|<
        //| shld 2, CARG4, 0x3, CARG4
        //| ldwsm 3, RB, TAB->asize, CARG2
        //| fcmpeqdb 4, RC, TMP1, pred2       // Convert number to int and back and compare.
        //| ldd 5, RB, TAB->array, CARG5
        //|>
        //|<
        //| ldd 2, CARG4, DISPATCH, CARG4
        //| cmpesb 3, CARG1, LJ_TTAB, pred0
        //| cmpbsb 4, ITYPE, LJ_TISNUM, pred1
        //| nop 2
        //|>
        //| ct ctpr1, ~pred0
        //| ct ctpr2, ~pred1                  // Integer key?
        //|<
        //| sxt 3, 0x2, TMP0, RC, pred2
        //| ct ctpr1, ~pred2                  // Generic numeric key? Use fallback.
        //|>
        //|<
        //| cmpbsb 3, RC, CARG2, pred0
        //| shld 4, RC, 0x3, TMP1
        //| nop 2
        //|>
        //|<
        //| addd 3, TMP1, CARG5, RC, pred0
        //| ct ctpr1, ~pred0
        //|>
        //|<
        //| ldd 3, RC, 0x0, ITYPE
        //| nop 2
        //|>
        //|<
        //| cmpedb 0, ITYPE, LJ_TNIL, pred0
        //| nop 2
        //|>
        //| ct ctpr3, ~pred0
        //| // Check for __index if table value is nil.
        //|<
        //| ldd 3, RB, TAB->metatable, TMP0
        //| nop 2
        //|>
        //|<
        //| cmpedb 3, TMP0, 0x0, pred0
        //| ldbsm 5, TMP0, TAB->nomm, TMP0
        //| nop 2
        //|>
        //|<
        //| cmpandedbsm 0, TMP0, 1<<MM_index, pred1
        //| nop 1
        //|>
        //|<
        //| pass pred0, p0
        //| pass pred1, p1
        //| landp ~p0, p1, p4
        //| pass p4, pred0
        //|>
        //| ct ctpr1, pred0                   // 'no __index' flag NOT set: check.
        //|1:
        //|<
        //| movtd 0, CARG4, ctpr1
        //| std 5, BASE, RA, ITYPE
        //|>
        //|<
        //| addd 1, PC, 0x4, PC
        //| shrd 3, CARG3, 0xd, RD
        //| shrd 4, CARG3, 0x15, RB
        //| shrd 5, CARG3, 0x5, RA
        //|>
        //|<
        //| andd 3, RD, 0x7fff8, RD
        //| andd 4, RA, 0x7f8, RA
        //|>
        //|<
        //| andd 3, RB, 0x7f8, RB
        //| andd 4, RD, 0x7f8, RC
        //| ct ctpr1
        //|>
        //|2: // String key?
        //|<
        //| cmpesb 3, ITYPE, LJ_TSTR, pred0
        //| addd 4, 0x0, LJ_TSTR, CARG1
        //| disp ctpr2, ->BC_TGETS_Z
        //| nop 1
        //|>
        //|<
        //| ldd 3, RB, TAB->node, CARG2
        //| andd 4, RC, U64x(0x00007fff,0xffffffff), RC, pred0
        //|>
        //|<
        //| ldw 3, RB, TAB->hmask, TMP0, pred0 // RB = GCtab *, RC = GCstr *
        //| shld 4, CARG1, 0x2f, CARG1
        //| ldw 5, RC, STR->sid, TMP1, pred0
        //| ct ctpr1, ~pred0
        //| nop 2
        //|>
        //|<
        //| andd 4, TMP0, TMP1, TMP1   // idx = str->sid & tab->hmask
        //| ct ctpr2
        //|>
        dasm_put(Dst, 9877, Dt6(->array), Dt6(->asize), LJ_TISNUM, LJ_TTAB, LJ_TNIL, Dt6(->metatable), Dt6(->nomm), 1<<MM_index, LJ_TSTR, LJ_TSTR, Dt6(->node), Dt5(->sid), Dt6(->hmask));
#line 6667 "vm_e2k.dasc"
        break;

    case BC_TGETS:
        //| // ins_ABC RA = dst*8, RB = table*8, RC = str_const*8 (~)
        //|<
        //| ldb 2, PC, 0x0, CARG4
        //| ldd 3, BASE, RB, RB
        //| addd 4, 0x0, LJ_TSTR, CARG1
        //| subd 5, KBASE, RC, TMP0
        //| disp ctpr1, ->vmeta_tgets
        //| nop 2
        //|>
        //|<
        //| ldd 3, TMP0, 0xfffffff8, RC
        //| sard 4, RB, 0x2f, ITYPE
        //| andd 5, RB, U64x(0x00007fff,0xffffffff), RB
        //| nop 1
        //|>
        //|<
        //| shld 0, CARG4, 0x3, CARG4
        //| cmpesb 3, ITYPE, LJ_TTAB, pred0
        //| shld 4, CARG1, 0x2f, CARG1
        //| ldw 5, PC, 0x0, CARG3
        //|>
        //|<
        //| ldw 3, RB, TAB->hmask, TMP0, pred0 // RB = GCtab *, RC = GCstr *
        //| ldw 5, RC, STR->sid, TMP1, pred0
        //|>
        //|<
        //| ldd 2, CARG4, DISPATCH, CARG4
        //| ldd 3, RB, TAB->node, CARG2, pred0
        //| nop 1
        //|>
        //|<
        //| andd 4, TMP0, TMP1, TMP1, pred0   // idx = str->sid & tab->hmask
        //| ct ctpr1, ~pred0
        //|>
        //|->BC_TGETS_Z:
        //|<
        //| movtd 0, CARG4, ctpr3
        //| shld 3, TMP1, 0x5, TMP0
        //| shld 4, TMP1, 0x3, TMP1
        //|>
        //| subd 3, TMP0, TMP1, TMP1
        //|<
        //| addd 3, CARG2, TMP1, TMP0         // node = tab->node + (idx*32-idx*8)
        //| ord 4, RC, CARG1, ITYPE
        //|>
        //|<
        //| ldd 3, TMP0, NODE->key, TMP1
        //| lddsm 5, TMP0, NODE->next, CARG5
        //| nop 2
        //|>
        //|1:
        //|<
        //| disp ctpr2, <1
        //| cmpedbsm 3, CARG5, 0x0, pred2
        //| cmpedb 4, TMP1, ITYPE, pred3
        //| lddsm 5, TMP0, NODE->val, CARG4    // Get node value.
        //| nop 1
        //|>
        //|<
        //| disp ctpr1, >2
        //| pass pred3, p0
        //| pass pred2, p1
        //| landp ~p0, ~p1, p4
        //| pass p4, pred4
        //| landp ~p0, p1, p5
        //| pass p5, pred2
        //|>
        //|<
        //| addd 3, CARG5, 0x0, TMP0, ~pred3   // Follow hash chain.
        //| addd 4, CARG4, 0x0, ITYPE, pred3
        //|>
        //|<
        //| ldd 3, TMP0, NODE->key, TMP1, pred4
        //| cmpedbsm 4, ITYPE, LJ_TNIL, pred1
        //| lddsm 5, TMP0, NODE->next, CARG5, pred4
        //| nop 1
        //|>
        //| ct ctpr2, pred4
        //|<
        //| addd 3, 0x0, LJ_TNIL, ITYPE, pred2 // End of hash chain: key not found, nil result.
        //| ct ctpr1, pred2
        //|>
        //|<
        //| addd 0, PC, 0x4, PC, ~pred1
        //| shrd 3, CARG3, 0xd, RD, ~pred1
        //| shrd 4, CARG3, 0x15, RB, ~pred1
        //| std 5, BASE, RA, ITYPE, ~pred1
        //| ct ctpr1, pred1
        //|>
        //|<
        //| andd 3, RD, 0x7fff8, RD
        //| andd 4, RB, 0x7f8, RB
        //| shrd 5, CARG3, 0x5, RA
        //|>
        //|<
        //| andd 3, RD, 0x7f8, RC
        //| andd 4, RA, 0x7f8, RA
        //| ct ctpr3
        //|>
        //|2:
        //|<
        //| disp ctpr1, ->vmeta_tgets
        //| ldd 3, RB, TAB->metatable, TMP0   //  Check for __index if table value is nil
        //| nop 2
        //|>
        //|<
        //| ldbsm 3, TMP0, TAB->nomm, TMP1
        //| cmpedb 4, TMP0, 0x0, pred0
        //| nop 2
        //|>
        //| cmpandedbsm 4, TMP1, 1<<MM_index, pred1
        //|<
        //| pass pred0, p0                    // No metatable: done
        //| pass pred1, p1                    // 'no __index' flag set: done.
        //| landp ~p0, p1, p4
        //| pass p4, pred0
        //|>
        //|<
        //| addd 0, PC, 0x4, PC, ~pred0
        //| shrd 3, CARG3, 0xd, RD, ~pred0
        //| shrd 4, CARG3, 0x15, RB, ~pred0
        //| std 5, BASE, RA, ITYPE, ~pred0
        //| ct ctpr1, pred0
        //|>
        //|<
        //| andd 3, RD, 0x7fff8, RD
        //| shrd 4, CARG3, 0x5, RA
        //| andd 5, RB, 0x7f8, RB
        //|>
        //|<
        //| andd 3, RA, 0x7f8, RA
        //| andd 4, RD, 0x7f8, RC
        //| ct ctpr3
        //|>
        dasm_put(Dst, 10023, LJ_TSTR, LJ_TTAB, Dt5(->sid), Dt6(->hmask), Dt6(->node), DtB(->next), DtB(->key), DtB(->val), DtB(->next), LJ_TNIL, DtB(->key), LJ_TNIL, Dt6(->metatable), Dt6(->nomm), 1<<MM_index);
#line 6804 "vm_e2k.dasc"
        break;

    case BC_TGETB:
        //| // ins_ABC RA = dst*8, RB = table*8, RC = index*8
        //|<
        //| ldw 0, PC, 0x0, TMP0
        //| ldb 2, PC, 0x0, TMP1
        //| ldd 3, BASE, RB, RB
        //| sard 4, RC, 0x3, CARG2
        //| disp ctpr1, ->vmeta_tgetb
        //| nop 2
        //|>
        //|<
        //| shld 2, TMP1, 0x3, TMP1
        //| sard 3, RB, 0x2f, ITYPE
        //| andd 4, RB, U64x(0x00007fff,0xffffffff), RB
        //| addd 5, RA, 0x0, CARG6
        //|>
        //|<
        //| ldd 2, TMP1, DISPATCH, TMP1
        //| ldwsm 3, RB, TAB->asize, CARG1
        //| lddsm 5, RB, TAB->array, CARG3
        //| nop 1
        //|>
        //|<
        //| lddsm 3, RB, TAB->metatable, CARG4
        //|>
        //|<
        //| cmpesb 3, ITYPE, LJ_TTAB, pred0
        //| cmpbdbsm 4, CARG2, CARG1, pred1
        //| nop 1
        //|>
        //|<
        //| ldbsm 0, CARG4, TAB->nomm, CARG5
        //| pass pred0, p0
        //| pass pred1, p1
        //| landp p0, p1, p4
        //| pass p4, pred0
        //|>
        //|<
        //| addd 3, RC, CARG3, RC, pred0
        //| ct ctpr1, ~pred0
        //|>
        //| // Get array slot.
        //|<
        //| ldd 3, RC, 0x0, ITYPE
        //| nop 1
        //|>
        //|<
        //| movtd 0, TMP1, ctpr3
        //| cmpedbsm 3, CARG4, 0x0, pred1     // Check for __index if table value is nil.
        //|>
        //|<
        //| cmpedb 3, ITYPE, LJ_TNIL, pred0
        //| cmpandedbsm 4, CARG5, 1<<MM_index, pred2
        //| nop 1
        //|>
        //|<
        //| pass pred0, p0
        //| pass pred1, p1
        //| pass pred2, p2
        //| landp p0, ~p1, p4
        //| landp p4, p2, p5
        //| pass p5, pred0
        //|>
        //|<
        //| shrd 3, TMP0, 0xd, RD, ~pred0
        //| shrd 4, TMP0, 0x15, RB, ~pred0
        //| shrd 5, TMP0, 0x5, RA, ~pred0
        //| ct ctpr1, pred0                   // 'no __index' flag NOT set: check.
        //|>
        //|<
        //| addd 1, PC, 0x4, PC
        //| andd 3, RD, 0x7fff8, RD
        //| andd 4, RA, 0x7f8, RA
        //| std 5, BASE, CARG6, ITYPE
        //|>
        //|<
        //| andd 3, RB, 0x7f8, RB
        //| andd 4, RD, 0x7f8, RC
        //| ct ctpr3
        //|>
        dasm_put(Dst, 10190, Dt6(->array), Dt6(->asize), Dt6(->metatable), LJ_TTAB, Dt6(->nomm), 1<<MM_index, LJ_TNIL);
#line 6886 "vm_e2k.dasc"
        break;

    case BC_TGETR:
        //| // ins_ABC RA = dst*8, RB = table*8, RC = key*8
        //|<
        //| ldw 0, PC, 0x0, TMP0
        //| ldb 2, PC, 0x0, TMP1
        //| ldd 3, BASE, RB, RB
        //| addd 4, RA, 0x0, CARG4
        //| ldd 5, BASE, RC, RC
        //| disp ctpr1, ->vmeta_tgetr
        //| nop 2
        //|>
        //|<
        //| shld 2, TMP1, 0x3, TMP1
        //| andd 3, RB, U64x(0x00007fff,0xffffffff), RB
        //| fdtoistr 4, RC, RC
        //|>
        //|<
        //| ldd 2, TMP1, DISPATCH, TMP1
        //| ldw 3, RB, TAB->asize, CARG1
        //| lddsm 5, RB, TAB->array, CARG2
        //| nop 2
        //|>
        //|<
        //| cmpbsb 3, RC, CARG1, pred0
        //| nop 2
        //|>
        //|<
        //| shls 3, RC, 0x3, CARG3, pred0
        //| ct ctpr1, ~pred0                  // Not in array part? Use fallback.
        //|>
        //|<
        //| movtd 0, TMP1, ctpr2
        //| addd 1, PC, 0x4, PC
        //| sxt 3, 0x2, CARG3, CARG3
        //| shrd 4, TMP0, 0xd, RD
        //| shrd 5, TMP0, 0x15, RB
        //|>
        //|<
        //| addd 3, CARG2, CARG3, CARG3
        //| shrd 4, TMP0, 0x5, RA
        //|>
        //|<
        //| ldd 3, CARG3, 0x0, ITYPE          // Get array slot.
        //| andd 4, RD, 0x7fff8, RD
        //| andd 5, RA, 0x7f8, RA
        //| nop 2
        //|>
        //|<
        //| andd 3, RB, 0x7f8, RB
        //| andd 4, RD, 0x7f8, RC
        //| std 5, BASE, CARG4, ITYPE
        //| ct ctpr2
        //|>
        dasm_put(Dst, 10273, Dt6(->array), Dt6(->asize));
#line 6941 "vm_e2k.dasc"
        break;

    case BC_TSETV:
        //| // ins_ABC RA = src*8, RB = table*8, RC = key*8
        //|<
        //| ldwsm 0, PC, 0x0, CARG5
        //| ldbsm 2, PC, 0x0, CARG6
        //| ldd 3, BASE, RB, RB
        //| ldd 5, BASE, RC, RC
        //| disp ctpr1, ->vmeta_tsetv
        //| nop 2
        //|>
        //|<
        //| sard 3, RB, 0x2f, CARG1
        //| fdtoistr 4, RC, TMP0
        //| andd 5, RB, U64x(0x00007fff,0xffffffff), RB
        //| disp ctpr2, ->BC_TSETS_Z
        //|>
        //|<
        //| cmpesb 3, CARG1, LJ_TTAB, pred0
        //| istofd 4, TMP0, TMP1
        //| sard 5, RC, 0x2f, ITYPE
        //| disp ctpr3, >1
        //|>
        //|<
        //| fcmpeqdb 3, RC, TMP1, pred2       // Integer key?  Convert number to int and back and compare.
        //| cmpbsb 4, ITYPE, LJ_TISNUM, pred1
        //| ldwsm 5, RB, TAB->asize, CARG2
        //| nop 1
        //|>
        //|<
        //| lddsm 3, RB, TAB->array, CARG3
        //| cmpesb 4, ITYPE, LJ_TSTR, pred3
        //| lddsm 5, RB, TAB->metatable, TMP1
        //| nop 1
        //|>
        //|<
        //| shldsm 2, CARG6, 0x3, CARG6
        //| pass pred0, p0
        //| pass pred2, p1
        //| pass pred3, p2
        //| landp p0, p1, p4
        //| landp p4, p2, p5
        //| pass p5, pred0
        //|>
        //|<
        //| lddsm 2, CARG6, DISPATCH, CARG6
        //| ct ctpr1, ~pred0
        //|>
        //|<
        //| andd 3, RC, U64x(0x00007fff,0xffffffff), RC, ~pred1
        //| ct ctpr2, ~pred1                  // String key?
        //| sxt 4, 0x2, TMP0, RC, pred2
        //| ldbsm 5, RB, TAB->marked, CARG1
        //|>
        //|<
        //| cmpbsb 3, RC, CARG2, pred0
        //| shld 4, RC, 0x3, RC
        //| ldbsm 5, TMP1, TAB->nomm, CARG4
        //| disp ctpr2, >2
        //| nop 2
        //|>
        //|<
        //| cmpedbsm 3, TMP1, 0x0, pred1
        //| cmpandedbsm 4, CARG4, 1<<MM_newindex, pred2 // 'no __newindex' flag NOT set: check.
        //| addd 5, RC, CARG3, RC, pred0
        //| ct ctpr1, ~pred0
        //|>
        //|<
        //| ldw 3, RC, 0x0, TMP0
        //| nop 2
        //|>
        //|<
        //| cmpesb 3, TMP0, LJ_TNIL, pred0    // Previous value is nil?
        //| nop 1
        //|>
        //|<
        //| pass pred0, p0
        //| pass pred1, p1
        //| pass pred2, p2
        //| landp p0, ~p1, p4
        //| landp p4, p2, p5
        //| pass p5, pred0
        //|>
        //|<
        //| cmpandedbsm 3, CARG1, LJ_GC_BLACK, pred1 // isblack(table)
        //| ct ctpr1, pred0
        //|>
        //|<
        //| movtd 0, CARG6, ctpr1
        //| ct ctpr2, ~pred1
        //|>
        //|1:                                 // Set array slot
        //|<
        //| addd 1, PC, 0x4, PC
        //| ldd 3, BASE, RA, CARG1
        //| shrd 4, CARG5, 0xd, RD
        //| shrd 5, CARG5, 0x5, RA
        //|>
        //|<
        //| andd 3, RD, 0x7fff8, RD
        //| andd 4, RA, 0x7f8, RA
        //|>
        //|<
        //| addd 3, RC, 0x0, CARG2
        //| shrd 4, CARG5, 0x15, RB
        //| andd 5, RD, 0x7f8, RC
        //|>
        //|<
        //| andd 3, RB, 0x7f8, RB
        //| std 5, CARG2, 0x0, CARG1
        //| ct ctpr1
        //|>
        //|2: // Possible table write barrier for the value. Skip valiswhite check.
        //|<
        //| ldd 0, DISPATCH, DISPATCH_GL(gc.grayagain), TMP1
        //| ldb 3, RB, TAB->marked, TMP0
        //| nop 2
        //|>
        //|<
        //| std 2, DISPATCH, DISPATCH_GL(gc.grayagain), RB
        //| andd 3, TMP0, ~LJ_GC_BLACK, TMP0  // black2gray(tab)
        //| std 5, RB, TAB->gclist, TMP1
        //|>
        //|<
        //| stb 5, RB, TAB->marked, TMP0
        //| ct ctpr3
        //|>
        dasm_put(Dst, 10329, LJ_TTAB, Dt6(->asize), LJ_TISNUM, Dt6(->metatable), LJ_TSTR, Dt6(->array), Dt6(->marked), Dt6(->nomm), 1<<MM_newindex, LJ_TNIL, LJ_GC_BLACK, Dt6(->marked), DISPATCH_GL(gc.grayagain), Dt6(->gclist), ~LJ_GC_BLACK, DISPATCH_GL(gc.grayagain), Dt6(->marked));
#line 7069 "vm_e2k.dasc"
        break;

    case BC_TSETS:
        //| // ins_ABC  RA = src*8, RB = table*8, RC = str_const*8 (~)
        //|<
        //| ldwsm 0, PC, 0x0, CARG5
        //| ldbsm 2, PC, 0x0, CARG6
        //| ldd 3, BASE, RB, RB
        //| subd 4, KBASE, RC, TMP0
        //| disp ctpr1, ->vmeta_tsets
        //|>
        //|<
        //| ldd 3, TMP0, 0xfffffff8, RC
        //| nop 1
        //|>
        //|<
        //| shldsm 2, CARG6, 0x3, CARG6
        //| sard 3, RB, 0x2f, ITYPE
        //|>
        //|<
        //| lddsm 2, CARG6, DISPATCH, CARG6
        //| cmpesb 4, ITYPE, LJ_TTAB, pred0
        //| nop 2
        //|>
        //|<
        //| andd 4, RB, U64x(0x00007fff,0xffffffff), RB
        //| ct ctpr1, ~pred0
        //|>
        //|->BC_TSETS_Z:
        //| // RB = GCtab *, RC = GCstr *
        //|<
        //| ldw 3, RB, TAB->hmask, TMP0
        //| addd 4, 0x0, LJ_TSTR, ITYPE
        //| ldw 5, RC, STR->sid, TMP1
        //| disp ctpr1, >1
        //|>
        //|<
        //| shld 4, ITYPE, 0x2f, ITYPE
        //| ldd 5, RB, TAB->node, CARG2
        //| disp ctpr2, >2
        //| nop 1
        //|>
        //|<
        //| andd 3, TMP0, TMP1, TMP1          // idx = str->sid & tab->hmask
        //| ord 4, ITYPE, RC, ITYPE
        //|>
        //|<
        //| smulx 3, TMP1, #NODE, TMP0
        //| addd 4, 0x0, 0x0, CARG1
        //| nop 3
        //|>
        //|<
        //| addd 3, CARG2, TMP0, TMP0
        //| stb 5, RB, TAB->nomm, CARG1       // Clear metamethod cache.
        //| disp ctpr3, ->vmeta_tsets
        //|>
        //|<
        //| ldd 3, TMP0, NODE->key, TMP1
        //| lddsm 5, TMP0, NODE->next, CARG1
        //| nop 2
        //|>
        //|1:
        //|<
        //| lddsm 0, DISPATCH, DISPATCH_GL(gc.grayagain), CARG7
        //| cmpedb 3, TMP1, ITYPE, pred0
        //| cmpedbsm 4, CARG1, 0x0, pred1
        //| lddsm 5, RB, TAB->metatable, CARG3
        //| nop 1
        //|>
        //|<
        //| ldbsm 3, RB, TAB->marked, CARG2
        //| pass pred0, p0
        //| pass pred1, p1
        //| landp ~p0, ~p1, p4
        //| landp ~p0, p1, p5
        //| pass p4, pred2
        //| pass p5, pred3
        //|>
        //|<
        //| ldd 3, CARG1, NODE->key, TMP1, pred2
        //| addd 4, CARG1, 0x0, TMP0, pred2
        //| ldd 5, TMP0, 0x0, TMP1, ~pred2
        //|>
        //|<
        //| ldbsm 3, CARG3, TAB->nomm, CARG4
        //| lddsm 5, TMP0, NODE->next, CARG1, pred2
        //| ct ctpr1, pred2
        //| nop 2
        //|>
        //|<
        //| cmpedb 3, TMP1, LJ_TNIL, pred0
        //| cmpedb 4, CARG3, 0x0, pred1
        //| anddsm 5, CARG2, ~LJ_GC_BLACK, CARG2 // black2gray(tab)
        //| ct ctpr2, pred3
        //|>
        //|<
        //| movtdsm 0, CARG6, ctpr1
        //| cmpandedbsm 3, CARG4, 1<<MM_newindex, pred2
        //| ldbsm 5, RB, TAB->marked, TMP1
        //| nop 1
        //|>
        //|<
        //| pass pred0, p0
        //| pass pred1, p1
        //| pass pred2, p2
        //| landp p0, ~p1, p4
        //| landp p4, p2, p5
        //| pass p5, pred0
        //|>
        //|// Possible table write barrier for the value. Skip valiswhite check.
        //|<
        //| cmpandedb 3, TMP1, LJ_GC_BLACK, pred1
        //| ct ctpr3, pred0                   // 'no __newindex' flag NOT set: check.
        //|>
        //|<
        //| ldd 0, BASE, RA, ITYPE
        //| addd 1, PC, 0x4, PC
        //| shrd 3, CARG5, 0xd, RD
        //| shrd 4, CARG5, 0x5, RA
        //| addd 5, RB, 0x0, TMP1
        //|>
        //|<
        //| std 2, DISPATCH, DISPATCH_GL(gc.grayagain), TMP1, ~pred1
        //| shrd 4, CARG5, 0x15, RB
        //| stb 5, TMP1, TAB->marked, CARG2, ~pred1
        //|>
        //|<
        //| andd 3, RD, 0x7fff8, RD
        //| andd 4, RA, 0x7f8, RA
        //| std 5, TMP1, TAB->gclist, CARG7, ~pred1
        //|>
        //|<
        //| andd 3, RB, 0x7f8, RB
        //| andd 4, RD, 0x7f8, RC
        //| std 5, TMP0, 0x0, ITYPE           // Set node value.
        //| ct ctpr1
        //|>
        //|2:
        dasm_put(Dst, 10481, LJ_TTAB, Dt5(->sid), LJ_TSTR, Dt6(->hmask), Dt6(->node), sizeof(Node), Dt6(->nomm), DtB(->next), DtB(->key), Dt6(->metatable), DISPATCH_GL(gc.grayagain), Dt6(->marked), DtB(->key), DtB(->next), Dt6(->nomm), ~LJ_GC_BLACK, LJ_TNIL, Dt6(->marked), 1<<MM_newindex, LJ_GC_BLACK, Dt6(->marked), DISPATCH_GL(gc.grayagain), Dt6(->gclist));
#line 7207 "vm_e2k.dasc"
        //| // End of hash chain: key not found, add a new one.
        //| // But check for __newindex first.
        //|<
        //| ldd 0, STACK, SAVE_L, CARG1
        //| addd 1, DISPATCH, DISPATCH_GL(tmptv), CARG3
        //| ldd 3, RB, TAB->metatable, TMP0
        //| nop 1
        //|>
        //| disp ctpr1, extern lj_tab_newkey  // (lua_State *L, GCtab *t, TValue *k)
        //|<
        //| addd 0, RB, 0x0, CARG2
        //| ldbsm 3, TMP0, TAB->nomm, TMP1
        //| cmpedb 4, TMP0, 0x0, pred0
        //| nop 2
        //|>
        //|<
        //| cmpandedbsm 0, TMP1, 1<<MM_newindex, pred1
        //| nop 1
        //|>
        //|<
        //| pass pred0, p0
        //| pass pred1, p1
        //| landp ~p0, p1, p4
        //| pass p4, pred0
        //|>
        //|<
        //| ct ctpr3, pred0                   // 'no __newindex' flag NOT set: check.
        //| std 2, CARG1, L->base, BASE
        //|>
        //|<
        //| std 2, CARG3, 0x0, ITYPE
        //| std 5, STACK, SAVE_PC, PC
        //| call ctpr1, wbs = 0x8
        //|>
        //| // Handles write barrier for the new key. TValue * returned.
        //|<
        //| ldd 0, STACK, SAVE_L, TMP1
        //| addd 1, CRET1, 0x0, TMP0
        //| ldb 2, PC, 0x0, CARG6
        //| ldw 3, PC, 0x0, CARG5
        //| ldb 5, PC, PC_RA, RA
        //| nop 2
        //|>
        //|<
        //| ldbsm 0, RB, TAB->marked, CARG2
        //| shld 2, CARG6, 0x3, CARG6
        //| ldd 3, TMP1, L->base, BASE
        //| ldb 5, RB, TAB->marked, CARG1     // Must check write barrier for value.
        //| nop 1
        //|>
        //|<
        //| ldd 0, DISPATCH, DISPATCH_GL(gc.grayagain), CARG3
        //| addd 1, PC, 0x4, PC
        //| ldd 2, CARG6, DISPATCH, CARG6
        //| shld 3, RA, 0x3, RA
        //|>
        //|<
        //| ldd 3, BASE, RA, ITYPE
        //| cmpandedb 4, CARG1, LJ_GC_BLACK, pred0
        //| shrd 5, CARG5, 0xd, RD
        //| nop 2
        //|>
        //|<
        //| movtd 0, CARG6, ctpr1
        //| andd 1, CARG2, ~LJ_GC_BLACK, CARG2 // black2gray(tab)
        //| std 2, DISPATCH, DISPATCH_GL(gc.grayagain), RB, ~pred0
        //| shrd 3, CARG5, 0x5, RA
        //|>
        //|<
        //| std 2, RB, TAB->gclist, CARG3, ~pred0
        //| shrd 4, CARG5, 0x15, RB
        //| stb 5, RB, TAB->marked, CARG2, ~pred0
        //|>
        //|<
        //| andd 3, RD, 0x7fff8, RD
        //| andd 4, RA, 0x7f8, RA
        //|>
        //|<
        //| andd 3, RB, 0x7f8, RB
        //| andd 4, RD, 0x7f8, RC
        //| std 5, TMP0, 0x0, ITYPE
        //| ct ctpr1
        //|>
        dasm_put(Dst, 10653, Dt6(->metatable), DISPATCH_GL(tmptv), Dt6(->nomm), 1<<MM_newindex, Dt1(->base), Dt6(->marked), Dt1(->base), Dt6(->marked), DISPATCH_GL(gc.grayagain), LJ_GC_BLACK, DISPATCH_GL(gc.grayagain), ~LJ_GC_BLACK, Dt6(->marked), Dt6(->gclist));
#line 7290 "vm_e2k.dasc"
        break;

    case BC_TSETB:
        //| // ins_ABC RA = src*8, RB = table*8, RC = byte_literal*8
        //|<
        //| ldwsm 0, PC, 0x0, CARG5
        //| ldbsm 2, PC, 0x0, CARG6
        //| ldd 3, BASE, RB, RB
        //| disp ctpr1, ->vmeta_tsetb
        //| nop 2
        //|>
        //|<
        //| sard 3, RB, 0x2f, ITYPE
        //| andd 4, RB, U64x(0x00007fff,0xffffffff), RB
        //| disp ctpr2, >2
        //|>
        //|<
        //| ldwsm 3, RB, TAB->asize, TMP1
        //| cmpesb 4, ITYPE, LJ_TTAB, pred0
        //| lddsm 5, RB, TAB->array, TMP0
        //| disp ctpr3, >1
        //| nop 1
        //|>
        //|<
        //| lddsm 3, RB, TAB->metatable, CARG2
        //| ldbsm 5, RB, TAB->marked, CARG4
        //|>
        //|<
        //| shld 3, TMP1, 0x3, TMP1, pred0
        //| ct ctpr1, ~pred0
        //|>
        //|<
        //| cmpbdb 3, RC, TMP1, pred0
        //| nop 2
        //|>
        //|<
        //| shldsm 2, CARG6, 0x3, CARG6
        //| cmpedbsm 3, CARG2, 0x0, pred1
        //| addd 4, RC, TMP0, RC, pred0
        //| ldbsm 5, CARG2, TAB->nomm, CARG3
        //| ct ctpr1, ~pred0
        //|>
        //|<
        //| lddsm 2, CARG6, DISPATCH, CARG6
        //| ldd 3, RC, 0x0, TMP0
        //| cmpandedbsm 4, CARG4, LJ_GC_BLACK, pred3
        //| nop 2
        //|>
        //|<
        //| cmpedb 3, TMP0, LJ_TNIL, pred0    // Previous value is nil?
        //| cmpandedbsm 4, CARG3, 1<<MM_newindex, pred2 // 'no __newindex' flag NOT set: check.
        //| nop 1
        //|>
        //|<
        //| pass pred0, p0
        //| pass pred1, p1
        //| pass pred2, p2
        //| landp p0, ~p1, p4
        //| landp p4, p2, p5
        //| pass p5, pred0
        //|>
        //| ct ctpr1, pred0
        //| ct ctpr2, ~pred3                  // isblack(table)?
        //|1: // Set array slot.
        //|<
        //| movtd 0, CARG6, ctpr1
        //| addd 1, PC, 0x4, PC
        //| ldd 3, BASE, RA, ITYPE
        //| shrd 4, CARG5, 0xd, RD
        //| shrd 5, CARG5, 0x15, RB
        //|>
        //|<
        //| shrd 3, CARG5, 0x5, RA
        //| addd 4, RC, 0x0, CARG1
        //|>
        //|<
        //| andd 3, RD, 0x7fff8, RD
        //| andd 4, RA, 0x7f8, RA
        //|>
        //|<
        //| andd 3, RB, 0x7f8, RB
        //| andd 4, RD, 0x7f8, RC
        //| std 5, CARG1, 0x0, ITYPE
        //| ct ctpr1
        //|>
        //|2: // Possible table write barrier for the value. Skip valiswhite check.
        //|<
        //| ldd 0, DISPATCH, DISPATCH_GL(gc.grayagain), TMP1
        //| ldb 3, RB, TAB->marked, CARG1
        //| nop 2
        //|>
        //|<
        //| std 2, DISPATCH, DISPATCH_GL(gc.grayagain), RB
        //| andd 3, CARG1, ~LJ_GC_BLACK, CARG1 // black2gray(tab)
        //| std 5, RB, TAB->gclist, TMP1
        //|>
        //|<
        //| stb 5, RB, TAB->marked, CARG1
        //| ct ctpr3
        //|>
        dasm_put(Dst, 10760, Dt6(->array), LJ_TTAB, Dt6(->asize), Dt6(->marked), Dt6(->metatable), Dt6(->nomm), LJ_GC_BLACK, 1<<MM_newindex, LJ_TNIL, Dt6(->marked), DISPATCH_GL(gc.grayagain), Dt6(->gclist), ~LJ_GC_BLACK, DISPATCH_GL(gc.grayagain), Dt6(->marked));
#line 7390 "vm_e2k.dasc"
        break;

    case BC_TSETR:
        //| // ins_ABC RA = src*8, RB = table*8, RC = key*8
        //|<
        //| ldw 0, PC, 0x0, TMP0
        //| ldb 2, PC, 0x0, TMP1
        //| ldd 3, BASE, RB, RB
        //| ldd 5, BASE, RC, RC
        //| disp ctpr1, ->vmeta_tsetr
        //| nop 2
        //|>
        //|<
        //| ldd 0, DISPATCH, DISPATCH_GL(gc.grayagain), CARG3
        //| shld 2, TMP1, 0x3, TMP1
        //| andd 3, RB, U64x(0x00007fff,0xffffffff), RB
        //| fdtoistr 4, RC, RC
        //| lddsm 5, RB, TAB->array, CARG5
        //|>
        //|<
        //| ldd 2, TMP1, DISPATCH, TMP1
        //| ldb 3, RB, TAB->marked, CARG1
        //| ldbsm 5, RB, TAB->marked, CARG2
        //| nop 2
        //|>
        //|<
        //| cmpandedb 3, CARG1, LJ_GC_BLACK, pred0
        //| anddsm 4, CARG2, ~LJ_GC_BLACK, CARG2 // black2gray(tab)
        //| ldwsm 5, RB, TAB->asize, CARG4
        //| nop 1
        //|>
        //|<
        //| movtd 0, TMP1, ctpr2
        //| std 2, DISPATCH, DISPATCH_GL(gc.grayagain), RB, ~pred0
        //| stb 5, RB, TAB->marked, CARG2, ~pred0
        //|>
        //|<
        //| ldd 3, BASE, RA, ITYPE
        //| cmpbsbsm 4, RC, CARG4, pred1
        //| std 5, RB, TAB->gclist, CARG3, ~pred0
        //|>
        //|<
        //| shls 3, RC, 0x3, CARG1
        //| shrd 4, TMP0, 0x5, RA, pred1
        //| ct ctpr1, ~pred1
        //|>
        //|<
        //| addd 2, PC, 0x4, PC
        //| sxt 3, 0x2, CARG1, CARG1
        //| shrd 4, TMP0, 0xd, RD
        //| andd 5, RA, 0x7f8, RA
        //|>
        //|<
        //| addd 3, CARG5, CARG1, CARG1
        //| shrd 4, TMP0, 0x15, RB
        //| andd 5, RD, 0x7fff8, RD
        //|>
        //|<
        //| andd 3, RB, 0x7f8, RB
        //| andd 4, RD, 0x7f8, RC
        //| std 5, CARG1, 0x0, ITYPE
        //| ct ctpr2
        //|>
        dasm_put(Dst, 10887, Dt6(->array), DISPATCH_GL(gc.grayagain), Dt6(->marked), Dt6(->marked), Dt6(->asize), ~LJ_GC_BLACK, LJ_GC_BLACK, Dt6(->marked), DISPATCH_GL(gc.grayagain), Dt6(->gclist));
#line 7453 "vm_e2k.dasc"
        break;

    case BC_TSETM:
        //| // ins_AD RA = base*8 (table at base-1), RD = num_const*8 (start_index)
        //|1:
        //|<
        //| ldw 0, PC, 0x0, TMP0
        //| ldb 2, PC, 0x0, TMP1
        //| addd 3, BASE, RA, RA
        //| disp ctpr1, >3
        //|>
        //|<
        //| ldd 0, DISPATCH, DISPATCH_GL(gc.grayagain), CARG3
        //| ldw 2, STACK, MULTRES, RD
        //| ldw 3, KBASE, RD, CARG5           // Integer constant is in lo-word.
        //| ldd 5, RA, 0xfffffff8, RB         // Guaranteed to be a table.
        //| disp ctpr2, >4
        //| nop 2
        //|>
        //|<
        //| shld 2, TMP1, 0x3, TMP1
        //| shld 3, CARG5, 0x3, CARG5
        //| andd 4, RB, U64x(0x00007fff,0xffffffff), RB
        //| subd 5, RD, 0x8, RD
        //| disp ctpr3, >2
        //|>
        //|<
        //| ldd 2, TMP1, DISPATCH, TMP1
        //| ldb 3, RB, TAB->marked, CARG1
        //| ldbsm 5, RB, TAB->marked, CARG2
        //|>
        //|<
        //| ldwsm 3, RB, TAB->asize, CARG4
        //| lddsm 5, RB, TAB->array, CARG6
        //| nop 1
        //|>
        //|<
        //| cmpandedb 3, CARG1, LJ_GC_BLACK, pred0
        //| cmpedb 4, RD, 0x0, pred1
        //| andd 5, CARG2, ~LJ_GC_BLACK, CARG2 // black2gray(tab)
        //| nop 1
        //|>
        //|<
        //| std 2, DISPATCH, DISPATCH_GL(gc.grayagain), RB, ~pred0
        //| addd 3, RD, CARG5, RD              // Compute needed size.
        //| shldsm 4, CARG4, 0x3, CARG4
        //| stb 5, RB, TAB->marked, CARG2, ~pred0
        //|>
        //|<
        //| cmpbedbsm 3, RD, CARG4, pred2
        //| std 5, RB, TAB->gclist, CARG3, ~pred0
        //| ct ctpr1, pred1                   // Nothing to copy?
        //| nop 2
        //|>
        //|<
        //| subd 3, RD, CARG5, RD, pred2
        //| addd 4, CARG5, CARG6, CARG5, pred2
        //| ct ctpr2, ~pred2                  // Doesn't fit into array part?
        //|>
        //|2: // Copy result slots to table.
        //|<
        //| ldd 3, RA, 0x0, RB
        //| addd 4, RA, 0x8, RA
        //| subd 5, RD, 0x8, RD
        //|>
        //|<
        //| cmpedb 3, RD, 0x0, pred0
        //| nop 2
        //|>
        //|<
        //| addd 4, CARG5, 0x8, CARG5
        //| std 5, CARG5, 0x0, RB
        //| ct ctpr3, ~pred0
        //|>
        //|3:
        //|<
        //| movtd 0, TMP1, ctpr1
        //| addd 1, PC, 0x4, PC
        //| shrd 3, TMP0, 0xd, RD
        //| shrd 4, TMP0, 0x15, RB
        //| shrd 5, TMP0, 0x5, RA
        //|>
        //|<
        //| andd 3, RD, 0x7fff8, RD
        //| andd 4, RA, 0x7f8, RA
        //|>
        //|<
        //| andd 3, RB, 0x7f8, RB
        //| andd 4, RD, 0x7f8, RC
        //| ct ctpr1
        //|>
        //|4: // Need to resize array part.
        //| disp ctpr1, extern lj_tab_reasize // (lua_State *L, GCtab *t, int nasize)
        //|<
        //| ldd 0, STACK, SAVE_L, CARG1
        //| addd 1, RB, 0x0, CARG2
        //| addd 2, RD, 0x0, CARG3
        //| nop 2
        //|>
        //|<
        //| shrd 0, CARG3, 0x3, CARG3
        //| std 2, CARG1, L->base, BASE
        //| addd 3, CARG1, 0x0, RB
        //|>
        //|<
        //| std 2, STACK, SAVE_PC, PC
        //| call ctpr1, wbs = 0x8
        //|>
        //|<
        //| ldh 3, PC, PC_RD, RD              // Restore RD.
        //| ldb 5, PC, PC_RA, RA              // Restore RA.
        //| disp ctpr2, <1
        //|>
        //|<
        //| ldd 3, RB, L->base, BASE
        //| nop 2
        //|>
        //|<
        //| shld 4, RA, 0x3, RA
        //| shld 5, RD, 0x3, RD
        //| ct ctpr2                          // Retry.
        //|>
        dasm_put(Dst, 10969, DISPATCH_GL(gc.grayagain), Dt6(->marked), Dt6(->marked), Dt6(->array), Dt6(->asize), ~LJ_GC_BLACK, LJ_GC_BLACK, Dt6(->marked), DISPATCH_GL(gc.grayagain), Dt6(->gclist), Dt1(->base), Dt1(->base));
#line 7575 "vm_e2k.dasc"
        break;

    /* -- Calls and vararg handling ----------------------------------------- */

    case BC_CALL: case BC_CALLM:
        //| // ins_A_C  RA = base*8, (RB = (nresults+1)*8,) RD = (nargs+1)*8 | extra_nargs*8
        //|<
        //| ldw 2, STACK, MULTRES, TMP0
        //| ldd 3, BASE, RA, RB
        //| addd 4, RA, 0x10, RA
        //| disp ctpr1, ->vmeta_call
        //| nop 1
        //|>
        //| andd 4, RD, 0x7f8, RD
        dasm_put(Dst, 11115);
#line 7589 "vm_e2k.dasc"
        if (op == BC_CALLM) {
          //|<
          //| sard 3, RB, 0x2f, ITYPE
          //| andd 4, RB, U64x(0x00007fff,0xffffffff), RB
          //| addd 5, RD, TMP0, RD
          //|>
          dasm_put(Dst, 11127);
#line 7595 "vm_e2k.dasc"
        } else {
          //|<
          //| sard 3, RB, 0x2f, ITYPE
          //| andd 4, RB, U64x(0x00007fff,0xffffffff), RB
          //|>
          dasm_put(Dst, 11136);
#line 7600 "vm_e2k.dasc"
        }
        //|<
        //| cmpesb 3, ITYPE, LJ_TFUNC, pred0
        //| addd 4, BASE, RA, CARG1
        //| lddsm 5, RB, LFUNC->pc, CARG2
        //| nop 1
        //|>
        //|<
        //| addd 3, BASE, RA, BASE, pred0
        //| addd 4, BASE, RA, RA, ~pred0
        //|>
        //|<
        //| ldw 3, CARG2, 0x0, RA, pred0
        //| addd 4, CARG2, 0x4, PC, pred0
        //| std 5, CARG1, 0xfffffff8, PC, pred0
        //| nop 1
        //|>
        //| ct ctpr1, ~pred0
        //|<
        //| andd 3, RA, 0xff, TMP0
        //| shrd 4, RA, 0x5, RA
        //|>
        //|<
        //| andd 3, RA, 0x7f8, RA
        //| shld 4, TMP0, 0x3, TMP0                      // jmp to [DISPATCH+OP*8]
        //|>
        //|<
        //| ldd 3, TMP0, DISPATCH, TMP0
        //| nop 2
        //|>
        //| movtd 0, TMP0, ctpr1
        //| ct ctpr1
        dasm_put(Dst, 11143, Dt7(->pc), LJ_TFUNC);
#line 7632 "vm_e2k.dasc"
        break;

    case BC_CALLMT:
        //| // ins_AD RA = base*8, RD = extra_nargs*8
        //|<
        //| ldw 0, STACK, MULTRES, TMP0
        //| nop 2
        //|>
        //| addd 3, RD, TMP0, RD
        //| // Fall through. Assumes BC_CALLT follows and ins AD is a no-op.
        dasm_put(Dst, 11180);
#line 7642 "vm_e2k.dasc"
        break;

    case BC_CALLT:
        //| // ins_AD RA = base*8, RD = (nargs+1)*8
        //|<
        //| ldd 3, BASE, RA, RB
        //| addd 4, BASE, RA, RA
        //| addd 5, BASE, 0x0, KBASE          // Use KBASE for move + vmeta_call hint.
        //| disp ctpr1, ->vmeta_call
        //| nop 2
        //|>
        //|<
        //| sard 3, RB, 0x2f, ITYPE
        //| addd 4, RA, 0x10, RA
        //|>
        //|<
        //| cmpesb 3, ITYPE, LJ_TFUNC, pred0
        //| nop 2
        //|>
        //| ct ctpr1, ~pred0
        //|->BC_CALLT_Z:
        //|<
        //| ldd 3, BASE, 0xfffffff8, PC
        //| disp ctpr1, >3
        //| nop 2
        //|>
        //|<
        //| stw 2, STACK, MULTRES, RD
        //| cmpandedb 3, PC, FRAME_TYPE, pred0
        //| subd 4, RD, 0x8, RD
        //| disp ctpr2, >2
        //|>
        //|<
        //| subd 3, PC, FRAME_VARG, PC, ~pred0 // Tailcall from a vararg function.
        //| cmpedb 4, RD, 0x0, pred2
        //|>
        //| cmpandedb 3, PC, FRAME_TYPEP, pred1
        //|<
        //| pass pred0, p0
        //| pass pred1, p1
        //| landp ~p0, ~p1, p4
        //| landp ~p0, p1, p5
        //| pass p4, pred0                    // Vararg frame below?
        //| pass p5, pred1
        //|>
        //|<
        //| subd 3, BASE, PC, BASE, pred1     // Need to relocate BASE/KBASE down.
        //| subd 4, BASE, PC, KBASE, pred1
        //|>
        //|<
        //| ldd 3, BASE, 0xfffffff8, PC, pred1
        //| addd 4, PC, FRAME_VARG, PC, pred0
        //|>
        //|<
        //| std 5, BASE, 0xfffffff0, RB       // Copy func+tag down, reloaded below.
        //| ct ctpr1, pred2
        //|>
        //|2: // Move args down.
        //|<
        //| ldd 3, RA, 0x0, RB
        //| addd 4, RA, 0x8, RA
        //| subd 5, RD, 0x8, RD
        //|>
        //|<
        //| cmpedb 3, RD, 0x0, pred0
        //| nop 1
        //|>
        //|<
        //| addd 4, KBASE, 0x8, KBASE
        //| std 5, KBASE, 0x0, RB
        //| ct ctpr2, ~pred0
        //|>
        //|<
        //| ldd 3, BASE, 0xfffffff0, RB
        //| nop 2
        //|>
        //|3:
        //|<
        //| ldw 0, STACK, MULTRES, RD
        //| cmpandedb 1, PC, FRAME_TYPE, pred1
        //| ldbsm 2, PC, PC_RA, CARG1
        //| andd 3, RB, U64x(0x00007fff,0xffffffff), RB
        //| disp ctpr1, >4
        //|>
        //|<
        //| ldb 3, RB, LFUNC->ffid, TMP0
        //| ldd 5, RB, LFUNC->pc, PC
        //| nop 2
        //|>
        //|<
        //| ldw 2, PC, 0x0, RA
        //| cmpbedb 3, TMP0, 0x1, pred0       // (> FF_C) Calling a fast function?
        //| shldsm 4, CARG1, 0x3, CARG1
        //| nop 1
        //|>
        //|<
        //| subdsm 3, BASE, CARG1, CARG2
        //| pass pred0, p0
        //| pass pred1, p1
        //| landp ~p0, p1, p4
        //| pass p4, pred0
        //|>
        //| ct ctpr1, pred0
        //| // BASE = new base, RB = LFUNC, RD = (nargs+1)*8, [BASE-8] = PC
        //|<
        //| andd 0, RA, 0xff, TMP0
        //| shrd 1, RA, 0x5, RA
        //| addd 2, PC, 0x4, PC
        //|>
        //|<
        //| shld 2, TMP0, 0x3, TMP0           // jmp to [DISPATCH+OP*8]
        //| andd 3, RA, 0x7f8, RA
        //|>
        //|<
        //| ldd 0, TMP0, DISPATCH, TMP0
        //| nop 2
        //|>
        //| movtd 0, TMP0, ctpr1
        //| ct ctpr1
        //|4: // Tailcall to a fast function.
        //|<
        //| addd 1, PC, 0x4, PC
        //| andd 2, RA, 0xff, TMP0
        //| ldd 3, CARG2, 0xffffffe0, KBASE   // Need to prepare KBASE.
        //| shrd 4, RA, 0x5, RA
        //|>
        //|<
        //| shld 0, TMP0, 0x3, TMP0           // jmp to [DISPATCH+OP*8]
        //| andd 3, RA, 0x7f8, RA
        //|>
        //| ldd 0, TMP0, DISPATCH, TMP0
        //| andd 3, KBASE, U64x(0x00007fff,0xffffffff), KBASE
        //| ldd 3, KBASE, LFUNC->pc, KBASE
        //|<
        //| movtd 0, TMP0, ctpr1
        //| nop 1
        //|>
        //| ldd 0, KBASE, PC2PROTO(k), KBASE
        //| ct ctpr1
        dasm_put(Dst, 11185, LJ_TFUNC, FRAME_TYPE, FRAME_VARG, FRAME_TYPEP, FRAME_VARG, FRAME_TYPE, Dt7(->pc), Dt7(->ffid), Dt7(->pc), PC2PROTO(k));
#line 7781 "vm_e2k.dasc"
        break;

    case BC_ITERC:
        //| // ins_A RA = base*8, (RB = nresults+1)*8, RD=(nargs+1)*8 (2+1)*8
        //|<
        //| addd 3, BASE, RA, RA              // fb = base+2
        //| addd 0, 0x0, 0x18, RD             // Handle like a regular 2-arg call.
        //| disp ctpr1, ->vmeta_call
        //|>
        //|<
        //| addd 3, RA, 0x10, RA
        //|>
        //|<
        //| ldd 3, RA, 0xffffffe0, RB         // Copy state. fb[0] = fb[-4].
        //| ldd 5, RA, 0xffffffe8, RC         // Copy control var. fb[1] = fb[-3].
        //| nop 1
        //|>
        //|<
        //| ldd 3, RA, 0xffffffd8, CARG1            // Copy callable. fb[-2] = fb[-5]
        //|>
        //|<
        //| std 5, RA, 0x0, RB
        //|>
        //|<
        //| std 5, RA, 0x8, RC
        //|>
        //|<
        //| sard 3, CARG1, 0x2f, ITYPE
        //| andd 4, CARG1, U64x(0x00007fff,0xffffffff), CARG1
        //| std 5, RA, 0xfffffff0, CARG1
        //|>
        //|<
        //| cmpesb 3, ITYPE, LJ_TFUNC, pred0
        //| nop 2
        //|>
        //|<
        //| ldd 3, CARG1, LFUNC->pc, CARG2, pred0
        //| addd 4, RA, 0x0, BASE, pred0
        //| ct ctpr1, ~pred0
        //|>
        //|<
        //| std 5, BASE, 0xfffffff8, PC
        //| nop 1
        //|>
        //|<
        //| ldw 3, CARG2, 0x0, RA
        //| nop 2
        //|>
        //|<
        //| addd 1, CARG2, 0x4, PC
        //| andd 2, RA, 0xff, TMP0
        //| shrd 3, RA, 0x5, RA
        //|>
        //|<
        //| shld 2, TMP0, 0x3, TMP0           // jmp to [DISPATCH+OP*8]
        //| andd 3, RA, 0x7f8, RA
        //|>
        //|<
        //| ldd 0, TMP0, DISPATCH, TMP0
        //| nop 2
        //|>
        //| movtd 0, TMP0, ctpr1
        //| ct ctpr1
        dasm_put(Dst, 11346, LJ_TFUNC, Dt7(->pc));
#line 7844 "vm_e2k.dasc"
        break;

    case BC_ITERN:
        //| // ins_A RA = base*8, (RB = (nresults+1)*8, RC = (nargs+1)*8 (2+1)*8)
        //|<
        //| addd 2, PC, 0x4, PC
        //| addd 3, BASE, RA, TMP0
        //| disp ctpr1, >3
        //|>
        //|<
        //| ldd 3, TMP0, 0xfffffff0, RB
        //| ldw 5, TMP0, 0xfffffff8, RC          // Get index from control var.
        //| disp ctpr2, >1
        //| nop 2
        //|>
        //|<
        //| andd 3, RB, U64x(0x00007fff,0xffffffff), RB
        //| disp ctpr3, >2
        //|>
        //|<
        //| ldw 3, RB, TAB->asize, TMP1
        //| shls 4, RC, 0x3, CARG4
        //| ldd 5, RB, TAB->array, ITYPE
        //|>
        //| sxt 3, 0x6, CARG4, CARG4
        //|1: // Traverse array part.
        //|<
        //| lddsm 3, ITYPE, CARG4, TMP0
        //| cmpbsb 4, RC, TMP1, pred0
        //| nop 2
        //|>
        //|<
        //| subs 3, RC, TMP1, RC, ~pred0
        //| cmpedbsm 4, TMP0, LJ_TNIL, pred1
        //| ct ctpr1, ~pred0                  // Index points after array part?
        //| nop 2
        //|>
        //|<
        //| adds 3, RC, 0x1, RC, pred1        // Skip holes in array part.
        //| addd 4, CARG4, 0x8, CARG4, pred1
        //| ct ctpr2, pred1
        //|>
        //| // Copy array slot to returned value.
        //| // Return array index as a numeric key
        //|<
        //| subd 1, PC, BCBIAS_J*4, PC
        //| ldh 2, PC, PC_RD, RD                 // Get target from ITERL.
        //| addd 3, TMP0, 0x0, RB
        //| istofd 4, RC, TMP1
        //| addd 5, BASE, RA, TMP0
        //| nop 1
        //|>
        //|<
        //| adds 4, RC, 0x1, RC
        //| std 5, TMP0, 0x8, RB
        //|>
        //|<
        //| shld 0, RD, 0x2, RD
        //| std 5, TMP0, 0x0, TMP1
        //|>
        //|<
        //| addd 0, PC, RD, PC
        //| stw 2, TMP0, 0xfffffff8, RC          // Update control var.
        //|>
        //|2:
        //|<
        //| ldw 0, PC, 0x0, TMP0
        //| ldb 2, PC, 0x0, TMP1
        //| addd 1, PC, 0x4, PC
        //| nop 2
        //|>
        //|<
        //| shld 2, TMP1, 0x3, TMP1
        //| shrd 3, TMP0, 0xd, RD
        //| shrd 4, TMP0, 0x15, RB
        //| shrd 5, TMP0, 0x5, RA
        //|>
        //|<
        //| ldd 2, TMP1, DISPATCH, TMP1
        //| andd 3, RD, 0x7fff8, RD
        //| andd 4, RA, 0x7f8, RA
        //| nop 2
        //|>
        //|<
        //| movtd 0, TMP1, ctpr1
        //| andd 3, RB, 0x7f8, RB
        //| andd 4, RD, 0x7f8, RC
        //|>
        //| ct ctpr1
        //|3: // Traverse hash part.
        //|<
        //| ldw 3, RB, TAB->hmask, TMP0
        //| smulx 4, RC, #NODE, ITYPE
        //| lddsm 5, RB, TAB->node, CARG1
        //| nop 2
        //|>
        //|<
        //| cmpbesb 3, RC, TMP0, pred0
        //| adds 4, RC, TMP1, TMP1
        //| nop 2
        //|>
        //|<
        //| adddsm 3, ITYPE, CARG1, ITYPE
        //| adds 4, TMP1, 0x1, TMP1
        //| ct ctpr3, ~pred0                  // End of iteration? Branch to ITERL+1.
        //|>
        //|<
        //| ldd 3, ITYPE, NODE->val, TMP0
        //| lddsm 5, ITYPE, NODE->key, CARG2
        //| nop 2
        //|>
        //|<
        //| cmpedb 3, TMP0, LJ_TNIL, pred0
        //| lddsm 5, ITYPE, NODE->val, CARG3
        //| nop 2
        //|>
        //|<
        //| adds 3, RC, 0x1, RC, pred0        // Skip holes in hash part.
        //| ct ctpr1, pred0
        //|>
        //| // Copy key and value from hash slot.
        //|<
        //| ldh 0, PC, PC_RD, RD                 // Get target from ITERL.
        //| subd 1, PC, BCBIAS_J*4, PC
        //| addd 3, BASE, RA, TMP0
        //| nop 1
        //|>
        //|<
        //| std 5, TMP0, 0x0, CARG2
        //|>
        //|<
        //| shld 0, RD, 0x2, RD
        //| std 5, TMP0, 0x8, CARG3
        //|>
        //|<
        //| addd 0, PC, RD, PC
        //| stw 5, TMP0, 0xfffffff8, TMP1
        //| ct ctpr3
        //|>
        dasm_put(Dst, 11414, Dt6(->array), Dt6(->asize), LJ_TNIL, BCBIAS_J*4, Dt6(->node), sizeof(Node), Dt6(->hmask), DtB(->key), DtB(->val), DtB(->val), LJ_TNIL, BCBIAS_J*4);
#line 7983 "vm_e2k.dasc"
        break;

    case BC_ISNEXT:
        //| // ins_AD RA = base*8, RD = target*8 (points to ITERN)
        //|<
        //| addd 0, 0x0, BC_JMP, CARG4
        //| addd 1, PC, 0x0, CARG3 
        //| subd 2, PC, BCBIAS_J*4, PC
        //| shrd 3, RD, 0x1, RD
        //| addd 4, BASE, RA, TMP0
        //| disp ctpr1, >2
        //|>
        //|<
        //| addd 1, PC, RD, PC
        //| ldd 3, TMP0, 0xffffffe8, CARG1
        //| ldd 5, TMP0, 0xfffffff0, TMP1
        //|>
        //|<
        //| ldw 0, PC, 0x0, CARG7
        //| ldb 2, PC, 0x0, CARG8
        //|>
        //|<
        //| addd 2, 0x0, BC_ITERC, CARG5
        //| addd 3, 0x0, 0x2f, CARG2
        //|>
        //|<
        //| andd 3, CARG1, U64x(0x00007fff,0xffffffff), RB
        //| sard 4, CARG1, CARG2, ITYPE
        //| sard 5, TMP1, CARG2, TMP1
        //|>
        //|<
        //| ldbsm 3, RB, CFUNC->ffid, CARG6
        //| cmpedb 4, CARG1, LJ_TNIL, pred2
        //|>
        //|<
        //| shld 2, CARG8, 0x3, CARG8
        //| cmpesb 3, ITYPE, LJ_TFUNC, pred0
        //| cmpesb 4, TMP1, LJ_TTAB, pred1
        //| nop 1
        //|>
        //|<
        //| cmpedbsm 3, CARG6, FF_next_N, pred3
        //| pass pred0, p0
        //| pass pred1, p1
        //| pass pred2, p2
        //| landp p0, p1, p4
        //| landp p4, p2, p5
        //| pass p5, pred0
        //| nop 1
        //|>
        //|<
        //| addd 0, 0x0, U64x(0xfffe7fff,0x00000000), TMP1
        //| pass pred0, p0
        //| pass pred3, p1
        //| landp p0, p1, p4
        //| pass p4, pred0
        //|>
        //| // Despecialize bytecode if any of the checks fail.
        //|<
        //| shld 1, CARG5, 0x3, CARG8, ~pred0
        //| stb 2, PC, 0x0, CARG5, ~pred0
        //| std 5, TMP0, 0xfffffff8, TMP1, pred0 // Initialize control var.
        //|>
        //|<
        //| addd 1, PC, 0x4, PC
        //| ldd 2, CARG8, DISPATCH, CARG8
        //| shrd 3, CARG7, 0xd, RD
        //| shrd 4, CARG7, 0x15, RB
        //| shrd 5, CARG7, 0x5, RA
        //|>
        //|<
        //| movtd 0, CARG8, ctpr1
        //| andd 3, RD, 0x7fff8, RD
        //| andd 4, RA, 0x7f8, RA
        //|>
        //| stb 2, CARG3, PC_OP, CARG4, ~pred0
        //|<
        //| andd 3, RB, 0x7f8, RB
        //| andd 4, RD, 0x7f8, RC
        //| ct ctpr1
        //|>
        dasm_put(Dst, 11567, BCBIAS_J*4, BC_JMP, BC_ITERC, LJ_TNIL, Dt8(->ffid), LJ_TTAB, LJ_TFUNC, FF_next_N);
#line 8064 "vm_e2k.dasc"
        break;

    case BC_VARG:
        //| // ins_ABC RA = base*8, RB = (nresults+1)*8, RC = numparams*8
        //|<
        //| ldw 0, PC, 0x0, RARG2
        //| ldb 2, PC, 0x0, RARG3
        //| addd 3, BASE, RC, TMP1
        //| cmpedb 4, RB, 0x0, pred0
        //| ldd 5, BASE, 0xfffffff8, TMP0
        //| disp ctpr1, >5
        //|>
        //|<
        //| addd 3, TMP1, FRAME_VARG+0x10, TMP1
        //| addd 4, BASE, RA, RA
        //| addd 5, 0x0, LJ_TNIL, CARG4
        //| disp ctpr2, >2
        //| nop 2
        //|>
        //|<
        //| shld 2, RARG3, 0x3, RARG3
        //| subd 3, TMP1, TMP0, TMP1          // TMP1 may now be even _above_ BASE if nargs was < numparams.
        //| addd 4, RA, RB, CARG3
        //| disp ctpr3, >3
        //|>
        //|<
        //| ldd 2, RARG3, DISPATCH, RARG3
        //| subd 3, CARG3, 0x8, RB, ~pred0
        //| cmpbdb 4, TMP1, BASE, pred1
        //| ct ctpr1, pred0                   // Copy all varargs?
        //|>
        //| ct ctpr2, ~pred1                  // No vrarg slots?
        //|1: // Copy vararg slots to destination slots.
        //|<
        //| ldd 3, TMP1, 0xfffffff0, RC
        //| addd 4, TMP1, 0x8, TMP1
        //| addd 5, RA, 0x8, CARG3 
        //| disp ctpr1, <1
        //|>
        //|<
        //| cmpbdb 3, CARG3, RB, pred0
        //| cmpbdb 4, TMP1, BASE, pred1
        //| nop 1
        //|>
        //|<
        //| addd 4, CARG3, 0x0, RA
        //| std 5, RA, 0x0, RC
        //|>
        //| ct ctpr3, ~pred0                  // All destination slots filled?
        //| ct ctpr1, pred1                   // No more vararg slots?
        //|2: // Fill up remainder with nil.
        //|<
        //| addd 4, RA, 0x8, RA
        //| std 5, RA, 0x0, CARG4
        //|>
        //|<
        //| cmpbdb 3, RA, RB, pred0
        //| nop 2
        //|>
        //| ct ctpr2, pred0
        //|3:
        //|<
        //| movtd 0, RARG3, ctpr1
        //| addd 1, PC, 0x4, PC
        //| shrd 3, RARG2, 0xd, RD
        //| shrd 4, RARG2, 0x15, RB
        //| shrd 5, RARG2, 0x5, RA
        //|>
        //|<
        //| andd 3, RD, 0x7fff8, RD
        //| andd 4, RA, 0x7f8, RA
        //|>
        //|<
        //| andd 3, RB, 0x7f8, RB
        //| andd 4, RD, 0x7f8, RC
        //| ct ctpr1
        //|>
        //|5: // Copy all varargs.
        //|<
        //| addd 0, 0x0, (0+1)*8, TMP0
        //| ldd 2, STACK, SAVE_L, RB
        //| addd 3, BASE, 0x0, RC
        //| disp ctpr2, >6
        //|>
        //|<
        //| stw 2, STACK, MULTRES, TMP0
        //| cmpbedb 3, RC, TMP1, pred0
        //| nop 1
        //|>
        //|<
        //| lddsm 3, RB, L->maxstack, TMP0
        //|>
        //|<
        //| subd 4, RC, TMP1, RC
        //| ct ctpr3, pred0                   // No vararg slots?
        //|>
        //|<
        //| addd 3, RC, 0x8, CARG3
        //| addd 4, RC, RA, RC
        //|>
        //|<
        //| cmpbedb 3, RC, TMP0, pred0
        //| stw 2, STACK, MULTRES, CARG3      // (#varargs+1)*8
        //| nop 2
        //|>
        //| ct ctpr2, pred0                   // Need to grow stack?
        //| disp ctpr1, extern lj_state_growstack // (lua_State *L, int n)
        //| ldw 0, STACK, MULTRES, CARG2
        //|<
        //| std 2, STACK, SAVE_PC, PC
        //| subd 3, TMP1, BASE, TMP1          // Need delta, because BASE may change.
        //| std 5, RB, L->base, BASE
        //| nop 1
        //|>
        //|<
        //| subd 0, CARG2, 0x8, CARG2
        //| std 5, RB, L->top, RA
        //|>
        //|<
        //| shrd 0, CARG2, 0x3, CARG2
        //| addd 3, RB, 0x0, CARG1
        //| call ctpr1, wbs = 0x8
        //|>
        //|<
        //| ldd 3, RB, L->base, BASE
        //| ldd 5, RB, L->top, RA
        //| disp ctpr2, >6
        //| nop 2
        //|>
        //| addd 3, TMP1, BASE, TMP1
        //|6: // Copy all vararg slots.
        //|<
        //| ldd 3, TMP1, 0xfffffff0, RC
        //| addd 4, TMP1, 0x8, TMP1
        //|>
        //|<
        //| cmpbdb 3, TMP1, BASE, pred0
        //| nop 1
        //|>
        //|<
        //| addd 4, RA, 0x8, RA
        //| std 5, RA, 0x0, RC
        //| ct ctpr2, pred0
        //|>
        //|<
        //| movtd 0, RARG3, ctpr1
        //| addd 1, PC, 0x4, PC
        //| shrd 3, RARG2, 0xd, RD
        //| shrd 4, RARG2, 0x15, RB
        //| shrd 5, RARG2, 0x5, RA
        //|>
        //|<
        //| andd 3, RD, 0x7fff8, RD
        //| andd 4, RA, 0x7f8, RA
        //|>
        //|<
        //| andd 3, RB, 0x7f8, RB
        //| andd 4, RD, 0x7f8, RC
        //| ct ctpr1
        //|>
        dasm_put(Dst, 11665, LJ_TNIL, FRAME_VARG+0x10, (0+1)*8, Dt1(->maxstack), Dt1(->base), Dt1(->top), Dt1(->top), Dt1(->base));
#line 8224 "vm_e2k.dasc"
        break;

    /* -- Returns ----------------------------------------------------------- */

    case BC_RETM:
        //| // ins_AD RA = results*8, RD = extra_nresults*8
        //|<
        //| ldw 0, STACK, MULTRES, TMP0
        //| nop 2
        //|>
        //| addd 3, RD, TMP0, RD                 // MULTRES >=8, so RD >= 8
        //| // Fall through. Assumes BC_RET follows and ins_AD is a no-op.
        dasm_put(Dst, 11850);
#line 8236 "vm_e2k.dasc"
        break;

    case BC_RET:
        //| // ins_AD RA = results*8, RD = (nresults+1)*8
        //|1:
        //|<
        //| ldd 3, BASE, 0xfffffff8, PC
        //| disp ctpr3, ->vm_return
        //| nop 2
        //|>
        //|<
        //| stw 2, STACK, MULTRES, RD            // Save (nresults+1)*8.
        //| disp ctpr1, <1
        //|>
        //|<
        //| cmpandedb 3, PC, FRAME_TYPE, pred0   // Check frame type marker.
        //| subdsm 4, PC, FRAME_VARG, RB
        //|>
        //|<
        //| cmpandedbsm 3, RB, FRAME_TYPEP, pred1
        //| nop 1
        //|>
        //|<
        //| pass pred0, p0
        //| pass pred1, p1
        //| landp ~p0, ~p1, p4
        //| pass p4, pred1
        //|>
        //| ct ctpr3, pred1
        //|<
        //| subd 3, BASE, RB, BASE, ~pred0    // Return from vararg function: relocate BASE down and RA up.
        //| addd 4, RA, RB, RA, ~pred0
        //| ct ctpr1, ~pred0
        //|>
        //|->BC_RET_Z:
        //| // BASE = base, RA = resultptr, RD = (nresults+1)*8, PC = return
        //|<
        //| ldb 0, PC, PC_RB, CARG2
        //| ldw 2, STACK, MULTRES, CARG1      // Note: MULTRES may be >255.
        //| addd 3, BASE, 0x0, KBASE          // Use KBASE for result move.
        //| subd 4, RD, 0x8, RD
        //| ldb 5, PC, PC_RA, CARG3
        //| disp ctpr1, >3
        //|>
        //|<
        //| ldw 0, PC, 0x0, CARG4
        //| ldb 2, PC, 0x0, CARG5
        //| cmpedb 3, RD, 0x0, pred0
        //| addd 4, 0x0, LJ_TNIL, TMP0
        //| disp ctpr2, >2
        //| nop 1
        //|>
        //|<
        //| shld 0, CARG2, 0x3, CARG2
        //| shld 3, CARG3, 0x3, CARG3
        //| ct ctpr1, pred0
        //|>
        //|2:                                 // Move results down.
        //|<
        //| ldd 3, KBASE, RA, RB
        //| subd 4, RD, 0x8, RD
        //|>
        //|<
        //| cmpedb 3, RD, 0x0, pred0
        //| nop 3
        //|>
        //|<
        //| addd 4, KBASE, 0x8, KBASE
        //| std 5, KBASE, 0xfffffff0, RB
        //| ct ctpr2, ~pred0
        //|>
        //|3:
        //|<
        //| cmpbedb 0, CARG2, CARG1, pred0
        //| disp ctpr2, >4
        //| nop 2
        //|>
        //|<
        //| shld 2, CARG5, 0x3, CARG5, pred0
        //| subd 3, BASE, CARG3, BASE, pred0
        //| shrd 4, CARG4, 0xd, RD, pred0
        //| shrd 5, CARG4, 0x15, RB, pred0
        //| ct ctpr2, ~pred0                  // More results expected?
        //|>
        //|<
        //| subd 0, BASE, 0x10, BASE          // base = base - (RA+2)*8
        //| addd 1, PC, 0x4, PC
        //| ldd 2, CARG5, DISPATCH, CARG5
        //| shrd 3, CARG4, 0x5, RA
        //| andd 4, RD, 0x7fff8, RD
        //|>
        //|<
        //| ldd 0, BASE, 0xfffffff0, KBASE
        //| andd 3, RA, 0x7f8, RA
        //| nop 2
        //|>
        //|<
        //| movtd 0, CARG5, ctpr1
        //| andd 3, KBASE, U64x(0x00007fff,0xffffffff), KBASE
        //|>
        //|<
        //| ldd 3, KBASE, LFUNC->pc, KBASE
        //| nop 2
        //|>
        //|<
        //| andd 3, RB, 0x7f8, RB
        //| andd 4, RD, 0x7f8, RC
        //| ldd 5, KBASE, PC2PROTO(k), KBASE
        //| ct ctpr1
        //|>
        //|4:                                 // Fill up results with nil.
        //|<
        //| addd 0, CARG1, 0x8, CARG1
        //| addd 4, KBASE, 0x8, KBASE
        //| std 5, KBASE, 0xfffffff0, TMP0    // Note: relies on shifted base.
        //| ct ctpr1
        //|>
        dasm_put(Dst, 11855, FRAME_VARG, FRAME_TYPE, FRAME_TYPEP, LJ_TNIL, Dt7(->pc), PC2PROTO(k));
#line 8353 "vm_e2k.dasc"
        break;

    case BC_RET0: case BC_RET1:
        //| // ins_AD RA = results*8, RD = (nresults+1)*8
        //|1:
        //|<
        //| ldd 0, BASE, 0xfffffff8, PC
        //| disp ctpr3, ->vm_return
        //| nop 2
        //|>
        //|<
        //| stw 2, STACK, MULTRES, RD            // Save (nresults+1)*8.
        //| disp ctpr1, <1
        //|>
        //|<
        //| ldbsm 0, PC, 0x0, CARG2
        //| cmpandedb 1, PC, FRAME_TYPE, pred0   // Check frame type marker.
        //| ldwsm 3, PC, 0x0, CARG1
        //| subdsm 4, PC, FRAME_VARG, RB
        //| disp ctpr2, >3
        //|>
        //|<
        //| cmpandedbsm 3, RB, FRAME_TYPEP, pred1
        //|>
        //|<
        //| pass pred0, p0
        //| pass pred1, p1
        //| landp ~p0, ~p1, p4
        //| pass p4, pred1
        //|>
        //| ct ctpr3, pred1
        dasm_put(Dst, 11986, FRAME_VARG, FRAME_TYPE, FRAME_TYPEP);
#line 8384 "vm_e2k.dasc"
        if (op == BC_RET1) {
          //|<
          //| shld 2, CARG2, 0x3, CARG2, pred0
          //| subd 3, BASE, RB, BASE, ~pred0    // Return from vararg function: relocate BASE down and RA up.
          //| addd 4, RA, RB, RA, ~pred0
          //| ldd 5, BASE, RA, RB, pred0
          //| ct ctpr1, ~pred0
          //|>
          dasm_put(Dst, 12018);
#line 8392 "vm_e2k.dasc"
        } else {
          //|<
          //| shld 2, CARG2, 0x3, CARG2, pred0
          //| subd 3, BASE, RB, BASE, ~pred0    // Return from vararg function: relocate BASE down and RA up.
          //| ct ctpr1, ~pred0
          //|>
          dasm_put(Dst, 12027);
#line 8398 "vm_e2k.dasc"
        }
        if (op == BC_RET1) {
          //| std 5, BASE, 0xfffffff0, RB
          dasm_put(Dst, 12034);
#line 8401 "vm_e2k.dasc"
        }
        //|2:
        //|<
        //| ldb 0, PC, PC_RB, TMP0
        //| ldb 3, PC, PC_RA, RA
        //| disp ctpr1, <2
        //| nop 1
        //|>
        //| andd 4, RD, 0x7f8, TMP1
        //| shld 0, TMP0, 0x3, TMP0
        //| cmpbedb 0, TMP0, TMP1, pred0
        //|<
        //| ldd 2, CARG2, DISPATCH, CARG2, pred0
        //| shld 3, RA, 0x3, RA, pred0
        //| subd 4, BASE, 0x10, BASE, pred0
        //| ct ctpr2, ~pred0                  // More results expected?
        //|>
        //|<
        //| addd 1, PC, 0x4, PC
        //| subd 3, BASE, RA, BASE            // base = base - (RA+2)*8
        //| shrd 4, CARG1, 0xd, RD
        //| shrd 5, CARG1, 0x15, RB
        //|>
        //|<
        //| ldd 3, BASE, 0xfffffff0, KBASE
        //| shrd 4, CARG1, 0x5, RA
        //| andd 5, RD, 0x7fff8, RD
        //| nop 2
        //|>
        //|<
        //| movtd 0, CARG2, ctpr1
        //| andd 3, KBASE, U64x(0x00007fff,0xffffffff), KBASE
        //|>
        //|<
        //| ldd 3, KBASE, LFUNC->pc, KBASE
        //| andd 4, RB, 0x7f8, RB
        //| nop 2
        //|>
        //| andd 5, RA, 0x7f8, RA
        //|<
        //| ldd 3, KBASE, PC2PROTO(k), KBASE
        //| andd 4, RD, 0x7f8, RC
        //| ct ctpr1
        //|>
        //|3:                                 // Fill up results with nil.
        //|<
        //| subd 3, BASE, 0x18, TMP0
        //| addd 4, 0x0, LJ_TNIL, TMP1
        //|>
        //|<
        //| addd 3, RD, 0x8, RD
        //| std 5, TMP0, RD, TMP1
        //| ct ctpr1
        //|>
        dasm_put(Dst, 12039, Dt7(->pc), PC2PROTO(k), LJ_TNIL);
#line 8455 "vm_e2k.dasc"
        break;

    /* -- Loops and branches ------------------------------------------------ */

    case BC_FORL:
        //| // Fall through. Assumes BC_IFORL follows and ins_AJ is a no-op.
        break;

    case BC_JFORI: case BC_JFORL:
        //| // Unsupported
        break;

    case BC_IFORL:
        //| // ins_AJ RA = base*8, RD = target*8 (after end of loop or start of loop)
        //|<
        //| subd 1, PC, BCBIAS_J*4, CARG3
        //| addd 3, BASE, RA, RA
        //| shrd 4, RD, 0x1, CARG2
        //|>
        //|<
        //| addd 0, CARG3, CARG2, CARG4
        //| ldd 3, RA, 0x10, RB
        //| ldd 5, RA, 0x0, TMP0
        //| nop 2
        //|>
        //|<
        //| ldbsm 0, PC, 0x0, CARG1
        //| ldbsm 2, CARG4, 0x0, CARG5
        //| faddd 3, TMP0, RB, TMP0
        //| fcmpltdb 4, RB, 0x0, pred2
        //| ldd 5, RA, 0x8, TMP1
        //| nop 2
        //|>
        //|<
        //| shldsm 0, CARG1, 0x3, CARG1
        //| shldsm 1, CARG5, 0x3, CARG5
        //|>
        //|<
        //| lddsm 0, CARG1, DISPATCH, CARG1
        //| lddsm 2, CARG5, DISPATCH, CARG5
        //| fcmpltdb 3, TMP1, TMP0, pred0
        //| fcmpltdb 4, TMP0, TMP1, pred1     // Invert comparison if step is negative.
        //| nop 2
        //|>
        //|<
        //| std 5, RA, 0x0, TMP0
        //| pass pred0, p0
        //| pass pred1, p1
        //| pass pred2, p2
        //| landp ~p0, ~p2, p4
        //| landp ~p1, p2, p5
        //| landp ~p4, ~p5, p6
        //| pass p6, pred0
        //|>
        //|<
        //| addd 0, CARG5, 0x0, CARG1, ~pred0 
        //| addd 1, CARG4, 0x0, PC, ~pred0
        //| std 5, RA, 0x18, TMP0
        //|>
        //|<
        //| movtd 0, CARG1, ctpr1
        //| addd 1, PC, 0x4, PC
        //| ldw 2, PC, 0x0, TMP0
        //| nop 2
        //|>
        //|<
        //| shrd 3, TMP0, 0xd, RD
        //| shrd 4, TMP0, 0x15, RB
        //| shrd 5, TMP0, 0x5, RA
        //|>
        //|<
        //| andd 3, RD, 0x7fff8, RD
        //| andd 4, RA, 0x7f8, RA
        //|>
        //|<
        //| andd 3, RB, 0x7f8, RB
        //| andd 4, RD, 0x7f8, RC
        //| ct ctpr1
        //|>
        dasm_put(Dst, 12112, BCBIAS_J*4);
#line 8534 "vm_e2k.dasc"
        break;

    case BC_FORI:
        //| // ins_AJ RA = base*8, RD = target*8 (after end of loop or start of loop)
        //|<
        //| subd 2, PC, BCBIAS_J*4, CARG3
        //| addd 3, BASE, RA, RA
        //| addd 4, 0x0, 0x2f, CARG1
        //| disp ctpr2, ->vmeta_for
        //|>
        //|<
        //| shrd 1, RD, 0x1, CARG4
        //| ldd 2, RA, 0x10, RB
        //| ldd 3, RA, 0x0, TMP0
        //| ldd 5, RA, 0x8, TMP1
        //| nop 2
        //|>
        //|<
        //| addd 1, CARG3, CARG4, CARG3
        //| sard 2, RB, CARG1, ITYPE
        //| sard 3, TMP0, CARG1, CARG1
        //| sard 4, TMP1, CARG1, CARG2
        //|>
        //|<
        //| cmplsb 0, ITYPE, LJ_TISNUM, pred3
        //| cmpbsb 1, ITYPE, LJ_TISNUM, pred0
        //| cmpbsb 3, CARG1, LJ_TISNUM, pred1
        //| cmpbsb 4, CARG2, LJ_TISNUM, pred2
        //|>
        //|<
        //| pass pred0, p0
        //| pass pred1, p1
        //| landp p0, p1, p4
        //| pass p4, pred0
        //| pass pred2, p2
        //| landp p4, p2, p5
        //| pass p5, pred2
        //|>
        //|<
        //| fcmpltdb 3, TMP1, TMP0, pred0
        //| fcmpltdb 4, TMP0, TMP1, pred1     // Invert comparison if step is negative.
        //| nop 1
        //|>
        //|<
        //| std 5, RA, 0x18, TMP0, pred2
        //| ct ctpr2, ~pred2
        //|>
        //|<
        //| pass pred0, p0
        //| pass pred1, p1
        //| pass pred3, p3
        //| landp ~p0, ~p3, p4
        //| landp ~p1, p3, p5
        //| landp ~p4, ~p5, p6
        //| pass p6, pred0
        //|>
        //| addd 0, CARG3, 0x0, PC, pred0
        //|<
        //| ldb 0, PC, 0x0, TMP1
        //| addd 1, PC, 0x4, PC
        //| ldw 2, PC, 0x0, TMP0
        //| nop 2
        //|>
        //|<
        //| shld 2, TMP1, 0x3, TMP1
        //| shrd 3, TMP0, 0xd, RD
        //| shrd 4, TMP0, 0x15, RB
        //| shrd 5, TMP0, 0x5, RA
        //|>
        //|<
        //| ldd 2, TMP1, DISPATCH, TMP1
        //| andd 3, RD, 0x7fff8, RD
        //| andd 4, RA, 0x7f8, RA
        //| nop 2
        //|>
        //|<
        //| movtd 0, TMP1, ctpr1
        //| andd 3, RB, 0x7f8, RB
        //| andd 4, RD, 0x7f8, RC
        //|>
        //| ct ctpr1
        dasm_put(Dst, 12176, BCBIAS_J*4, LJ_TISNUM, LJ_TISNUM, LJ_TISNUM, LJ_TISNUM);
#line 8615 "vm_e2k.dasc"
        break;

    case BC_ITERL:
        //| // Fall through. Assumes BC_IITERL follows and ins_AJ is a no-op.
        break;

    case BC_JITERL:
        //| // Unsupported
        break;

    case BC_IITERL:
        //| // ins_AJ RA = base*8, RD = target*8
        //|<
        //| subd 2, PC, BCBIAS_J*4, CARG1
        //| addd 3, BASE, RA, RA
        //| shrd 4, RD, 0x1, RD
        //|>
        //|<
        //| ldd 3, RA, 0x0, RB
        //| nop 2
        //|>
        //|<
        //| cmpedb 3, RB, LJ_TNIL, pred0
        //| nop 1
        //|>
        //|<
        //| addd 0, CARG1, RD, PC, ~pred0     // Otherwise save control var + branch.
        //| std 5, RA, 0xfffffff8, RB, ~pred0
        //|>
        //|<
        //| ldw 0, PC, 0x0, TMP0
        //| ldb 2, PC, 0x0, TMP1
        //| addd 1, PC, 0x4, PC
        //| nop 2
        //|>
        //|<
        //| shld 2, TMP1, 0x3, TMP1
        //| shrd 3, TMP0, 0xd, RD
        //| shrd 4, TMP0, 0x15, RB
        //| shrd 5, TMP0, 0x5, RA
        //|>
        //|<
        //| ldd 2, TMP1, DISPATCH, TMP1
        //| andd 3, RD, 0x7fff8, RD
        //| andd 4, RA, 0x7f8, RA
        //| nop 2
        //|>
        //|<
        //| movtd 0, TMP1, ctpr1
        //| andd 3, RB, 0x7f8, RB
        //| andd 4, RD, 0x7f8, RC
        //|>
        //| ct ctpr1
        dasm_put(Dst, 12259, BCBIAS_J*4, LJ_TNIL);
#line 8668 "vm_e2k.dasc"
        break;

    case BC_LOOP:
        //| // ins_A RA = base*8, RD = target*8 (loop extent)
        //| // Note: RA/RD is only used by trace recorder to determine scope/extent
        //| // This opcode does NOT jump, it's only purpose is to detect a hot loop.
        //| //Fall through. Assumes BC_ILOOP follows and ins_A is a no-op.
        break;

    case BC_ILOOP:
        //| // ins_A RA = base*8, RD = target*8 (loop extent)
        //| ins_next
        dasm_put(Dst, 12304);
#line 8680 "vm_e2k.dasc"
        break;

    case BC_JLOOP:
        //| // Unsupported
        break;

    case BC_JMP:
        //| // ins_AJ RA = unused, RD = target*8
        //|<
        //| subd 0, PC, BCBIAS_J*4, PC
        //| shrd 3, RD, 0x1, CARG1
        //|>
        //|<
        //| ldw 0, PC, CARG1, TMP0
        //| addd 1, PC, CARG1, PC
        //| ldb 2, PC, CARG1, TMP1
        //| nop 3
        //|>
        //|<
        //| addd 1, PC, 0x4, PC
        //| shld 2, TMP1, 0x3, TMP1
        //| shrd 3, TMP0, 0xd, RD
        //| shrd 4, TMP0, 0x15, RB
        //| shrd 5, TMP0, 0x5, RA
        //|>
        //|<
        //| ldd 2, TMP1, DISPATCH, TMP1
        //| andd 3, RD, 0x7fff8, RD
        //| andd 4, RA, 0x7f8, RA
        //| nop 2
        //|>
        //|<
        //| movtd 0, TMP1, ctpr1
        //| andd 3, RB, 0x7f8, RB
        //| andd 4, RD, 0x7f8, RC
        //|>
        //| ct ctpr1
        dasm_put(Dst, 12329, BCBIAS_J*4);
#line 8717 "vm_e2k.dasc"
        break;

    /* -- Function headers -------------------------------------------------- */

    /*
    ** Reminder: A function may be called with func/args above L->maxstack,
    ** i.e. occupying EXTRA_STACK slots. And vmeta_call may add one extra slot,
    ** too. This means all FUNC* ops (including fast functions) must check
    ** for stack overflow _before_ adding more slots!
    */

    case BC_FUNCF:
    case BC_FUNCV: /* NYI: compiled vararg functions. */
        //| // Fall through. Assumes BC_IFUNCF/BC_IFUNCV follow and ins_AD is a no-op.
        break;

    case BC_JFUNCF:
        //| // Unsupported
        break;

    case BC_IFUNCF:
        //| // ins_AD BASE = new_base*8, RA = framesize*8, RD = (nargs+1)*8
        //|<
        //| ldb 2, PC, 0x0, CARG2
        //| ldd 3, PC, PC2PROTO(k)-4, KBASE
        //| addd 4, BASE, RA, RA              // Top of frame.
        //| ldd 5, STACK, SAVE_L, RB
        //| disp ctpr1, ->vm_growstack_f
        //| nop 1
        //|>
        //|<
        //| shld 2, CARG2, 0x3, CARG2
        //| ldbsm 3, PC, PC2PROTO(numparams)-4, CARG6
        //| addd 4, 0x0, LJ_TNIL, TMP1
        //|>
        //|<
        //| ldd 2, CARG2, DISPATCH, CARG2
        //| ldd 3, RB, L->maxstack, TMP0
        //| ldw 5, PC, 0x0, CARG1
        //| disp ctpr2, >2
        //| nop 2
        //|>
        //|<
        //| movtd 0, CARG2, ctpr3
        //| cmpbedb 3, RA, TMP0, pred0
        //| shrd 4, CARG1, 0xd, CARG3
        //| shrd 5, CARG1, 0x15, CARG4
        //|>
        //| ct ctpr1, ~pred0
        //|<
        //| shld 3, CARG6, 0x3, RA
        //| shrd 4, CARG1, 0x5, CARG5
        //| disp ctpr1, >1
        //|>
        //|<
        //| addd 2, PC, 0x4, PC
        //| cmpbedb 3, RD, RA, pred0
        //| ct ctpr2, ~pred0                  // Check for missing parameters.
        //|>
        //|1: // Clear missing parameters.
        //|<
        //| subd 3, RD, 0x8, TMP0
        //| addd 4, RD, 0x8, RD
        //|>
        //| cmpbedb 3, RD, RA, pred0
        //|<
        //| std 5, BASE, TMP0, TMP1
        //| ct ctpr1, pred0
        //|>
        //|2:
        //|<
        //| andd 3, CARG3, 0x7fff8, RD
        //| andd 4, CARG5, 0x7f8, RA
        //|>
        //|<
        //| andd 3, CARG4, 0x7f8, RB
        //| andd 4, RD, 0x7f8, RC
        //| ct ctpr3
        //|>
        dasm_put(Dst, 12361, PC2PROTO(k)-4, LJ_TNIL, PC2PROTO(numparams)-4, Dt1(->maxstack));
#line 8796 "vm_e2k.dasc"
        break;

    case BC_JFUNCV:
        //| // Unsupported
        break;

    case BC_IFUNCV:
        //| // ins_AD BASE = new base, RA = framesize*8, RB = LFUNC (but we need tagged), RD = (nargs+1)*8
        //|<
        //| ldbsm 2, PC, 0x0, CARG3
        //| ldd 3, BASE, 0xfffffff0, KBASE
        //| addd 4, RD, FRAME_VARG+0x8, TMP0
        //| addd 5, RD, BASE, RD
        //| disp ctpr1, ->vm_growstack_v
        //|>
        //|<
        //| ldbsm 0, PC, PC2PROTO(numparams)-4, CARG1
        //| ldd 3, STACK, SAVE_L, RB
        //| addd 4, RD, 0x8, RD
        //| ldwsm 5, PC, 0x0, CARG2
        //| disp ctpr2, >2
        //|>
        //|<
        //| addd 3, RA, RD, RA
        //| std 5, RD, 0xfffffff8, TMP0       // Store delta + FRAME_VARG
        //|>
        //|<
        //| shldsm 2, CARG3, 0x3, CARG3
        //| std 5, RD, 0xfffffff0, KBASE      // Store copy of LFUNC
        //|>
        //|<
        //| lddsm 2, CARG3, DISPATCH, CARG3
        //| ldd 3, RB, L->maxstack, TMP0
        //| nop 2
        //|>
        //|<
        //| movtdsm 0, CARG3, ctpr3
        //| cmpedbsm 1, CARG1, 0x0, pred1
        //| cmpbedb 3, RA, TMP0, pred0
        //|>
        //|<
        //| addd 3, BASE, 0x0, RA, pred0
        //| addd 0, RD, 0x0, BASE, pred0
        //| ct ctpr1, ~pred0                  // Need to grow stack?
        //|>
        //|<
        //| addd 3, RA, 0x8, RA, ~pred1
        //| shrd 4, CARG2, 0x15, RB
        //| ldd 5, PC, PC2PROTO(k)-4, KBASE
        //| ct ctpr2, pred1
        //|>
        //|1:                                 // Copy fixarg slots up to new frame.
        //|<
        //| addd 3, RA, 0x8, RA
        //| addd 4, 0x0, LJ_TNIL, TMP1
        //| disp ctpr1, >3
        //|>
        //|<
        //| cmpbdb 3, RA, BASE, pred0
        //| disp ctpr2, <1
        //|>
        //|<
        //| ldd 3, RA, 0xfffffff0, CARG4, pred0
        //| subd 0, CARG1, 0x1, CARG1, pred0
        //| nop 1
        //|>
        //| ct ctpr1, ~pred0                  // Less args than parameters?
        //|<
        //| cmpedb 0, CARG1, 0x0, pred0
        //| addd 3, RD, 0x8, RD
        //| std 5, RD, 0x0, CARG4
        //|>
        //|<
        //| std 5, RA, 0xfffffff0, TMP1       // Clear old fixarg slot (help the GC).
        //| ct ctpr2, ~pred0
        //|>
        //|2:
        //|<
        //| addd 1, PC, 0x4, PC
        //| shrd 3, CARG2, 0xd, RD
        //| andd 4, RB, 0x7f8, RB
        //| shrd 5, CARG2, 0x5, RA
        //|>
        //|<
        //| andd 3, RD, 0x7fff8, RD
        //| andd 4, RA, 0x7f8, RA
        //|>
        //|<
        //| andd 4, RD, 0x7f8, RC
        //| ct ctpr3
        //|>
        //|3:                                 // Clear missing parameters.
        //|<
        //| subd 0, CARG1, 0x1, CARG1
        //| addd 3, RD, 0x8, RD
        //| std 5, RD, 0x0, TMP1
        //| disp ctpr2, <2
        //|>
        //|<
        //| cmpedb 0, CARG1, 0x0, pred0
        //|>
        //| ct ctpr1, ~pred0
        //| ct ctpr2
        dasm_put(Dst, 12429, FRAME_VARG+0x8, PC2PROTO(numparams)-4, Dt1(->maxstack), PC2PROTO(k)-4, LJ_TNIL);
#line 8899 "vm_e2k.dasc"
        break;

    case BC_FUNCC:
        //| // ins_AD BASE = new base, RA = framesize*8, RD = (nargs+1)*8
        //|<
        //| ldd 3, BASE, 0xfffffff0, KBASE
        //| addd 4, BASE, RD, RD
        //| ldd 5, STACK, SAVE_L, RB
        //| disp ctpr1, ->vm_growstack_c
        //| nop 2
        //|>
        //|<
        //| andd 3, KBASE, U64x(0x00007fff,0xffffffff), KBASE
        //| subd 4, RD, 0x8, RD
        //| std 5, RB, L->base, BASE
        //| nop 1
        //|>
        //|<
        //| ldd 0, KBASE, CFUNC->f, KBASE
        //| ldd 3, RB, L->maxstack, TMP1
        //| addd 4, RD, 8*LUA_MINSTACK, TMP0
        //| nop 2
        //|>
        //|<
        //| addd 1, 0x0, ~LJ_VMST_C, TMP0
        //| cmpbedb 3, TMP0, TMP1, pred0
        //| addd 4, RB, 0x0, CARG1
        //| std 5, RB, L->top, RD
        //|>
        //|<
        //| stw 2, DISPATCH, DISPATCH_GL(vmstate), TMP0, pred0
        //| ct ctpr1, ~pred0                  // Need to grow stack?
        //|>
        //| movtd 0, KBASE, ctpr1             // (lua_State *L)
        //| call ctpr1, wbs = 0x8
        //|<
        //| ldd 3, RB, L->base, BASE
        //| shld 4, CRET1, 0x3, RD            // return nsresult
        //| addd 5, 0x0, ~LJ_VMST_INTERP, TMP0
        //| disp ctpr1, ->vm_returnc
        //|>
        //|<
        //| std 2, DISPATCH, DISPATCH_GL(cur_L), RB
        //| addd 3, BASE, RD, RA
        //| stw 5, DISPATCH, DISPATCH_GL(vmstate), TMP0
        //|>
        //|<
        //| ldd 0, BASE, 0xfffffff8, PC       // Fetch PC of caller
        //| ldd 3, RB, L->top, TMP0
        //| nop 2
        //|>
        //|<
        //| subd 3, TMP0, RA, RA              // RA = (L->top - (L->base+nresults))*8
        //| ct ctpr1
        //|>
        dasm_put(Dst, 12543, Dt1(->base), 8*LUA_MINSTACK, Dt1(->maxstack), Dt8(->f), Dt1(->top), ~LJ_VMST_C, DISPATCH_GL(vmstate), ~LJ_VMST_INTERP, Dt1(->base), DISPATCH_GL(vmstate), DISPATCH_GL(cur_L), Dt1(->top));
#line 8954 "vm_e2k.dasc"
        break;

    case BC_FUNCCW:
        //| // ins_AD BASE = new base, RA = framesize*8, RD = (nargs+1)*8
        //|<
        //| ldd 3, BASE, 0xfffffff0, CARG2
        //| addd 4, BASE, RD, RD
        //| ldd 5, STACK, SAVE_L, RB
        //| disp ctpr1, ->vm_growstack_c
        //| nop 2
        //|>
        //|<
        //| andd 3, CARG2, U64x(0x00007fff,0xffffffff), CARG2
        //| subd 4, RD, 0x8, RD
        //| std 5, RB, L->base, BASE
        //| nop 1
        //|>
        //|<
        //| ldd 0, CARG2, CFUNC->f, CARG2
        //| ldd 2, DISPATCH, DISPATCH_GL(wrapf), CARG3
        //| ldd 3, RB, L->maxstack, TMP1
        //| addd 4, RD, 8*LUA_MINSTACK, TMP0
        //| nop 2
        //|>
        //|<
        //| addd 0, CARG2, 0x0, KBASE
        //| addd 1, 0x0, ~LJ_VMST_C, TMP0
        //| cmpbedb 3, TMP0, TMP1, pred0
        //| addd 4, RB, 0x0, CARG1
        //| std 5, RB, L->top, RD
        //|>
        //|<
        //| stw 2, DISPATCH, DISPATCH_GL(vmstate), TMP0, pred0
        //| ct ctpr1, ~pred0                  // Need to grow stack?
        //|>
        //| movtd 0, CARG3, ctpr1              // (lua_State *L, lua_CFunction f)
        //| call ctpr1, wbs = 0x8
        //|<
        //| ldd 3, RB, L->base, BASE
        //| shld 4, CRET1, 0x3, RD            // return nsresult
        //| addd 5, 0x0, ~LJ_VMST_INTERP, TMP0
        //| disp ctpr1, ->vm_returnc
        //|>
        //|<
        //| std 2, DISPATCH, DISPATCH_GL(cur_L), RB
        //| addd 3, BASE, RD, RA
        //| stw 5, DISPATCH, DISPATCH_GL(vmstate), TMP0
        //|>
        //|<
        //| ldd 0, BASE, 0xfffffff8, PC       // Fetch PC of caller
        //| ldd 3, RB, L->top, TMP0
        //| nop 2
        //|>
        //|<
        //| subd 3, TMP0, RA, RA              // RA = (L->top - (L->base+nresults))*8
        //| ct ctpr1
        //|>
        dasm_put(Dst, 12626, Dt1(->base), 8*LUA_MINSTACK, Dt1(->maxstack), DISPATCH_GL(wrapf), Dt8(->f), Dt1(->top), ~LJ_VMST_C, DISPATCH_GL(vmstate), ~LJ_VMST_INTERP, Dt1(->base), DISPATCH_GL(vmstate), DISPATCH_GL(cur_L), Dt1(->top));
#line 9011 "vm_e2k.dasc"
        break;

    /* ---------------------------------------------------------------------- */
    default:
        fprintf(stderr, "Error: undefined opcode BC_%s\n", bc_names[op]);
        exit(2);
        break;
    }
}

static int build_backend(BuildCtx *ctx)
{
    int op;
    dasm_growpc(Dst, BC__MAX);
    build_subroutines(ctx);
    //|.code_op
    dasm_put(Dst, 12712);
#line 9027 "vm_e2k.dasc"
    for (op = 0 ; op < BC__MAX; op++)
        build_ins(ctx, (BCOp)op, op);
    return BC__MAX;
}

/* Emit pseudo frame-info for all assembler functions */
static void emit_asm_debug(BuildCtx* ctx)
{
    int fcofs = (int)((uint8_t *)ctx->glob[GLOB_vm_ffi_call] - ctx->code);
    switch  (ctx->mode) {
    case BUILD_elfasm:
        fprintf(ctx->fp, "\t.section .debug_frame,\"\",@progbits\n");
        fprintf(ctx->fp,
        ".Lframe0:\n"
        "\t.long .LECIE0-.LSCIE0\n"
        ".LSCIE0:\n"
        "\t.long 0xffffffff\n"
        "\t.byte 0x1\n"
        "\t.string \"\"\n"
        "\t.uleb128 0x1\n"
        "\t.sleb128 -8\n"
        "\t.byte 0x8c\n"
        "\t.byte 0xc\n\t.uleb128 0x19\n\t.uleb128 0\n"
        "\t.byte 0x9\n\t.uleb128 0x8c\n\t.uleb128 0\n"
        "\t.align 8\n"
        ".LECIE0:\n\n");
        fprintf(ctx->fp,
        ".LSFDE0:\n"
        "\t.long .LEFDE0-.LASFDE0\n"
        ".LASFDE0:\n"
        "\t.long .Lframe0\n"
        "\t.quad .Lbegin\n"
        "\t.quad %d\n"
        "\t.byte 0xd\n\t.uleb128 0x18\n"
        "\t.align 8\n"
        ".LEFDE0:\n\n", fcofs);
#if LJ_HASFFI
        fprintf(ctx->fp,
        ".LSFDE1:\n"
        "\t.long .LEFDE1-.LASFDE1\n"
        ".LASFDE1:\n"
        "\t.long .Lframe0\n"
        "\t.quad lj_vm_ffi_call\n"
        "\t.quad %d\n"
        "\t.byte 0xd\n\t.uleb128 0x18\n"
        "\t.align 8\n"
        ".LEFDE1:\n\n", (int)ctx->codesz - fcofs);
#endif
#if !LJ_NO_UNWIND
        fprintf(ctx->fp, "\t.section .eh_frame,\"a\",@progbits\n");
        fprintf(ctx->fp,
        "\t.globl lj_err_unwind_dwarf\n"
        ".Lframe1:\n"
        "\t.long .LECIE1-.LSCIE1\n"
        ".LSCIE1:\n"
        "\t.long 0\n"
        "\t.byte 0x1\n"
        "\t.string \"zPR\"\n"
        "\t.uleb128 0x1\n"
        "\t.sleb128 -8\n"
        "\t.byte 0x8c\n"
        "\t.uleb128 0xa\n"
        "\t.byte 0\n"
        "\t.quad lj_err_unwind_dwarf\n"
        "\t.byte 0\n"
        "\t.byte 0xc\n\t.uleb128 0x19\n\t.uleb128 0\n"
        "\t.byte 0x9\n\t.uleb128 0x8c\n\t.uleb128 0\n"
        "\t.align 8\n"
        ".LECIE1:\n\n");
        fprintf(ctx->fp,
        ".LSFDE2:\n"
        "\t.long .LEFDE2-.LASFDE2\n"
        ".LASFDE2:\n"
        "\t.long .LASFDE2-.Lframe1\n"
        "\t.quad .Lbegin\n"
        "\t.quad %d\n"
        "\t.uleb128 0\n"
        "\t.byte 0xd\n\t.uleb128 0x18\n"
        "\t.align 8\n"
        ".LEFDE2:\n\n", fcofs);
#if LJ_HASFFI
        fprintf(ctx->fp,
        ".Lframe2:\n"
        "\t.long .LECIE2-.LSCIE2\n"
        ".LSCIE2:\n"
        "\t.long 0\n"
        "\t.byte 0x1\n"
        "\t.string \"zR\"\n"
        "\t.uleb128 0x1\n"
        "\t.sleb128 -8\n"
        "\t.byte 0x8c\n"
        "\t.uleb128 1\n"
        "\t.byte 0\n"
        "\t.byte 0xc\n\t.uleb128 0x19\n\t.uleb128 0\n"
        "\t.byte 0x9\n\t.uleb128 0x8c\n\t.uleb128 0\n"
        "\t.align 8\n"
        ".LECIE2:\n\n");
        fprintf(ctx->fp,
        ".LSFDE3:\n"
        "\t.long .LEFDE3-.LASFDE3\n"
        ".LASFDE3:\n"
        "\t.long .LASFDE3-.Lframe2\n"
        "\t.quad lj_vm_ffi_call\n"
        "\t.quad %d\n"
        "\t.uleb128 0\n"
        "\t.byte 0xd\n\t.uleb128 0x18\n"
        "\t.align 8\n"
        ".LEFDE3:\n\n", (int)ctx->codesz - fcofs);
#endif
#endif
        break;
    default:
        break;
    }
}
