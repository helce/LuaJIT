/*
** This file has been pre-processed with DynASM.
** https://luajit.org/dynasm.html
** DynASM version 1.4.0, DynASM e2k version 1.4.0
** DO NOT EDIT! The original file is in "vm_e2k.dasc".
*/

#line 1 "vm_e2k.dasc"
//|// Low-level VM code for E2K CPUs.
//|// Bytecode interpreter, fast functions and helper functions.
//|// Copyright (C) 2005-2017 Mike Pall. See Copyright Notice in luajit.h
//|
//|.arch e2k
#if DASM_VERSION != 10400
#error "Version mismatch between DynASM and included encoding engine"
#endif
#line 6 "vm_e2k.dasc"
//|.section code_op, code_sub
#define DASM_SECTION_CODE_OP	0
#define DASM_SECTION_CODE_SUB	1
#define DASM_MAXSECTION		2
#line 7 "vm_e2k.dasc"
//|
//|.actionlist build_actionlist
static const unsigned int build_actionlist[15581] = {
  0xff100001,0xff500014,0x04000011,0x2287d840,0x00000000,0x00000000,0xff810000,
  0x00004001,0x40000000,0xff411015,0x00001001,0xc0000440,0x04000011,0x0187d887,
  0x00000000,0xfffffff8,0x04000001,0x13848784,0x04000001,0x118b878b,0x04000001,
  0x138bc88b,0x04000011,0x6784d887,0x00000000,0xfffffff8,0x04000011,0x11c0dc8f,
  0xfffeffff,0xffffffff,0x10000001,0x27848b8f,0xff500016,0x04000001,0x118ec88e,
  0x04000001,0x218ec040,0x04000011,0x11c0d880,0x00000000,0x00000000,0xff810000,
  0x00004001,0x40000000,0xff411017,0x00001001,0xc0000440,0x10000001,0x2686c08e,
  0x04000011,0x2387d840,0x00000000,0x00000000,0xff810000,0x00004001,0x40000000,
  0xff411018,0x00001001,0xc0000440,0xff500019,0x04000011,0x0987d887,0x00000000,
  0x00000000,0xff810000,0x04000011,0x2287d840,0x00000000,0x00000000,0xff810000,
  0x00004001,0x40000000,0xff411014,0x00001001,0xc0000460,0x04000011,0x11c0d889,
  0x00000000,0x00000000,0xff810000,0x10000011,0x2688d889,0x00000000,0x00000000,
  0xff810000,0x04000001,0x13c0c889,0x04000001,0x01878987,0x04000001,0x13878487,
  0x04000001,0x13c08787,0x04000001,0x138ec88e,0x04000001,0x218ec040,0x00004001,
  0x40000000,0xff411002,0x00001001,0xc0000440,0xff50000b,0x04000001,0x67848b8c,
  0x04000011,0x1384d089,0x00000000,0x00000010,0x10000001,0x2789c08c,0x04000001,
  0x1184c884,0x04000001,0x138ec88e,0x04000001,0x218ec040,0x00004001,0x40000000,
  0xff41100b,0x00001001,0xc0000460,0xff50000c,0x04000011,0x6786d08c,0x00000000,
  0x00000010,0x10000011,0x278cd887,0x00000000,0x00000000,0xff810000,0xff50000d,
  0x04000001,0x6686c08e,0x04000001,0x6686c88b,0x04000001,0x198bc38b,0xff50000e,
  0x04000001,0x208b8e40,0x00004001,0x40000000,0xff411006,0x00001001,0xc0000460,
  0xff50000f,0x04000011,0x1384d084,0x00000000,0x00000010,0x10000011,0x278cd884,
  0x00000000,0x00000000,0xff810000,0x04000011,0x6786d089,0x00000000,0x00000020,
  0x10000011,0x278cd889,0x00000000,0x00000000,0xff810000,0x04000001,0x11c0c080,
  0x00004001,0xf0000000,0x00001001,0xc0000c20,0xff000000,0xff500010,0x04000001,
  0x208b8e20,0x00004001,0x40000000,0xff411007,0x00001001,0xc0000440,0x04000011,
  0x678cd889,0x00000000,0x00000000,0xff810000,0x04000001,0x21848960,0x00004001,
  0x40000000,0xff411008,0x00001001,0xc0000460,0x04000011,0x1384d089,0x00000000,
  0x00000010,0x04000011,0x11c0d88a,0x00000000,0x00000000,0xff810000,0x10000001,
  0x2789c08a,0x04000001,0x1184c884,0x04000001,0x108ec88e,0x00004001,0x40000000,
  0xff41100e,0x00001001,0xc0000420,0xff500011,0x04000001,0x208bc040,0x00004001,
  0x40000000,0xff41100f,0x00001001,0xc0000440,0x04000001,0x138b8e8b,0x04000001,
  0x11848b84,0x00004001,0x40000000,0xff41100f,0x00001001,0xc0000420,0xff500012,
  0x10000011,0x278cd884,0x00000000,0x00000000,0xff810000,0x10000001,0x2686c08e,
  0x04000001,0x108bc001,0x04000001,0x118cc000,0x00004001,0x40000000,0xff311000,
  0x00009012,0xc0000420,0x50000008,0x00000000,0x04000011,0x678cd884,0x00000000,
  0x00000000,0xff810000,0x00004001,0x40000000,0xff41100d,0x00001001,0xc0000420,
  0xff50001a,0x00008011,0x00000000,0x00000000,0x00000190,0x00008001,0x440000c8,
  0x04000001,0x1180c086,0x04000001,0x1181c080,0xff500017,0x04000011,0x6786d08c,
  0x00000000,0x00000010,0x04000011,0x678cd88c,0x00000000,0x00000000,0xff810000,
  0x04000011,0x11c0d889,0x00000000,0x00000000,0xff810000,0x10000011,0x268cd889,
  0x00000000,0x00000000,0xff810000,0x00004001,0xf0000000,0x00001001,0xc0000c20,
  0xff50001b,0x00008011,0x00000000,0x00000000,0x00000190,0x00008001,0x440000c8,
  0x04000011,0x0180d880,0x00000000,0x00000000,0xff810000,0x04000001,0x1180c086,
  0xff50001c,0x04000011,0x6786d08c,0x00000000,0x00000010,0x04000011,0x11c0d88e,
  0x00000000,0x00000000,0xff810000,0x04000011,0x678cd884,0x00000000,0x00000000,
  0xff810000,0x04000011,0x678cd888,0x00000000,0x00000000,0xff810000,0x04000011,
  0x1188d888,0x00000000,0x00000000,0xff810000,0x04000011,0x6784d887,0x00000000,
  0xfffffff8,0x04000011,0x11c0dc8b,0xffff7fff,0xffffffff,0x04000001,0x6784c08c,
  0x10000011,0x2784d88b,0x00000000,0xfffffff0,0x10000011,0x2784d88c,0x00000000,
  0xfffffff8,0x04000011,0x13c0d08b,0x00000000,0x00000010,0x04000011,0x11c0d889,
  0x00000000,0x00000000,0xff810000,0x10000011,0x2688d889,0x00000000,0x00000000,
  0xff810000,0x00004001,0x40000000,0xff411016,0x00001001,0xc0000420,0xff000000,
  0xff50001d,0x04000011,0x11c0d801,0x00000000,0x00000000,0xff810000,0x00004001,
  0x40000000,0xff411002,0x00001001,0xc0000420,0xff50001e,0x04000011,0x138ed08e,
  0x00000000,0x00000010,0x00004001,0x40000000,0xff411001,0x00001001,0xc0000420,
  0xff50001f,0x04000001,0x11848e8e,0x04000001,0x138ec88e,0xff50000b,0x04000011,
  0x6487d88b,0x00000000,0x00000000,0xff810000,0x04000001,0x1187c487,0x10000011,
  0x278cd884,0x00000000,0x00000000,0xff810000,0x10000011,0x278cd88e,0x00000000,
  0x00000000,0xff810000,0x10000011,0x2786d087,0x00000000,0x00000018,0x04000001,
  0x118bc001,0xff50000c,0x04000001,0x118cc000,0x00004001,0x40000000,0xff311000,
  0x00009012,0xc0000420,0x50000008,0x00000000,0x04000011,0x678cd884,0x00000000,
  0x00000000,0xff810000,0x04000011,0x678cd88e,0x00000000,0x00000000,0xff810000,
  0x04000011,0x6784d88c,0x00000000,0xfffffff0,0x04000011,0x198cd08c,0x00000000,
  0x00000011,0x04000011,0x1b8cd08c,0x00000000,0x00000011,0x04000001,0x138e848e,
  0x04000001,0x118ec88e,0x04000011,0x678cd887,0x00000000,0x00000000,0xff810000,
  0x04000001,0x6687c08b,0x04000011,0x018bd089,0x00000000,0x000000ff,0x04000001,
  0x1b8bc58b,0x04000011,0x018bd08b,0x00000000,0x000007f8,0x04000001,0x1187c487,
  0x04000001,0x1989c389,0x04000001,0x67898889,0x04000001,0x61c089d1,0x00001001,
  0xc0000420,0xff500020,0x00008011,0x00000000,0x00000000,0x00000190,0x00008001,
  0x440000c8,0x04000001,0x1180c08c,0x04100011,0x58ecd886,0x01c00000,0xffffffd0,
  0x10000011,0x2786d080,0x00000000,0x00000010,0x04000001,0x1181c08b,0x04000011,
  0x11c0d887,0x00000000,0x00000000,0xff810000,0x04000001,0x11c0c08e,0x04000011,
  0x1186d885,0x00000000,0x00000000,0xff810000,0x04000011,0x678cd888,0x00000000,
  0x00000000,0xff810000,0x04000011,0x1188d888,0x00000000,0x00000000,0xff810000,
  0x10000011,0x2786d08e,0x00000000,0x00000018,0x10000011,0x2786d08e,0x00000000,
  0x00000020,0x10000001,0x2686c88e,0x10000001,0x2686cc8e,0x10000011,0x278cd885,
  0x00000000,0x00000000,0xff810000,0x04000011,0x648cd889,0x00000000,0x00000000,
  0xff810000,0x04000001,0x2189c040,0x00004001,0x40000000,0xff411002,0x00001001,
  0xc0000440,0x10000011,0x2788d88c,0x00000000,0x00000000,0xff810000,0x04000011,
  0x11c0d889,0x00000000,0x00000000,0xff810000,0x10000011,0x2688d889,0x00000000,
  0x00000000,0xff810000,0x10000011,0x248cd88e,0x00000000,0x00000000,0xff810000,
  0x04000011,0x678cd884,0x00000000,0x00000000,0xff810000,0x04000011,0x678cd88e,
  0x00000000,0x00000000,0xff810000,0x04000001,0x138e8b8e,0x04000001,0x118ec88e,
  0x04000001,0x138b848b,0x04000011,0x6784d887,0x00000000,0xfffffff8,0x10000001,
  0x2686c08e,0x04000011,0x2287d840,0x00000000,0x00000000,0xff810000,0x00004001,
  0x40000000,0xff411018,0x00001001,0xc0000440,0x00004001,0x40000000,0xff411019,
  0x00001001,0xc0000420,0xff000000,0xff500021,0x00008011,0x00000000,0x00000000,
  0x00000190,0x00008001,0x440000c8,0x04000011,0x11c0d887,0x00000000,0x00000000,
  0xff810000,0x04100011,0x58ecd886,0x01c00000,0xffffffd0,0x10000001,0x2686cc83,
  0x00004001,0x40000000,0xff411001,0x00001001,0xc0000420,0xff500022,0x00008011,
  0x00000000,0x00000000,0x00000190,0x00008001,0x440000c8,0x04100011,0x58ecd886,
  0x01c00000,0xffffffd0,0x04000011,0x11c0d887,0x00000000,0x00000000,0xff810000,
  0xff50000b,0x10000001,0x2686c882,0x10000011,0x2786d080,0x00000000,0x00000010,
  0x04000001,0x1180c08c,0x04000001,0x1181c08b,0x04000011,0x678cd888,0x00000000,
  0x00000000,0xff810000,0x04000011,0x678cd885,0x00000000,0x00000000,0xff810000,
  0x10000011,0x2786d085,0x00000000,0x00000020,0x10000011,0x2786d08c,0x00000000,
  0x00000018,0x04000011,0x1188d888,0x00000000,0x00000000,0xff810000,0x10000011,
  0x278cd886,0x00000000,0x00000000,0xff810000,0xff50000c,0xac004045,0x11878b87,
  0x11c0d889,0x678cd984,0x678cda8e,0x40000000,0x00000000,0x00000000,0x00000000,
  0x00000000,0xff455023,0xff830000,0xff820000,0xff810000,0x10000011,0x2788d88c,
  0x00000000,0x00000000,0xff810000,0x140000a2,0x678bd88c,0x2688d989,0x00000000,
  0x00000000,0xfffffff0,0xff820000,0x24000012,0x13878487,0x118bc001,0x00000000,
  0x2c000033,0x1d8cd08f,0x018cdd8c,0x138e018e,0x00000000,0x00007fff,0xffffffff,
  0x0000002f,0x2c0000a3,0xe78cd800,0x208fd940,0x118ec88e,0x00000000,0x00000000,
  0xff820000,0xff810000,0x20011012,0xc0000460,0x1101c084,0x44600000,0x30000112,
  0x6400c08a,0x6600c08b,0x00000000,0x14000012,0x198ac38a,0x2784d887,0xfffffff8,
  0x2c000113,0x678a888a,0x1100c487,0x1b8bc58b,0x24000012,0x61c08ad1,0x018bd08b,
  0x000007f8,0x00001001,0xc0000420,0xff500024,0x00008011,0x040000c8,0x00000000,
  0x00000190,0x1c100033,0x58ecd886,0x1180c08c,0x6780d98a,0x01c00000,0x00000000,
  0x00000000,0xffffffd0,0xff820000,0x140000a2,0x678cd889,0x678cd988,0x00000000,
  0x00000000,0x00000000,0xff820000,0xff810000,0x14000012,0x61c083d1,0x2786d08c,
  0x00000010,0x1c000023,0x13898a89,0x11c0c08a,0x2786d08c,0x00000000,0x00000018,
  0x14000012,0x1188d888,0x2686cc8a,0x00000000,0xff810000,0x14000012,0x678cd889,
  0x2686c889,0x00000000,0xff810000,0x14000012,0x1180c000,0x2786d089,0x00000020,
  0x14000012,0x1181c001,0x278cd886,0x00000000,0xff810000,0x14009024,0xc0000420,
  0x1182c002,0x2788d88c,0x50000008,0x00000000,0xff810000,0x04000011,0xe786d089,
  0x00000000,0x00000020,0x00004001,0x40000000,0xff41100c,0x00000080,0x00000000,
  0x08004012,0x2100c040,0xf0000000,0x00000000,0x14010022,0x11c0c080,0x278cd889,
  0x00000000,0x00000000,0x04601060,0xff820000,0x00001001,0xc0000c40,0x0c001023,
  0xc0000420,0x1100c08b,0x11c0d887,0x00000000,0x00000000,0xff810000,0xff000000,
  0xff500015,0x04000001,0x11848b8b,0x04000011,0x0187d887,0x00000000,0xfffffff8,
  0x04000001,0x1184c08c,0x04000001,0x13848784,0x04000011,0x11c0d889,0x00000000,
  0x00000000,0xff810000,0x04000001,0x118b8e8a,0x10000011,0x278ad889,0x00000000,
  0xfffffff8,0x04000001,0x118bc000,0x04000011,0x678cd887,0x00000000,0xffffffe8,
  0x04000011,0x678cd88b,0x00000000,0xffffffe0,0x04000001,0x218bc160,0x00004001,
  0x40000000,0xff411001,0x00001001,0xc0000440,0x04000011,0x6784d885,0x00000000,
  0xfffffff0,0x04000011,0x1985d085,0x00000000,0x00000011,0x04000011,0x1b85d085,
  0x00000000,0x00000011,0x04000011,0x6785d885,0x00000000,0x00000000,0xff810000,
  0x04000011,0x6785d885,0x00000000,0x00000000,0xff810000,0x04000001,0x61c08bd1,
  0x00001001,0xc0000420,0xff50000b,0x04000001,0x218bc140,0x00004001,0x40000000,
  0xff411025,0x00001001,0xc0000440,0x04000001,0x138c848c,0x04000011,0x138cd08e,
  0x00000000,0x00000018,0x00004001,0x40000000,0xff411026,0x00001001,0xc0000420,
  0xff500027,0x04000011,0x6487d88b,0x00000000,0xffffffff,0x04000011,0x138cd08c,
  0x00000000,0x00000020,0x04000001,0x198bc38b,0x04000001,0x11848b8b,0x04000001,
  0x138b8c8b,0x04000001,0x218bc040,0x00004001,0x40000000,0xff411028,0x00001001,
  0xc0000440,0x04000001,0x13c08b8b,0x04000001,0x1b8bc38b,0x04000001,0x118bc002,
  0x04000001,0x6700c08b,0x10000001,0x278cc08b,0x04000001,0x118cc001,0x04000011,
  0x6786d000,0x00000000,0x00000010,0x10000011,0x2700d884,0x00000000,0x00000000,
  0xff810000,0x00004001,0x40000000,0xff411029,0x00001001,0xc0000420,0xff50002a,
  0x04000011,0x11c0d88f,0x00000000,0x00000000,0xff810000,0x04000011,0x198fd08f,
  0x00000000,0x0000002f,0x04000001,0x058d8f8d,0x04000011,0x1188d889,0x00000000,
  0x00000000,0xff810000,0x10000001,0x2789c08d,0x04000001,0x1189c08d,0x04000011,
  0x6487d88a,0x00000000,0xfffffffc,0x04000011,0x218ad840,0x00000000,0x00000000,
  0xff810000,0x00004001,0x40000000,0xff411001,0x00001001,0xc0000460,0x04000011,
  0x11c0d88b,0x00000000,0x00000000,0xff810000,0x04000011,0x198bd08b,0x00000000,
  0x0000002f,0x04000001,0x058b8c8b,0x04000011,0x1188d88c,0x00000000,0x00000000,
  0xff810000,0x10000001,0x278cc08b,0x00004001,0x40000000,0xff411002,0x00001001,
  0xc0000420,0xff50002b,0x04000011,0x6487d88d,0x00000000,0xfffffffe,0x04000001,
  0x3ec48d89,0x04000011,0x1188d88d,0x00000000,0x00000000,0xff810000,0x10000001,
  0x278dc089,0x00004001,0x40000000,0xff411001,0x00001001,0xc0000420,0xff50002c,
  0x04000011,0x6487d88d,0x00000000,0xfffffffe,0x04000001,0x198dc38d,0x04000001,
  0x11848d8d,0xff000000,0xff50000b,0x04000011,0x6487d88c,0x00000000,0xffffffff,
  0x04000001,0x198cc38c,0x04000001,0x11848c8c,0xff50000c,0x04000011,0x6786d000,
  0x00000000,0x00000010,0x10000011,0x2700d884,0x00000000,0x00000000,0xff810000,
  0x04000001,0x118cc001,0x04000001,0x118dc002,0x04000001,0x1100c08c,0x10000011,
  0x2786d087,0x00000000,0x00000018,0x00004001,0x40000000,0xff311001,0x00009012,
  0xc0000420,0x50000008,0x00000000,0x04000011,0x678cd884,0x00000000,0x00000000,
  0xff810000,0x04000001,0x2100c040,0x00004001,0x40000000,0xff411003,0x00001001,
  0xc0000440,0xff500028,0x04000011,0x6487d88b,0x00000000,0xfffffffd,0x04000001,
  0x198bc38b,0x04000001,0x6700c08c,0x10000001,0x27848b8c,0x1c000113,0x6687c089,
  0x1187c487,0x6487c08a,0xf0000024,0x198ac38a,0x1b89cd8e,0x1b89d08c,0x1b89c58b,
  0x00000015,0x60000022,0x018ed88e,0x018bd18b,0x00000000,0x000007f8,0x0007fff8,
  0x70000123,0x678a888a,0x018cd08c,0x018ed18d,0x000007f8,0x000007f8,0x04000001,
  0x61c08ad1,0x00001001,0xc0000420,0xff50000d,0x04000011,0x678cd88b,0x00000000,
  0x00000000,0xff810000,0x10000011,0x278bd887,0x00000000,0xffffffe8,0x04000011,
  0x118bd887,0x00000000,0x00000000,0xff810000,0x04000001,0x13878487,0x04000011,
  0x678bd88c,0x00000000,0xfffffff0,0x04000011,0x11c0d88e,0x00000000,0x00000000,
  0xff810000,0x04000011,0x198cd08c,0x00000000,0x00000011,0x04000011,0x1b8cd08c,
  0x00000000,0x00000011,0x04000001,0x118bc084,0x10000011,0x2784d887,0x00000000,
  0xfffffff8,0x04000011,0x678cd887,0x00000000,0x00000000,0xff810000,0x04000001,
  0x6687c08b,0x04000011,0x018bd089,0x00000000,0x000000ff,0x04000001,0x1b8bc58b,
  0x04000011,0x018bd08b,0x00000000,0x000007f8,0x04000001,0x1187c487,0x04000001,
  0x1989c389,0x04000001,0x67898889,0x04000001,0x61c089d1,0x00001001,0xc0000420,
  0xff50002d,0x04000001,0x118cc000,0x04000001,0x108dc001,0x00004001,0x40000000,
  0xff311002,0x00009012,0xc0000420,0x50000008,0x00000000,0x04000011,0x6487d88b,
  0x00000000,0xfffffffd,0x04000001,0x198bc38b,0x04000001,0x2100c040,0x00004001,
  0x40000000,0xff411001,0x00001001,0xc0000460,0x04000011,0x11c0d88f,0x00000000,
  0x00000000,0xff810000,0x00004001,0x40000000,0xff411002,0x00001001,0xc0000420,
  0xff50000b,0x04000001,0x6700c08f,0xff50000c,0x10000001,0x27848b8f,0x1c000113,
  0x6687c089,0x1187c487,0x6487c08a,0xf0000024,0x198ac38a,0x1b89cd8e,0x1b89d08c,
  0x1b89c58b,0x00000015,0x60000022,0x018ed88e,0x018bd18b,0x00000000,0x000007f8,
  0x0007fff8,0x70000123,0x678a888a,0x018cd08c,0x018ed18d,0x000007f8,0x000007f8,
  0x04000001,0x61c08ad1,0x00001001,0xc0000420,0xff50002e,0x04000011,0x11c0d88f,
  0x00000000,0x00000000,0xff810000,0x04000011,0x198fd08f,0x00000000,0x0000002f,
  0x04000001,0x058d8f8d,0x10000011,0x2786d08d,0x00000000,0x00000028,0x04000011,
  0x1186d08d,0x00000000,0x00000028,0x04000011,0x6487d889,0x00000000,0xfffffffc,
  0x04000011,0x2189d840,0x00000000,0x00000000,0xff810000,0x00004001,0x40000000,
  0xff411001,0x00001001,0xc0000460,0x04000011,0x11c0d88b,0x00000000,0x00000000,
  0xff810000,0x04000011,0x198bd08b,0x00000000,0x0000002f,0x04000001,0x058b8c8b,
  0x04000011,0x1188d88c,0x00000000,0x00000000,0xff810000,0x10000001,0x278cc08b,
  0x00004001,0x40000000,0xff411002,0x00001001,0xc0000420,0xff000000,0xff50002f,
  0x04000011,0x6487d88d,0x00000000,0xfffffffe,0x04000001,0x3ec48d8d,0x10000011,
  0x2786d08d,0x00000000,0x00000028,0x04000011,0x1186d08d,0x00000000,0x00000028,
  0x00004001,0x40000000,0xff411001,0x00001001,0xc0000420,0xff500030,0x04000011,
  0x6487d88d,0x00000000,0xfffffffe,0x04000001,0x198dc38d,0x04000001,0x11848d8d,
  0xff50000b,0x04000011,0x6487d88c,0x00000000,0xffffffff,0x04000001,0x198cc38c,
  0x04000001,0x11848c8c,0xff50000c,0x04000011,0x6786d000,0x00000000,0x00000010,
  0x10000011,0x2700d884,0x00000000,0x00000000,0xff810000,0x04000001,0x118cc001,
  0x04000001,0x118dc002,0x04000001,0x1100c08c,0x10000011,0x2786d087,0x00000000,
  0x00000018,0x00004001,0x40000000,0xff311003,0x00009012,0xc0000420,0x50000008,
  0x00000000,0x04000011,0x678cd884,0x00000000,0x00000000,0xff810000,0x04000001,
  0x2100c040,0x00004001,0x40000000,0xff411003,0x00001001,0xc0000440,0x04000011,
  0x6487d88b,0x00000000,0xfffffffd,0x04000001,0x198bc38b,0x04000001,0x67848b8c,
  0x10000001,0x2700c08c,0xff500031,0x1c000113,0x6687c089,0x1187c487,0x6487c08a,
  0xf0000024,0x198ac38a,0x1b89cd8e,0x1b89d08c,0x1b89c58b,0x00000015,0x60000022,
  0x018ed88e,0x018bd18b,0x00000000,0x000007f8,0x0007fff8,0x70000123,0x678a888a,
  0x018cd08c,0x018ed18d,0x000007f8,0x000007f8,0x04000001,0x61c08ad1,0x00001001,
  0xc0000420,0xff50000d,0x04000011,0x678cd88b,0x00000000,0x00000000,0xff810000,
  0x10000011,0x278bd887,0x00000000,0xffffffe8,0x04000011,0x6487d88d,0x00000000,
  0xfffffffd,0x04000001,0x198dc38d,0x04000001,0x67848d8c,0x10000011,0x278bd08c,
  0x00000000,0x00000010,0x04000011,0x118bd887,0x00000000,0x00000000,0xff810000,
  0x04000001,0x13878487,0x04000011,0x678bd88c,0x00000000,0xfffffff0,0x04000011,
  0x11c0d88e,0x00000000,0x00000000,0xff810000,0x04000011,0x198cd08c,0x00000000,
  0x00000011,0x04000011,0x1b8cd08c,0x00000000,0x00000011,0x04000001,0x118bc084,
  0x10000011,0x2784d887,0x00000000,0xfffffff8,0x04000011,0x678cd887,0x00000000,
  0x00000000,0xff810000,0x04000001,0x6687c08b,0x04000011,0x018bd089,0x00000000,
  0x000000ff,0x04000001,0x1b8bc58b,0x04000011,0x018bd08b,0x00000000,0x000007f8,
  0x04000001,0x1187c487,0x04000001,0x1989c389,0x04000001,0x67898889,0x04000001,
  0x61c089d1,0x00001001,0xc0000420,0xff500032,0x04000011,0x6786d000,0x00000000,
  0x00000010,0x04000001,0x118cc001,0x10000011,0x2700d884,0x00000000,0x00000000,
  0xff810000,0x04000001,0x108dc002,0x10000011,0x2786d087,0x00000000,0x00000018,
  0x00004001,0x40000000,0xff311004,0x00009012,0xc0000420,0x50000008,0x00000000,
  0x04000011,0x6487d88b,0x00000000,0xfffffffd,0x04000001,0x198bc38b,0x04000001,
  0x67848b8f,0x10000001,0x2700c08f,0x1c000113,0x6687c089,0x1187c487,0x6487c08a,
  0xf0000024,0x198ac38a,0x1b89cd8e,0x1b89d08c,0x1b89c58b,0x00000015,0x60000022,
  0x018ed88e,0x018bd18b,0x00000000,0x000007f8,0x0007fff8,0x70000123,0x678a888a,
  0x018cd08c,0x018ed18d,0x000007f8,0x000007f8,0x04000001,0x61c08ad1,0x00001001,
  0xc0000420,0xff500033,0x04000011,0x6587d88e,0x00000000,0xfffffffe,0x04000001,
  0x198ec38e,0x04000011,0x6487d88b,0x00000000,0xfffffffd,0x04000001,0x198bc38b,
  0x04000011,0x6786d08c,0x00000000,0x00000010,0x10000011,0x278cd884,0x00000000,
  0x00000000,0xff810000,0x04000001,0x11848b01,0x04000001,0x11848e02,0x04000001,
  0x118cc000,0x04000011,0x6487d803,0x00000000,0xfffffffc,0x10000011,0x2786d087,
  0x00000000,0x00000018,0x00004001,0x40000000,0xff311005,0x00009012,0xc0000420,
  0x50000008,0x00000000,0xff50000d,0x04000011,0x678cd884,0x00000000,0x00000000,
  0xff810000,0x04000001,0x2100c160,0x00004001,0x40000000,0xff411034,0x00001001,
  0xc0000460,0xff000000,0xff50000e,0x04000001,0x1187c487,0x04000001,0x2100c120,
  0x00004001,0x40000000,0xff411006,0x00001001,0xc0000440,0xff50000f,0x04000011,
  0x6587d88e,0x00000000,0xfffffffe,0x04000001,0x198ec28e,0x04000001,0x11878e87,
  0x04000011,0x1387d887,0x00000000,0x00000000,0xff810000,0xff500010,0x1c000113,
  0x6687c089,0x1187c487,0x6487c08a,0xf0000024,0x198ac38a,0x1b89cd8e,0x1b89d08c,
  0x1b89c58b,0x00000015,0x60000022,0x018ed88e,0x018bd18b,0x00000000,0x000007f8,
  0x0007fff8,0x70000123,0x678a888a,0x018cd08c,0x018ed18d,0x000007f8,0x000007f8,
  0x04000001,0x61c08ad1,0x00001001,0xc0000420,0xff500035,0x04000001,0x1187c487,
  0x04000001,0x6700c08f,0x04000011,0x1d8fd08f,0x00000000,0x0000002f,0x04000011,
  0x208fd820,0x00000000,0x00000000,0xff810000,0x00004001,0x40000000,0xff41100f,
  0x00001001,0xc0000440,0x00004001,0x40000000,0xff411010,0x00001001,0xc0000420,
  0xff500036,0x04000001,0x1187c487,0x04000001,0x6700c08f,0x04000011,0x1d8fd08f,
  0x00000000,0x0000002f,0x04000011,0x208fd820,0x00000000,0x00000000,0xff810000,
  0x00004001,0x40000000,0xff411010,0x00001001,0xc0000440,0x00004001,0x40000000,
  0xff41100f,0x00001001,0xc0000420,0xff500037,0x04000011,0x198ed08e,0x00000000,
  0x00000011,0x04000011,0x1b8ed08e,0x00000000,0x00000011,0x04000001,0x1387c487,
  0x04000001,0x118bc001,0x04000001,0x118cc003,0x04000011,0x6786d08c,0x00000000,
  0x00000010,0x10000011,0x278cd884,0x00000000,0x00000000,0xff810000,0x04000001,
  0x118ec002,0x04000001,0x118cc000,0x10000011,0x2786d087,0x00000000,0x00000018,
  0x00004001,0x40000000,0xff311006,0x00009012,0xc0000420,0x50000008,0x00000000,
  0x00004001,0x40000000,0xff41100d,0x00001001,0xc0000420,0xff500038,0x04000001,
  0x1387c487,0x04000011,0x6786d08c,0x00000000,0x00000010,0x10000011,0x278cd884,
  0x00000000,0x00000000,0xff810000,0x04000001,0x118cc000,0x04000011,0x6687d801,
  0x00000000,0xfffffffc,0x10000011,0x2786d087,0x00000000,0x00000018,0x00004001,
  0x40000000,0xff311007,0x00009012,0xc0000420,0x50000008,0x00000000,0x00004001,
  0x40000000,0xff41100d,0x00001001,0xc0000420,0xff500039,0x04000011,0x6786d08c,
  0x00000000,0x00000010,0x10000011,0x278cd884,0x00000000,0x00000000,0xff810000,
  0x04000001,0x1b8ec302,0x04000001,0x1b8bc301,0x04000001,0x118cc000,0x10000011,
  0x2786d087,0x00000000,0x00000018,0x00004001,0x40000000,0xff311008,0x00009012,
  0xc0000420,0x50000008,0x00000000,0x04000011,0x678cd884,0x00000000,0x00000000,
  0xff810000,0x00004001,0x40000000,0xff411010,0x00001001,0xc0000420,0xff000000,
  0xff50003a,0x04000001,0x11858d8d,0x00004001,0x40000000,0xff411001,0x00001001,
  0xc0000420,0xff50003b,0x04000001,0x11858d89,0x04000001,0x11848c8d,0x04000001,
  0x1189c08c,0x00004001,0x40000000,0xff411002,0x00001001,0xc0000420,0xff50003c,
  0x04000001,0x11848e8d,0x04000001,0x118dc08c,0x00004001,0x40000000,0xff411002,
  0x00001001,0xc0000420,0xff50003d,0x04000001,0x11848d8d,0xff50000b,0x04000001,
  0x11848c8c,0xff50000c,0x04000001,0x11848b8b,0x04000011,0x6487d804,0x00000000,
  0xfffffffc,0x04000001,0x118bc001,0x04000001,0x118dc003,0x04000011,0x6786d000,
  0x00000000,0x00000010,0x10000011,0x2700d884,0x00000000,0x00000000,0xff810000,
  0x04000001,0x118cc002,0x04000001,0x1100c08c,0x10000011,0x2786d087,0x00000000,
  0x00000018,0x00004001,0x40000000,0xff311009,0x00009012,0xc0000420,0x50000008,
  0x00000000,0x04000011,0x678cd884,0x00000000,0x00000000,0xff810000,0x04000001,
  0x2100c040,0x00004001,0x40000000,0xff411031,0x00001001,0xc0000440,0xff500034,
  0x04000001,0x1100c08b,0x04000001,0x13008400,0x10000011,0x278bd887,0x00000000,
  0xffffffe8,0x04000011,0x1100d887,0x00000000,0x00000000,0xff810000,0x04000011,
  0x11c0d88e,0x00000000,0x00000000,0xff810000,0x04000011,0x678bd88c,0x00000000,
  0xfffffff0,0x04000001,0x118cc08f,0x04000011,0x198cd08c,0x00000000,0x00000011,
  0x04000011,0x1b8cd08c,0x00000000,0x00000011,0x04000011,0x1d8fd08f,0x00000000,
  0x0000002f,0x04000011,0x208fd840,0x00000000,0x00000000,0xff810000,0x00004001,
  0x40000000,0xff411023,0x00001001,0xc0000460,0x04000001,0x118bc084,0x10000011,
  0x2784d887,0x00000000,0xfffffff8,0x04000011,0x678cd887,0x00000000,0x00000000,
  0xff810000,0x04000001,0x6687c08b,0x04000011,0x018bd089,0x00000000,0x000000ff,
  0x04000001,0x1b8bc58b,0x04000011,0x018bd08b,0x00000000,0x000007f8,0x04000001,
  0x1187c487,0x04000001,0x1989c389,0x04000001,0x67898889,0x04000001,0x61c089d1,
  0x00001001,0xc0000420,0xff50003e,0x04000011,0x6587d88e,0x00000000,0xfffffffe,
  0x04000001,0x198ec38e,0x04000011,0x6786d08c,0x00000000,0x00000010,0x10000011,
  0x278cd884,0x00000000,0x00000000,0xff810000,0x04000001,0x11848e01,0x04000001,
  0x118cc000,0x10000011,0x2786d087,0x00000000,0x00000018,0x00004001,0x40000000,
  0xff31100a,0x00009012,0xc0000420,0x50000008,0x00000000,0x04000011,0x678cd884,
  0x00000000,0x00000000,0xff810000,0xff000000,0x04000001,0x2100c040,0x00004001,
  0x40000000,0xff411034,0x00001001,0xc0000460,0x04000011,0x6587d88e,0x00000000,
  0xfffffffe,0x04000001,0x198ec38e,0x04000001,0x67848e00,0x04000011,0x1900d000,
  0x00000000,0x00000011,0x04000011,0x1b00d000,0x00000000,0x00000011,0x00004001,
  0x40000000,0xff41103f,0x00001001,0xc0000420,0xff000000,0x00004001,0x40000000,
  0xff411034,0x00001001,0xc0000420,0xff000000,0xff500023,0x04000011,0x6786d000,
  0x00000000,0x00000010,0x10000011,0x2700d884,0x00000000,0x00000000,0xff810000,
  0x04000011,0x138bd001,0x00000000,0x00000010,0x04000001,0x118b8e02,0x04000001,
  0x1302c802,0x10000011,0x2786d087,0x00000000,0x00000018,0x00004001,0x40000000,
  0xff31100b,0x00009012,0xc0000420,0x50000008,0x00000000,0x04000011,0x6786d08c,
  0x00000000,0x00000010,0x04000011,0x678cd884,0x00000000,0x00000000,0xff810000,
  0x04000011,0x678bd88c,0x00000000,0xfffffff0,0x04000001,0x118ec88e,0x04000001,
  0x21858440,0x00004001,0x40000000,0xff411040,0x00001001,0xc0000440,0x04000011,
  0x198cd08c,0x00000000,0x00000011,0x04000011,0x1b8cd08c,0x00000000,0x00000011,
  0x04000001,0x118bc084,0x10000011,0x2784d887,0x00000000,0xfffffff8,0x04000011,
  0x678cd887,0x00000000,0x00000000,0xff810000,0x04000001,0x6687c08b,0x04000011,
  0x018bd089,0x00000000,0x000000ff,0x04000001,0x1b8bc58b,0x04000011,0x018bd08b,
  0x00000000,0x000007f8,0x04000001,0x1187c487,0x04000001,0x1989c389,0x04000001,
  0x67898889,0x04000001,0x61c089d1,0x00001001,0xc0000420,0xff500041,0x04000011,
  0x6786d08c,0x00000000,0x00000010,0x10000011,0x278cd884,0x00000000,0x00000000,
  0xff810000,0x04000001,0x118bc001,0x04000001,0x118cc000,0x10000011,0x2786d087,
  0x00000000,0x00000018,0x00004001,0x40000000,0xff31100c,0x00009012,0xc0000420,
  0x50000008,0x00000000,0x04000011,0x678cd884,0x00000000,0x00000000,0xff810000,
  0x04000011,0x6687d889,0x00000000,0xfffffffc,0x04000001,0x1b89c58b,0x04000011,
  0x018bd08b,0x00000000,0x000007f8,0x04000011,0x0189d08a,0x00000000,0x000000ff,
  0x04000001,0x198ac38a,0x04000001,0x11888a8a,0x04000011,0x678ad88a,0x00000000,
  0x00000000,0xff810000,0x04000001,0x61c08ad1,0x00001001,0xc0000420,0xff500042,
  0x04000011,0x218ed820,0x00000000,0x00000000,0xff810000,0x00004001,0x40000000,
  0xff411043,0x00001001,0xc0000440,0x04000001,0x6784c08f,0x04000001,0x118fc08c,
  0x04000011,0x1d8fd08f,0x00000000,0x0000002f,0x04000011,0x208fd820,0x00000000,
  0x00000000,0xff810000,0x00004001,0x40000000,0xff411043,0x00001001,0xc0000460,
  0x04000011,0x6784d887,0x00000000,0xfffffff8,0x10000001,0x2686c08e,0x10000011,
  0x2784d88c,0x00000000,0xfffffff0,0x04000011,0x138ed08e,0x00000000,0x00000010,
  0x04000001,0x218ec040,0x00004001,0x40000000,0xff411002,0x00001001,0xc0000440,
  0x04000001,0x1184c08b,0xff50000b,0x04000001,0x118bc88b,0x04000001,0x678bc08c,
  0x10000011,0x278bd88c,0x00000000,0xfffffff0,0x04000001,0x138ec88e,0x04000001,
  0x218ec040,0x00004001,0x40000000,0xff41100b,0x00001001,0xc0000460,0xff50000c,
  0x04000001,0x6686c08e,0x00004001,0x40000000,0xff411044,0x00001001,0xc0000420,
  0xff500045,0x04000011,0x218ed820,0x00000000,0x00000000,0xff810000,0x00004001,
  0x40000000,0xff411043,0x00001001,0xc0000440,0x04000001,0x6784c08d,0x04000011,
  0x1d8dd08d,0x00000000,0x0000002f,0x04000011,0x10c0d88c,0x00000000,0x00000000,
  0xff810000,0x04000001,0x208d8c20,0x00004001,0x40000000,0xff411001,0x00001001,
  0xc0000460,0x04000001,0x108cc08d,0xff000000,0xff50000b,0x04000011,0x088dd88d,
  0x00000000,0xffffffff,0x04000001,0x188dc38d,0x04000001,0x0cc68d8d,0xff50000c,
  0x04000011,0x6784d88c,0x00000000,0xfffffff0,0x04000011,0x198cd08c,0x00000000,
  0x00000011,0x04000011,0x1b8cd08c,0x00000000,0x00000011,0x04000001,0x118c8d89,
  0x04000011,0x6789d88d,0x00000000,0x00000000,0xff810000,0x04000011,0x6784d887,
  0x00000000,0xfffffff8,0x04000011,0x11c0d88f,0x00000000,0x00000000,0xff810000,
  0x04000011,0x198fd08f,0x00000000,0x0000002f,0x04000001,0x058d8f8d,0x10000011,
  0x2784d88d,0x00000000,0xfffffff0,0x04000011,0x11c0d88e,0x00000000,0x00000000,
  0xff810000,0x00004001,0x40000000,0xff411044,0x00001001,0xc0000420,0xff500046,
  0x04000011,0x218ed820,0x00000000,0x00000000,0xff810000,0x00004001,0x40000000,
  0xff411043,0x00001001,0xc0000440,0x04000001,0x6784c08c,0x04000011,0x6784d887,
  0x00000000,0xfffffff8,0x04000001,0x118cc08f,0x04000011,0x198cd08c,0x00000000,
  0x00000011,0x04000011,0x1b8cd08c,0x00000000,0x00000011,0x04000011,0x1d8fd08f,
  0x00000000,0x0000002f,0x04000011,0x208fd840,0x00000000,0x00000000,0xff810000,
  0x00004001,0x40000000,0xff411006,0x00001001,0xc0000460,0xff50000b,0x04000011,
  0x678cd88c,0x00000000,0x00000000,0xff810000,0xff50000c,0x04000001,0x218cc040,
  0x04000011,0x11c0d889,0x00000000,0x00000000,0xff810000,0x10000011,0x2784d889,
  0x00000000,0xfffffff0,0x04000011,0x11c0d88e,0x00000000,0x00000000,0xff810000,
  0x00004001,0x40000000,0xff411044,0x00001001,0xc0000440,0x04000011,0x11c0d88d,
  0x00000000,0x00000000,0xff810000,0x04000011,0x198dd08d,0x00000000,0x0000002f,
  0x04000001,0x058d8c8d,0x10000011,0x2784d88d,0x00000000,0xfffffff0,0x04000011,
  0x6788d88d,0x00000000,0x00000000,0xff810000,0x04000011,0x668cd88b,0x00000000,
  0x00000000,0xff810000,0x04000011,0x668dd889,0x00000000,0x00000000,0xff810000,
  0x04000001,0x018b898b,0x04000011,0x11c0d88f,0x00000000,0x00000000,0xff810000,
  0x04000011,0x198fd08f,0x00000000,0x0000002f,0x04000001,0x058d8f8d,0x04100011,
  0x238bd88b,0x01c00000,0x00000000,0xff810000,0x04000011,0x678cd889,0x00000000,
  0x00000000,0xff810000,0x04000001,0x118b898b,0xff000000,0xff50000d,0x04000011,
  0x678bd889,0x00000000,0x00000000,0xff810000,0x04000001,0x21898d40,0x00004001,
  0x40000000,0xff411005,0x00001001,0xc0000440,0xff50000e,0x04000011,0x678bd88b,
  0x00000000,0x00000000,0xff810000,0x04000001,0x218bc040,0x00004001,0x40000000,
  0xff41100d,0x00001001,0xc0000460,0x04000011,0x11c0d88e,0x00000000,0x00000000,
  0xff810000,0x00004001,0x40000000,0xff411044,0x00001001,0xc0000420,0xff50000f,
  0x04000011,0x678bd88c,0x00000000,0x00000000,0xff810000,0x04000011,0x218cd840,
  0x00000000,0x00000000,0xff810000,0x04000011,0x11c0d88e,0x00000000,0x00000000,
  0xff810000,0x00004001,0x40000000,0xff411044,0x00001001,0xc0000440,0x10000011,
  0x2784d88c,0x00000000,0xfffffff0,0x04000011,0x11c0d88e,0x00000000,0x00000000,
  0xff810000,0x00004001,0x40000000,0xff411044,0x00001001,0xc0000420,0xff500010,
  0x04000011,0x208fd840,0x00000000,0x00000000,0xff810000,0x00004001,0x40000000,
  0xff41100b,0x00001001,0xc0000440,0x04000011,0x208fd860,0x00000000,0x00000000,
  0xff810000,0x00004001,0x40000000,0xff411007,0x00001001,0xc0000460,0x04000011,
  0x11c0d88f,0x00000000,0x00000000,0xff810000,0xff500011,0x04000011,0x098fdc8f,
  0xffffffff,0xffffffff,0x04000001,0x198fc389,0x04000011,0x1189d889,0x00000000,
  0x00000000,0xff810000,0x04000001,0x6788898c,0x00004001,0x40000000,0xff41100c,
  0x00001001,0xc0000420,0xff000000,0xff500047,0x04000011,0x218ed820,0x00000000,
  0x00000000,0xff810000,0x00004001,0x40000000,0xff411043,0x00001001,0xc0000440,
  0x04000001,0x6784c08c,0x04000001,0x118cc08a,0x04000001,0x118cc08f,0x04000011,
  0x198cd08c,0x00000000,0x00000011,0x04000011,0x1b8cd08c,0x00000000,0x00000011,
  0x04000011,0x1d8fd08f,0x00000000,0x0000002f,0x04000011,0x208fd840,0x00000000,
  0x00000000,0xff810000,0x00004001,0x40000000,0xff411043,0x00001001,0xc0000460,
  0x04000011,0x678cd889,0x00000000,0x00000000,0xff810000,0x04000001,0x2189c040,
  0x00004001,0x40000000,0xff411043,0x00001001,0xc0000460,0x04000001,0x6784c88b,
  0x04000001,0x118bc08f,0x04000011,0x198bd08b,0x00000000,0x00000011,0x04000011,
  0x1b8bd08b,0x00000000,0x00000011,0x04000011,0x1d8fd08f,0x00000000,0x0000002f,
  0x04000011,0x208fd840,0x00000000,0x00000000,0xff810000,0x00004001,0x40000000,
  0xff411043,0x00001001,0xc0000460,0x10000011,0x278cd88b,0x00000000,0x00000000,
  0xff810000,0x04000011,0x6784d887,0x00000000,0xfffffff8,0x10000011,0x2784d88a,
  0x00000000,0xfffffff0,0x04000011,0x648cd889,0x00000000,0x00000000,0xff810000,
  0x04000011,0x2389d840,0x00000000,0x00000000,0xff810000,0x00004001,0x40000000,
  0xff411001,0x00001001,0xc0000440,0x04000011,0x648cd88a,0x00000000,0x00000000,
  0xff810000,0x04000011,0x018ad88a,0x00000000,0x00000000,0xff810000,0x10000011,
  0x248cd88a,0x00000000,0x00000000,0xff810000,0x04000011,0x6788d889,0x00000000,
  0x00000000,0xff810000,0x10000011,0x2788d88c,0x00000000,0x00000000,0xff810000,
  0x10000011,0x278cd889,0x00000000,0x00000000,0xff810000,0xff50000b,0x04000011,
  0x11c0d88e,0x00000000,0x00000000,0xff810000,0x00004001,0x40000000,0xff411044,
  0x00001001,0xc0000420,0xff500048,0x04000011,0x218ed820,0x00000000,0x00000000,
  0xff810000,0x00004001,0x40000000,0xff411043,0x00001001,0xc0000440,0x04000001,
  0x6784c001,0x04000001,0x1101c08f,0x04000011,0x1901d001,0x00000000,0x00000011,
  0x04000011,0x1b01d001,0x00000000,0x00000011,0x04000011,0x1d8fd08f,0x00000000,
  0x0000002f,0x04000011,0x208fd840,0x00000000,0x00000000,0xff810000,0x00004001,
  0x40000000,0xff411043,0x00001001,0xc0000460,0x04000001,0x1184c802,0x04000011,
  0x6786d000,0x00000000,0x00000010,0x00004001,0x40000000,0xff31100d,0x00009012,
  0xc0000420,0x50000008,0x00000000,0x04000001,0x6700c08c,0x04000011,0x6784d887,
  0x00000000,0xfffffff8,0x10000011,0x2784d88c,0x00000000,0xfffffff0,0x04000011,
  0x11c0d88e,0x00000000,0x00000000,0xff810000,0x00004001,0x40000000,0xff411044,
  0x00001001,0xc0000420,0xff000000,0xff500049,0x04000011,0x218ed840,0x00000000,
  0x00000000,0xff810000,0x00004001,0x40000000,0xff411043,0x00001001,0xc0000460,
  0x04000001,0x6784c08c,0x04000001,0x118cc08f,0x04000011,0x1d8fd08f,0x00000000,
  0x0000002f,0x04000011,0x208fd860,0x00000000,0x00000000,0xff810000,0x00004001,
  0x40000000,0xff411043,0x00001001,0xc0000460,0x04000011,0x6784d887,0x00000000,
  0xfffffff8,0x10000011,0x2784d88c,0x00000000,0xfffffff0,0x04000011,0x11c0d88e,
  0x00000000,0x00000000,0xff810000,0x00004001,0x40000000,0xff411044,0x00001001,
  0xc0000420,0xff50004a,0x04000011,0x218ed820,0x00000000,0x00000000,0xff810000,
  0x00004001,0x40000000,0xff411043,0x00001001,0xc0000440,0x04000011,0x6784d887,
  0x00000000,0xfffffff8,0x04000001,0x6784c08c,0x04000001,0x118cc08f,0x04000011,
  0x1d8fd08f,0x00000000,0x0000002f,0x04000011,0x208fd840,0x00000000,0x00000000,
  0xff810000,0x00004001,0x40000000,0xff411003,0x00001001,0xc0000460,0xff50000c,
  0x10000011,0x2784d88c,0x00000000,0xfffffff0,0x04000011,0x11c0d88e,0x00000000,
  0x00000000,0xff810000,0x00004001,0x40000000,0xff411044,0x00001001,0xc0000420,
  0xff50000d,0x04000011,0x208fd860,0x00000000,0x00000000,0xff810000,0x00004001,
  0x40000000,0xff41104b,0x00001001,0xc0000460,0x04000011,0x6788d889,0x00000000,
  0x00000000,0xff810000,0x04000001,0x2189c040,0x00004001,0x40000000,0xff411043,
  0x00001001,0xc0000460,0x04000011,0x6788d88c,0x00000000,0x00000000,0xff810000,
  0x04000011,0x6788d889,0x00000000,0x00000000,0xff810000,0x04000001,0x218c8920,
  0x00004001,0x40000000,0xff411001,0x00001001,0xc0000440,0x04000011,0x6786d08c,
  0x00000000,0x00000010,0x10000011,0x2786d087,0x00000000,0x00000018,0x10000011,
  0x278cd884,0x00000000,0x00000000,0xff810000,0x04000001,0x11848e8e,0x04000001,
  0x138ec88e,0x04000001,0x118cc000,0x10000011,0x278cd88e,0x00000000,0x00000000,
  0xff810000,0x00004001,0x40000000,0xff31100e,0x00009012,0xc0000420,0x50000008,
  0x00000000,0x04000011,0x678cd884,0x00000000,0x00000000,0xff810000,0x04000011,
  0x678cd88e,0x00000000,0x00000000,0xff810000,0x04000001,0x138e848e,0x04000001,
  0x118ec88e,0xff000000,0xff50000b,0x04000011,0x6786d08c,0x00000000,0x00000010,
  0x10000011,0x278cd884,0x00000000,0x00000000,0xff810000,0x10000011,0x2786d087,
  0x00000000,0x00000018,0x04000001,0x1184c001,0x04000001,0x118cc000,0x00004001,
  0x40000000,0xff31100f,0x00009012,0xc0000420,0x50000008,0x00000000,0x04000011,
  0x678cd884,0x00000000,0x00000000,0xff810000,0x04000011,0x11c0d88c,0x00000000,
  0x00000000,0xff810000,0x04000011,0x198cd08c,0x00000000,0x0000002f,0x04000001,
  0x058c008c,0x00004001,0x40000000,0xff41100c,0x00001001,0xc0000420,0xff50004c,
  0x04000011,0x218ed820,0x00000000,0x00000000,0xff810000,0x00004001,0x40000000,
  0xff411043,0x00001001,0xc0000440,0x04000011,0x218ed840,0x00000000,0x00000000,
  0xff810000,0x00004001,0x40000000,0xff411002,0x00001001,0xc0000440,0xff50000b,
  0x04000001,0x6784c001,0x04000001,0x1101c08f,0x04000011,0x1901d001,0x00000000,
  0x00000011,0x04000011,0x1b01d001,0x00000000,0x00000011,0x04000011,0x1d8fd08f,
  0x00000000,0x0000002f,0x04000011,0x208fd840,0x00000000,0x00000000,0xff810000,
  0x00004001,0x40000000,0xff411043,0x00001001,0xc0000460,0x04000011,0x6786d08c,
  0x00000000,0x00000010,0x10000011,0x278cd884,0x00000000,0x00000000,0xff810000,
  0x10000011,0x278cd884,0x00000000,0x00000000,0xff810000,0x04000011,0x6784d887,
  0x00000000,0xfffffff8,0x04000001,0x1184c802,0x04000001,0x118cc000,0x10000011,
  0x2786d087,0x00000000,0x00000018,0x00004001,0x40000000,0xff311010,0x00009012,
  0xc0000420,0x50000008,0x00000000,0x04000011,0x678cd884,0x00000000,0x00000000,
  0xff810000,0x04000001,0x2100c040,0x00004001,0x40000000,0xff411003,0x00001001,
  0xc0000440,0x04000001,0x6784c88c,0x04000011,0x6784d08e,0x00000000,0x00000010,
  0x10000011,0x2784d88c,0x00000000,0xfffffff0,0x10000011,0x2784d88e,0x00000000,
  0xfffffff8,0x04000011,0x11c0d88e,0x00000000,0x00000000,0xff810000,0x00004001,
  0x40000000,0xff411044,0x00001001,0xc0000420,0xff50000c,0x04000011,0x11c0d889,
  0x00000000,0x00000000,0xff810000,0x10000001,0x2784c889,0x00004001,0x40000000,
  0xff41100b,0x00001001,0xc0000420,0xff000000,0xff50000d,0x04000011,0x11c0d889,
  0x00000000,0x00000000,0xff810000,0x10000011,0x2784d889,0x00000000,0xfffffff0,
  0x04000011,0x11c0d88e,0x00000000,0x00000000,0xff810000,0x00004001,0x40000000,
  0xff411044,0x00001001,0xc0000420,0xff50004d,0x04000011,0x218ed820,0x00000000,
  0x00000000,0xff810000,0x00004001,0x40000000,0xff411043,0x00001001,0xc0000440,
  0x04000001,0x6784c08c,0x04000001,0x118cc08a,0x04000001,0x118cc08f,0x04000011,
  0x198cd08c,0x00000000,0x00000011,0x04000011,0x1b8cd08c,0x00000000,0x00000011,
  0x04000011,0x1d8fd08f,0x00000000,0x0000002f,0x04000011,0x208fd840,0x00000000,
  0x00000000,0xff810000,0x00004001,0x40000000,0xff411043,0x00001001,0xc0000460,
  0xff000000,0x04000011,0x678cd889,0x00000000,0x00000000,0xff810000,0x04000001,
  0x2189c040,0x00004001,0x40000000,0xff411043,0x00001001,0xc0000460,0xff000000,
  0x04000011,0x6784d88e,0x00000000,0xfffffff0,0x04000011,0x198ed08e,0x00000000,
  0x00000011,0x04000011,0x1b8ed08e,0x00000000,0x00000011,0x04000011,0x678ed88e,
  0x00000000,0x00000000,0xff810000,0x04000011,0x11c0d88f,0x00000000,0x00000000,
  0xff810000,0x04000011,0x198fd08f,0x00000000,0x0000002f,0x04000001,0x058e8f8e,
  0x04000011,0x6784d887,0x00000000,0xfffffff8,0x10000011,0x2784d88e,0x00000000,
  0xfffffff0,0x10000011,0x2784d88a,0x00000000,0xfffffff8,0x04000011,0x11c0d889,
  0x00000000,0x00000000,0xff810000,0x10000001,0x2784c089,0x04000011,0x11c0d88e,
  0x00000000,0x00000000,0xff810000,0x00004001,0x40000000,0xff411044,0x00001001,
  0xc0000420,0xff50004e,0x04000011,0x218ed820,0x00000000,0x00000000,0xff810000,
  0x00004001,0x40000000,0xff411043,0x00001001,0xc0000440,0x04000001,0x6784c08c,
  0x04000001,0x118cc08f,0x04000011,0x198cd08c,0x00000000,0x00000011,0x04000011,
  0x1b8cd08c,0x00000000,0x00000011,0x04000011,0x1d8fd08f,0x00000000,0x0000002f,
  0x04000011,0x208fd840,0x00000000,0x00000000,0xff810000,0x00004001,0x40000000,
  0xff411043,0x00001001,0xc0000460,0x04000001,0x6784c889,0x04000001,0x1189c08f,
  0x04000011,0x1d8fd08f,0x00000000,0x0000002f,0x04000011,0x208fd820,0x00000000,
  0x00000000,0xff810000,0x00004001,0x40000000,0xff411043,0x00001001,0xc0000460,
  0x04000011,0x6784d887,0x00000000,0xfffffff8,0x04000011,0x3189dc89,0x3ff00000,
  0x00000000,0x04000001,0x3fc2898b,0x10000011,0x2784d889,0x00000000,0xfffffff0,
  0x04000011,0x668cd889,0x00000000,0x00000000,0xff810000,0x04000001,0x208b8920,
  0x00004001,0x40000000,0xff411002,0x00001001,0xc0000460,0x04000011,0x678cd88e,
  0x00000000,0x00000000,0xff810000,0x04000001,0x0cc28b8b,0x04000001,0x198bc38b,
  0x04000001,0x118e8b8e,0xff50000b,0x04000001,0x668ec089,0x04000011,0x2089d840,
  0x00000000,0x00000000,0xff810000,0x00004001,0x40000000,0xff41104f,0x00001001,
  0xc0000440,0x04000001,0x678ec08c,0x10000011,0x2784d88c,0x00000000,0xfffffff8,
  0x04000011,0x11c0d88e,0x00000000,0x00000000,0xff810000,0x00004001,0x40000000,
  0xff411044,0x00001001,0xc0000420,0xff50000c,0x04000011,0x668cd889,0x00000000,
  0x00000000,0xff810000,0x04000001,0x2189c040,0x00004001,0x40000000,0xff41104f,
  0x00001001,0xc0000440,0x04000001,0x118cc000,0x04000001,0x118bc001,0x00004001,
  0x40000000,0xff311002,0x00009012,0xc0000420,0x50000008,0x00000000,0x04000001,
  0x2100c040,0x00004001,0x40000000,0xff41100b,0x00001001,0xc0000460,0xff000000,
  0xff50004f,0x04000011,0x11c0d88e,0x00000000,0x00000000,0xff810000,0x00004001,
  0x40000000,0xff411044,0x00001001,0xc0000420,0xff500050,0x04000011,0x218ed820,
  0x00000000,0x00000000,0xff810000,0x00004001,0x40000000,0xff411043,0x00001001,
  0xc0000440,0x04000001,0x6784c08c,0x04000001,0x118cc08a,0x04000001,0x118cc08f,
  0x04000011,0x198cd08c,0x00000000,0x00000011,0x04000011,0x1b8cd08c,0x00000000,
  0x00000011,0x04000011,0x1d8fd08f,0x00000000,0x0000002f,0x04000011,0x208fd840,
  0x00000000,0x00000000,0xff810000,0x00004001,0x40000000,0xff411043,0x00001001,
  0xc0000460,0xff000000,0x04000011,0x678cd889,0x00000000,0x00000000,0xff810000,
  0x04000001,0x2189c040,0x00004001,0x40000000,0xff411043,0x00001001,0xc0000460,
  0xff000000,0x04000011,0x6784d88e,0x00000000,0xfffffff0,0x04000011,0x198ed08e,
  0x00000000,0x00000011,0x04000011,0x1b8ed08e,0x00000000,0x00000011,0x04000011,
  0x678ed88e,0x00000000,0x00000000,0xff810000,0x04000011,0x11c0d88f,0x00000000,
  0x00000000,0xff810000,0x04000011,0x198fd08f,0x00000000,0x0000002f,0x04000001,
  0x058e8f8e,0x04000011,0x6784d887,0x00000000,0xfffffff8,0x10000011,0x2784d88e,
  0x00000000,0xfffffff0,0x10000011,0x2784d88a,0x00000000,0xfffffff8,0x04000001,
  0x11c0c089,0x10000001,0x2784c089,0x04000011,0x11c0d88e,0x00000000,0x00000000,
  0xff810000,0x00004001,0x40000000,0xff411044,0x00001001,0xc0000420,0xff500051,
  0x04000011,0x218ed820,0x00000000,0x00000000,0xff810000,0x00004001,0x40000000,
  0xff411043,0x00001001,0xc0000440,0x04000011,0x1184d08b,0x00000000,0x00000010,
  0x04000001,0x138ec88e,0x04000011,0x11c0d887,0x00000000,0x00000000,0xff810000,
  0xff50000b,0x04000011,0x6488d88c,0x00000000,0x00000000,0xff810000,0x04000011,
  0x1b8cd88c,0x00000000,0x00000000,0xff810000,0x04000001,0x018cc18c,0x04000001,
  0x11878c87,0x04000001,0x118ec085,0xff50000c,0x04000001,0x118b8589,0x04000011,
  0x6789d88c,0x00000000,0xffffffe8,0x10000011,0x2789d88c,0x00000000,0xfffffff0,
  0x04000001,0x1385c885,0x04000001,0x2185c060,0x00004001,0x40000000,0xff41100c,
  0x00001001,0xc0000460,0x04000011,0x678bd88c,0x00000000,0xfffffff0,0x04000001,
  0x118cc08f,0x04000011,0x198cd08c,0x00000000,0x00000011,0x04000011,0x1b8cd08c,
  0x00000000,0x00000011,0x04000011,0x1d8fd08f,0x00000000,0x0000002f,0x04000011,
  0x208fd840,0x00000000,0x00000000,0xff810000,0x00004001,0x40000000,0xff411023,
  0x00001001,0xc0000460,0x04000001,0x118bc084,0x10000011,0x2784d887,0x00000000,
  0xfffffff8,0x04000011,0x678cd887,0x00000000,0x00000000,0xff810000,0x04000001,
  0x6687c08b,0x04000011,0x018bd089,0x00000000,0x000000ff,0x04000001,0x1b8bc58b,
  0x04000011,0x018bd08b,0x00000000,0x000007f8,0x04000001,0x1187c487,0x04000001,
  0x1989c389,0x04000001,0x67898889,0x04000001,0x61c089d1,0x00001001,0xc0000420,
  0xff500052,0x04000011,0x218ed820,0x00000000,0x00000000,0xff810000,0x00004001,
  0x40000000,0xff411043,0x00001001,0xc0000440,0x04000001,0x6784c88b,0x04000001,
  0x118bc08f,0x04000011,0x1d8fd08f,0x00000000,0x0000002f,0x04000011,0x208fd840,
  0x00000000,0x00000000,0xff810000,0x00004001,0x40000000,0xff411043,0x00001001,
  0xc0000460,0x04000001,0x6784c08c,0x10000001,0x2784c08b,0x10000001,0x2784c88c,
  0x04000011,0x1184d08b,0x00000000,0x00000018,0x04000011,0x138ed08e,0x00000000,
  0x00000010,0x04000011,0x11c0d887,0x00000000,0x00000000,0xff810000,0x00004001,
  0x40000000,0xff41100b,0x00001001,0xc0000420,0xff500053,0x04000011,0x218ed820,
  0x00000000,0x00000000,0xff810000,0x00004001,0x40000000,0xff411043,0x00001001,
  0xc0000440,0x04000001,0x6784c08c,0x04000011,0x198cd08c,0x00000000,0x00000011,
  0x04000011,0x1b8cd08c,0x00000000,0x00000011,0x04000011,0x6784d887,0x00000000,
  0xfffffff8,0x10000011,0x2786d087,0x00000000,0x00000018,0x04000001,0x118cc08a,
  0x04000001,0x6784c089,0x04000001,0x1189c08f,0x04000011,0x1d8fd08f,0x00000000,
  0x0000002f,0x04000011,0x208fd840,0x00000000,0x00000000,0xff810000,0x00004001,
  0x40000000,0xff411043,0x00001001,0xc0000460,0x00004001,0x40000000,0xff411043,
  0x04000011,0x678cd889,0x00000000,0x00000000,0xff810000,0x04000001,0x2189c040,
  0x00001001,0xc0000460,0x04000011,0x648cd889,0x00000000,0x00000000,0xff810000,
  0x04000011,0x2189d860,0x00000000,0x00000000,0xff810000,0x00001001,0xc0000460,
  0x04000011,0x678cd88b,0x00000000,0x00000000,0xff810000,0x04000011,0x2189d840,
  0x00000000,0x00000000,0xff810000,0x00004001,0x40000000,0xff411001,0x00001001,
  0xc0000440,0x04000011,0x678cd889,0x00000000,0x00000000,0xff810000,0x04000001,
  0x218b8960,0x00004001,0x40000000,0xff411043,0x00001001,0xc0000440,0x04000011,
  0x678bd887,0x00000000,0xfffffff8,0x10000001,0x278bc087,0x04000001,0x118bc88b,
  0xff000000,0xff50000b,0x04000001,0x118b8e87,0x04000011,0x1387d087,0x00000000,
  0x00000010,0x04000011,0x678cd889,0x00000000,0x00000000,0xff810000,0x04000001,
  0x21878960,0x00004001,0x40000000,0xff411043,0x00001001,0xc0000460,0x10000011,
  0x278cd887,0x00000000,0x00000000,0xff810000,0x04000011,0x6786d08c,0x00000000,
  0x00000010,0x10000011,0x278cd884,0x00000000,0x00000000,0xff810000,0x04000001,
  0x1184c884,0x10000011,0x278cd884,0x00000000,0x00000000,0xff810000,0x04000001,
  0x11848e8c,0x04000011,0x138cd08c,0x00000000,0x00000018,0x04000001,0x138c878c,
  0x04000001,0x21878b40,0x00004001,0x40000000,0xff411003,0x00001001,0xc0000440,
  0xff50000c,0x04000001,0x67878c8d,0x10000011,0x2787d88d,0x00000000,0xfffffff8,
  0x04000001,0x1387c887,0x04000001,0x21878b40,0x00004001,0x40000000,0xff41100c,
  0x00001001,0xc0000460,0xff50000d,0x04000001,0x118bc001,0x04000001,0x118ac000,
  0x00004001,0x40000000,0xff411020,0x00009012,0xc0000420,0x50000008,0x00000000,
  0x04000011,0x6786d08c,0x00000000,0x00000010,0x04000001,0x118ac087,0x04000011,
  0x678cd884,0x00000000,0x00000000,0xff810000,0x10000011,0x2788d88c,0x00000000,
  0x00000000,0xff810000,0x04000011,0x11c0d889,0x00000000,0x00000000,0xff810000,
  0x10000011,0x2688d889,0x00000000,0x00000000,0xff810000,0x04000011,0x2100d860,
  0x00000000,0x00000000,0xff810000,0x00004001,0x40000000,0xff411008,0x00001001,
  0xc0000460,0xff50000e,0x04000011,0x6787d88b,0x00000000,0x00000000,0xff810000,
  0x04000011,0x6787d885,0x00000000,0x00000000,0xff810000,0x10000011,0x2787d88b,
  0x00000000,0x00000000,0xff810000,0x04000001,0x1185c087,0x04000001,0x13878b87,
  0x04000001,0x2187c040,0x00004001,0x40000000,0xff411006,0x00001001,0xc0000440,
  0x04000001,0x1184878e,0x04000011,0x678cd889,0x00000000,0x00000000,0xff810000,
  0x04000001,0x218e8960,0x00004001,0x40000000,0xff411009,0x00001001,0xc0000460,
  0x04000001,0x1184c08c,0x04000001,0x138c8b8c,0xff000000,0xff50000f,0x04000001,
  0x678bc08e,0x10000001,0x278b8c8e,0x04000001,0x118bc88b,0x04000001,0x218b8540,
  0x00004001,0x40000000,0xff41100f,0x00001001,0xc0000460,0xff500010,0x04000011,
  0x1187d88e,0x00000000,0x00000000,0xff810000,0x04000011,0x11c0dc8f,0xfffeffff,
  0xffffffff,0x10000011,0x2784d88f,0x00000000,0xfffffff8,0xff500011,0x04000011,
  0x6786d087,0x00000000,0x00000018,0x10000001,0x2686c08e,0x04000001,0x13c0c88b,
  0x04000011,0x2287d840,0x00000000,0x00000000,0xff810000,0x00004001,0x40000000,
  0xff411018,0x00001001,0xc0000440,0x00004001,0x40000000,0xff411019,0x00001001,
  0xc0000420,0xff500012,0x04000011,0x11c0dc8f,0xffff7fff,0xffffffff,0x10000011,
  0x2784d88f,0x00000000,0xfffffff8,0x04000011,0x6787d88b,0x00000000,0x00000000,
  0xff810000,0x04000001,0x138bc88b,0x10000011,0x2787d88b,0x00000000,0x00000000,
  0xff810000,0x04000001,0x678bc08e,0x10000001,0x2784c08e,0x04000011,0x11c0d88e,
  0x00000000,0x00000000,0xff810000,0x00004001,0x40000000,0xff411011,0x00001001,
  0xc0000420,0xff500013,0x04000001,0x118ac08b,0x10000011,0x278bd885,0x00000000,
  0x00000000,0xff810000,0x04000001,0x1b87c387,0x04000001,0x1187c001,0x04000001,
  0x118cc000,0x00004001,0x40000000,0xff311000,0x00009012,0xc0000420,0x50000008,
  0x00000000,0x04000001,0x118ac087,0x04000011,0x678cd884,0x00000000,0x00000000,
  0xff810000,0x00004001,0x40000000,0xff41100e,0x00001001,0xc0000420,0xff500054,
  0x04000011,0x6784d88c,0x00000000,0xfffffff0,0x04000011,0x198cd08c,0x00000000,
  0x00000011,0x04000011,0x1b8cd08c,0x00000000,0x00000011,0x04000011,0x678cd88c,
  0x00000000,0x00000000,0xff810000,0x04000011,0x198cd08c,0x00000000,0x00000011,
  0x04000011,0x1b8cd08c,0x00000000,0x00000011,0x04000011,0x6784d887,0x00000000,
  0xfffffff8,0x10000011,0x2786d087,0x00000000,0x00000018,0x04000001,0x118cc08a,
  0x00004001,0x40000000,0xff411043,0x04000011,0x678cd889,0x00000000,0x00000000,
  0xff810000,0x04000001,0x2189c040,0x00001001,0xc0000460,0x04000011,0x648cd889,
  0x00000000,0x00000000,0xff810000,0x04000011,0x2189d860,0x00000000,0x00000000,
  0xff810000,0x00001001,0xc0000460,0x04000011,0x678cd88b,0x00000000,0x00000000,
  0xff810000,0x04000011,0x2189d840,0x00000000,0x00000000,0xff810000,0x00004001,
  0x40000000,0xff411001,0x00001001,0xc0000440,0x04000011,0x678cd889,0x00000000,
  0x00000000,0xff810000,0x04000001,0x218b8960,0x00004001,0x40000000,0xff411043,
  0x00001001,0xc0000440,0x04000011,0x678bd887,0x00000000,0xfffffff8,0x10000001,
  0x278bc087,0x04000001,0x118bc88b,0xff000000,0xff50000b,0x04000001,0x118b8e87,
  0x04000001,0x1387c887,0x04000011,0x678cd889,0x00000000,0x00000000,0xff810000,
  0x04000001,0x21878960,0x00004001,0x40000000,0xff411043,0x00001001,0xc0000460,
  0x10000011,0x278cd887,0x00000000,0x00000000,0xff810000,0x04000011,0x6786d08c,
  0x00000000,0x00000010,0x10000011,0x278cd884,0x00000000,0x00000000,0xff810000,
  0x10000011,0x278cd884,0x00000000,0x00000000,0xff810000,0x04000001,0x11848e8c,
  0x04000011,0x138cd08c,0x00000000,0x00000010,0x04000001,0x138c878c,0x04000001,
  0x21878b40,0x00004001,0x40000000,0xff411003,0x00001001,0xc0000440,0xff50000c,
  0x04000001,0x67878c8d,0x10000011,0x2787d88d,0x00000000,0xfffffff8,0x04000001,
  0x1387c887,0x04000001,0x21878b40,0x00004001,0x40000000,0xff41100c,0x00001001,
  0xc0000460,0xff50000d,0x04000001,0x118bc001,0x04000001,0x118ac000,0x00004001,
  0x40000000,0xff411020,0x00009012,0xc0000420,0x50000008,0x00000000,0x04000011,
  0x6786d08c,0x00000000,0x00000010,0x04000001,0x118ac087,0x04000011,0x678cd884,
  0x00000000,0x00000000,0xff810000,0x10000011,0x2788d88c,0x00000000,0x00000000,
  0xff810000,0x04000011,0x11c0d889,0x00000000,0x00000000,0xff810000,0x10000011,
  0x2688d889,0x00000000,0x00000000,0xff810000,0x04000011,0x2100d860,0x00000000,
  0x00000000,0xff810000,0x00004001,0x40000000,0xff411008,0x00001001,0xc0000460,
  0xff50000e,0x04000011,0x6787d88b,0x00000000,0x00000000,0xff810000,0x04000011,
  0x6787d885,0x00000000,0x00000000,0xff810000,0x10000011,0x2787d88b,0x00000000,
  0x00000000,0xff810000,0x04000001,0x1185c087,0x04000001,0x13878b87,0x04000001,
  0x2187c040,0x00004001,0x40000000,0xff411006,0x00001001,0xc0000440,0x04000001,
  0x1184878e,0x04000011,0x678cd889,0x00000000,0x00000000,0xff810000,0x04000001,
  0x218e8960,0x00004001,0x40000000,0xff411009,0x00001001,0xc0000460,0x04000001,
  0x1184c08c,0x04000001,0x138c8b8c,0xff000000,0xff50000f,0x04000001,0x678bc08e,
  0x10000001,0x278b8c8e,0x04000001,0x118bc88b,0x04000001,0x218b8540,0x00004001,
  0x40000000,0xff41100f,0x00001001,0xc0000460,0xff500010,0x04000011,0x1187d88e,
  0x00000000,0x00000000,0xff810000,0xff500011,0x04000011,0x6786d087,0x00000000,
  0x00000018,0x10000001,0x2686c08e,0x04000001,0x11c0c08b,0x04000011,0x2287d840,
  0x00000000,0x00000000,0xff810000,0x00004001,0x40000000,0xff411018,0x00001001,
  0xc0000440,0x00004001,0x40000000,0xff411019,0x00001001,0xc0000420,0xff500012,
  0x04000001,0x1187c001,0x04000001,0x118cc000,0x00004001,0x40000000,0xff311011,
  0x00009012,0xc0000420,0x50000008,0x00000000,0xff500013,0x04000001,0x118ac08b,
  0x10000011,0x278bd885,0x00000000,0x00000000,0xff810000,0x04000001,0x1b87c387,
  0x04000001,0x1187c001,0x04000001,0x118cc000,0x00004001,0x40000000,0xff311000,
  0x00009012,0xc0000420,0x50000008,0x00000000,0x04000001,0x118ac087,0x04000011,
  0x678cd884,0x00000000,0x00000000,0xff810000,0x00004001,0x40000000,0xff41100e,
  0x00001001,0xc0000420,0xff500055,0x04000011,0x6786d08c,0x00000000,0x00000010,
  0x04000011,0x678cd889,0x00000000,0x00000000,0xff810000,0x04000011,0x2389d840,
  0x00000000,0x00000000,0xff810000,0x00004001,0x40000000,0xff411043,0x00001001,
  0xc0000440,0x10000011,0x278cd884,0x00000000,0x00000000,0xff810000,0x04000001,
  0x11848e8e,0x04000001,0x138ec88e,0x10000011,0x278cd88e,0x00000000,0x00000000,
  0xff810000,0x04000001,0x11c0c08e,0x10000011,0x278cd88e,0x00000000,0x00000000,
  0xff810000,0x04000011,0x11c0d880,0x00000000,0x00000000,0xff810000,0x10000011,
  0x248cd880,0x00000000,0x00000000,0xff810000,0x00004001,0xf0000000,0x00001001,
  0xc0000c20,0xff000000,0xff500056,0x04000011,0x218ed820,0x00000000,0x00000000,
  0xff810000,0x00004001,0x40000000,0xff411043,0x00001001,0xc0000440,0x04000001,
  0x6784c08c,0x04000001,0x118cc08f,0x04000011,0x1d8fd08f,0x00000000,0x0000002f,
  0x04000011,0x208fd820,0x00000000,0x00000000,0xff810000,0x00004001,0x40000000,
  0xff411043,0x00001001,0xc0000460,0x04000001,0x198cc18c,0x04000001,0x1b8cc18c,
  0x04000011,0x6784d887,0x00000000,0xfffffff8,0x10000011,0x2784d88c,0x00000000,
  0xfffffff0,0x04000011,0x11c0d88e,0x00000000,0x00000000,0xff810000,0x00004001,
  0x40000000,0xff411044,0x00001001,0xc0000420,0xff500057,0x04000011,0x218ed820,
  0x00000000,0x00000000,0xff810000,0x00004001,0x40000000,0xff411043,0x00001001,
  0xc0000440,0x04000001,0x6784c000,0x04000001,0x1100c08f,0x04000011,0x1d8fd08f,
  0x00000000,0x0000002f,0x04000011,0x208fd820,0x00000000,0x00000000,0xff810000,
  0x00004001,0x40000000,0xff411043,0x00001001,0xc0000460,0x82000001,0x4dc0008a,
  0x82000001,0x51008a89,0xff500058,0x04000011,0x6784d887,0x00000000,0xfffffff8,
  0x10000011,0x2784d889,0x00000000,0xfffffff0,0x04000011,0x11c0d88e,0x00000000,
  0x00000000,0xff810000,0xff500044,0xb4004035,0x2387d840,0xe487c003,0x11c0d98a,
  0x2686c08e,0x40000000,0x00000000,0x00000000,0xff434019,0xff820000,0xff810000,
  0xa00140a3,0x6487d88c,0x6687c002,0x80000000,0xffffffff,0x44605060,0xff433002,
  0x20010011,0x6487d88b,0xfffffffd,0x44600000,0x6c024045,0x1903c303,0x1187c487,
  0x13c0d08b,0x198cc38c,0xc0000000,0x00000000,0x00000010,0x44e04860,0x04600860,
  0xff455001,0x24011023,0xc0000460,0x67038803,0xa18c8e61,0x00000000,0x04600000,
  0x20001012,0xc0000841,0x198bc304,0x00000000,0xff50000b,0x60000012,0x138ed089,
  0x118ec88e,0x00000018,0xa0000012,0x218c8e61,0x2784898a,0x00000000,0x00001001,
  0xc0000c61,0xff50000c,0x24000012,0x61c003d1,0x1384d084,0x00000010,0xe0000023,
  0x1b02c58b,0x1b02d08c,0x1b02cd8e,0x00000000,0x00000015,0xe0000023,0x13840484,
  0x018ed88e,0x018bd18b,0x000007f8,0x0007fff8,0x60001023,0xc0000420,0x018cd08c,
  0x018ed18d,0x000007f8,0x000007f8,0xff500059,0x04000001,0x6784c000,0x04000001,
  0x1100c08f,0x04000011,0x1d8fd08f,0x00000000,0x0000002f,0x04000011,0x208fd820,
  0x00000000,0x00000000,0xff810000,0x00004001,0x40000000,0xff411043,0x00001001,
  0xc0000460,0x00004001,0x40000000,0xff41105a,0x00009012,0xc0000420,0x50000008,
  0x00000000,0x04000001,0x1100c089,0x00004001,0x40000000,0xff411058,0x00001001,
  0xc0000420,0xff000000,0xff50005b,0x04000001,0x6784c000,0x04000001,0x1100c08f,
  0x04000011,0x1d8fd08f,0x00000000,0x0000002f,0x04000011,0x208fd820,0x00000000,
  0x00000000,0xff810000,0x00004001,0x40000000,0xff411043,0x00001001,0xc0000460,
  0x00004001,0x40000000,0xff41105c,0x00009012,0xc0000420,0x50000008,0x00000000,
  0x04000001,0x1100c089,0x00004001,0x40000000,0xff411058,0x00001001,0xc0000420,
  0xff50005d,0x04000011,0x218ed840,0x00000000,0x00000000,0xff810000,0x00004001,
  0x40000000,0xff411043,0x00001001,0xc0000460,0x04000001,0x6784c000,0x04000001,
  0x1100c08f,0x04000011,0x1d8fd08f,0x00000000,0x0000002f,0x04000011,0x208fd820,
  0x00000000,0x00000000,0xff810000,0x00004001,0x40000000,0xff411043,0x00001001,
  0xc0000460,0x00004001,0x40000000,0xff311012,0x00009012,0xc0000420,0x50000008,
  0x00000000,0x04000001,0x1100c089,0x00004001,0x40000000,0xff411058,0x00001001,
  0xc0000420,0xff50005e,0x04000011,0x218ed820,0x00000000,0x00000000,0xff810000,
  0x00004001,0x40000000,0xff411043,0x00001001,0xc0000440,0x04000001,0x6784c000,
  0x04000001,0x1100c08f,0x04000011,0x1d8fd08f,0x00000000,0x0000002f,0x04000011,
  0x208fd820,0x00000000,0x00000000,0xff810000,0x00004001,0x40000000,0xff411043,
  0x00001001,0xc0000460,0x00004001,0x40000000,0xff311013,0x00009012,0xc0000420,
  0x50000008,0x00000000,0x04000001,0x1100c089,0x00004001,0x40000000,0xff411058,
  0x00001001,0xc0000420,0xff50005f,0x04000011,0x218ed820,0x00000000,0x00000000,
  0xff810000,0x00004001,0x40000000,0xff411043,0x00001001,0xc0000440,0x04000001,
  0x6784c000,0x04000001,0x1100c08f,0x04000011,0x1d8fd08f,0x00000000,0x0000002f,
  0x04000011,0x208fd820,0x00000000,0x00000000,0xff810000,0x00004001,0x40000000,
  0xff411043,0x00001001,0xc0000460,0x00004001,0x40000000,0xff311014,0x00009012,
  0xc0000420,0x50000008,0x00000000,0x04000001,0x1100c089,0x00004001,0x40000000,
  0xff411058,0x00001001,0xc0000420,0xff000000,0xff500060,0x04000011,0x218ed820,
  0x00000000,0x00000000,0xff810000,0x00004001,0x40000000,0xff411043,0x00001001,
  0xc0000440,0x04000001,0x6784c000,0x04000001,0x1100c08f,0x04000011,0x1d8fd08f,
  0x00000000,0x0000002f,0x04000011,0x208fd820,0x00000000,0x00000000,0xff810000,
  0x00004001,0x40000000,0xff411043,0x00001001,0xc0000460,0x00004001,0x40000000,
  0xff311015,0x00009012,0xc0000420,0x50000008,0x00000000,0x04000001,0x1100c089,
  0x00004001,0x40000000,0xff411058,0x00001001,0xc0000420,0xff500061,0x04000011,
  0x218ed820,0x00000000,0x00000000,0xff810000,0x00004001,0x40000000,0xff411043,
  0x00001001,0xc0000440,0x04000001,0x6784c000,0x04000001,0x1100c08f,0x04000011,
  0x1d8fd08f,0x00000000,0x0000002f,0x04000011,0x208fd820,0x00000000,0x00000000,
  0xff810000,0x00004001,0x40000000,0xff411043,0x00001001,0xc0000460,0x00004001,
  0x40000000,0xff311016,0x00009012,0xc0000420,0x50000008,0x00000000,0x04000001,
  0x1100c089,0x00004001,0x40000000,0xff411058,0x00001001,0xc0000420,0xff500062,
  0x04000011,0x218ed820,0x00000000,0x00000000,0xff810000,0x00004001,0x40000000,
  0xff411043,0x00001001,0xc0000440,0x04000001,0x6784c000,0x04000001,0x1100c08f,
  0x04000011,0x1d8fd08f,0x00000000,0x0000002f,0x04000011,0x208fd820,0x00000000,
  0x00000000,0xff810000,0x00004001,0x40000000,0xff411043,0x00001001,0xc0000460,
  0x00004001,0x40000000,0xff311017,0x00009012,0xc0000420,0x50000008,0x00000000,
  0x04000001,0x1100c089,0x00004001,0x40000000,0xff411058,0x00001001,0xc0000420,
  0xff500063,0x04000011,0x218ed820,0x00000000,0x00000000,0xff810000,0x00004001,
  0x40000000,0xff411043,0x00001001,0xc0000440,0x04000001,0x6784c000,0x04000001,
  0x1100c08f,0x04000011,0x1d8fd08f,0x00000000,0x0000002f,0x04000011,0x208fd820,
  0x00000000,0x00000000,0xff810000,0x00004001,0x40000000,0xff411043,0x00001001,
  0xc0000460,0x00004001,0x40000000,0xff311018,0x00009012,0xc0000420,0x50000008,
  0x00000000,0x04000001,0x1100c089,0x00004001,0x40000000,0xff411058,0x00001001,
  0xc0000420,0xff000000,0xff500064,0x04000011,0x218ed820,0x00000000,0x00000000,
  0xff810000,0x00004001,0x40000000,0xff411043,0x00001001,0xc0000440,0x04000001,
  0x6784c000,0x04000001,0x1100c08f,0x04000011,0x1d8fd08f,0x00000000,0x0000002f,
  0x04000011,0x208fd820,0x00000000,0x00000000,0xff810000,0x00004001,0x40000000,
  0xff411043,0x00001001,0xc0000460,0x00004001,0x40000000,0xff311019,0x00009012,
  0xc0000420,0x50000008,0x00000000,0x04000001,0x1100c089,0x00004001,0x40000000,
  0xff411058,0x00001001,0xc0000420,0xff500065,0x04000011,0x218ed820,0x00000000,
  0x00000000,0xff810000,0x00004001,0x40000000,0xff411043,0x00001001,0xc0000440,
  0x04000001,0x6784c000,0x04000001,0x1100c08f,0x04000011,0x1d8fd08f,0x00000000,
  0x0000002f,0x04000011,0x208fd820,0x00000000,0x00000000,0xff810000,0x00004001,
  0x40000000,0xff411043,0x00001001,0xc0000460,0x00004001,0x40000000,0xff31101a,
  0x00009012,0xc0000420,0x50000008,0x00000000,0x04000001,0x1100c089,0x00004001,
  0x40000000,0xff411058,0x00001001,0xc0000420,0xff500066,0x04000011,0x218ed820,
  0x00000000,0x00000000,0xff810000,0x00004001,0x40000000,0xff411043,0x00001001,
  0xc0000440,0x04000001,0x6784c000,0x04000001,0x1100c08f,0x04000011,0x1d8fd08f,
  0x00000000,0x0000002f,0x04000011,0x208fd820,0x00000000,0x00000000,0xff810000,
  0x00004001,0x40000000,0xff411043,0x00001001,0xc0000460,0x00004001,0x40000000,
  0xff31101b,0x00009012,0xc0000420,0x50000008,0x00000000,0x04000001,0x1100c089,
  0x00004001,0x40000000,0xff411058,0x00001001,0xc0000420,0xff500067,0x04000011,
  0x218ed820,0x00000000,0x00000000,0xff810000,0x00004001,0x40000000,0xff411043,
  0x00001001,0xc0000440,0x04000001,0x6784c000,0x04000001,0x1100c08f,0x04000011,
  0x1d8fd08f,0x00000000,0x0000002f,0x04000011,0x208fd820,0x00000000,0x00000000,
  0xff810000,0x00004001,0x40000000,0xff411043,0x00001001,0xc0000460,0x00004001,
  0x40000000,0xff31101c,0x00009012,0xc0000420,0x50000008,0x00000000,0x04000001,
  0x1100c089,0x00004001,0x40000000,0xff411058,0x00001001,0xc0000420,0xff000000,
  0xff500068,0x04000011,0x218ed820,0x00000000,0x00000000,0xff810000,0x00004001,
  0x40000000,0xff411043,0x00001001,0xc0000440,0x04000001,0x6784c000,0x04000001,
  0x1100c08f,0x04000011,0x1d8fd08f,0x00000000,0x0000002f,0x04000011,0x208fd820,
  0x00000000,0x00000000,0xff810000,0x00004001,0x40000000,0xff411043,0x00001001,
  0xc0000460,0x00004001,0x40000000,0xff31101d,0x00009012,0xc0000420,0x50000008,
  0x00000000,0x04000001,0x1100c089,0x00004001,0x40000000,0xff411058,0x00001001,
  0xc0000420,0xff500069,0x04000011,0x218ed820,0x00000000,0x00000000,0xff810000,
  0x00004001,0x40000000,0xff411043,0x00001001,0xc0000440,0x04000001,0x6784c000,
  0x04000001,0x1100c08f,0x04000011,0x1d8fd08f,0x00000000,0x0000002f,0x04000011,
  0x208fd820,0x00000000,0x00000000,0xff810000,0x00004001,0x40000000,0xff411043,
  0x00001001,0xc0000460,0x04000001,0x6784c801,0x04000001,0x1101c08f,0x04000011,
  0x1d8fd08f,0x00000000,0x0000002f,0x04000011,0x208fd820,0x00000000,0x00000000,
  0xff810000,0x00004001,0x40000000,0xff411043,0x00001001,0xc0000460,0x00004001,
  0x40000000,0xff31101e,0x00009012,0xc0000420,0x50000008,0x00000000,0x04000001,
  0x1100c089,0x00004001,0x40000000,0xff411058,0x00001001,0xc0000420,0xff50006a,
  0x04000011,0x218ed820,0x00000000,0x00000000,0xff810000,0x00004001,0x40000000,
  0xff411043,0x00001001,0xc0000440,0x04000001,0x6784c000,0x04000001,0x1100c08f,
  0x04000011,0x1d8fd08f,0x00000000,0x0000002f,0x04000011,0x208fd820,0x00000000,
  0x00000000,0xff810000,0x00004001,0x40000000,0xff411043,0x00001001,0xc0000460,
  0x04000001,0x6784c801,0x04000001,0x1101c08f,0x04000011,0x1d8fd08f,0x00000000,
  0x0000002f,0x04000011,0x208fd820,0x00000000,0x00000000,0xff810000,0x00004001,
  0x40000000,0xff411043,0x00001001,0xc0000460,0x00004001,0x40000000,0xff31101f,
  0x00009012,0xc0000420,0x50000008,0x00000000,0x04000001,0x1100c089,0x00004001,
  0x40000000,0xff411058,0x00001001,0xc0000420,0xff000000,0xff50006b,0x04000011,
  0x218ed820,0x00000000,0x00000000,0xff810000,0x00004001,0x40000000,0xff411043,
  0x00001001,0xc0000440,0x04000001,0x6784c000,0x04000001,0x1100c08f,0x04000011,
  0x1d8fd08f,0x00000000,0x0000002f,0x04000011,0x208fd820,0x00000000,0x00000000,
  0xff810000,0x00004001,0x40000000,0xff411043,0x00001001,0xc0000460,0x04000001,
  0x6784c801,0x04000001,0x1101c08f,0x04000011,0x1d8fd08f,0x00000000,0x0000002f,
  0x04000011,0x208fd820,0x00000000,0x00000000,0xff810000,0x00004001,0x40000000,
  0xff411043,0x00001001,0xc0000460,0x00004001,0x40000000,0xff311020,0x00009012,
  0xc0000420,0x50000008,0x00000000,0x04000001,0x1100c089,0x00004001,0x40000000,
  0xff411058,0x00001001,0xc0000420,0xff50006c,0x04000011,0x218ed820,0x00000000,
  0x00000000,0xff810000,0x00004001,0x40000000,0xff411043,0x00001001,0xc0000440,
  0x04000001,0x6784c089,0x04000001,0x6784c88a,0x04000001,0x1189c08f,0x04000011,
  0x1d8fd08f,0x00000000,0x0000002f,0x04000011,0x208fd820,0x00000000,0x00000000,
  0xff810000,0x00004001,0x40000000,0xff411043,0x00001001,0xc0000460,0x04000001,
  0x118ac08f,0x04000011,0x1d8fd08f,0x00000000,0x0000002f,0x04000011,0x208fd820,
  0x00000000,0x00000000,0xff810000,0x00004001,0x40000000,0xff411043,0x00001001,
  0xc0000460,0x04000001,0x3dc28a8a,0x08200011,0x25898a89,0x01c00000,0x00000000,
  0x04000011,0x6784d887,0x00000000,0xfffffff8,0x10000011,0x2784d889,0x00000000,
  0xfffffff0,0x04000011,0x11c0d88e,0x00000000,0x00000000,0xff810000,0x00004001,
  0x40000000,0xff411044,0x00001001,0xc0000420,0xff50006d,0x04000011,0x218ed820,
  0x00000000,0x00000000,0xff810000,0x00004001,0x40000000,0xff411043,0x00001001,
  0xc0000440,0x04000001,0x6784c000,0x04000001,0x1100c08f,0x04000011,0x1d8fd08f,
  0x00000000,0x0000002f,0x04000011,0x208fd820,0x00000000,0x00000000,0xff810000,
  0x00004001,0x40000000,0xff411043,0x00001001,0xc0000460,0x04000011,0x1186d001,
  0x00000000,0x00000028,0x00004001,0x40000000,0xff311021,0x00009012,0xc0000420,
  0x50000008,0x00000000,0x04000011,0x6784d887,0x00000000,0xfffffff8,0x10000011,
  0x2784d800,0x00000000,0xfffffff0,0x04000011,0x6686d089,0x00000000,0x00000028,
  0x04000001,0x3ec48989,0x10000011,0x2784d889,0x00000000,0xfffffff8,0x04000011,
  0x11c0d88e,0x00000000,0x00000000,0xff810000,0x00004001,0x40000000,0xff411044,
  0x00001001,0xc0000420,0xff000000,0xff50006e,0x04000011,0x218ed820,0x00000000,
  0x00000000,0xff810000,0x00004001,0x40000000,0xff411043,0x00001001,0xc0000440,
  0x04000001,0x6784c000,0x04000001,0x1100c08f,0x04000011,0x1d8fd08f,0x00000000,
  0x0000002f,0x04000011,0x208fd820,0x00000000,0x00000000,0xff810000,0x00004001,
  0x40000000,0xff411043,0x00001001,0xc0000460,0x04000011,0x1384d001,0x00000000,
  0x00000010,0x00004001,0x40000000,0xff311022,0x00009012,0xc0000420,0x50000008,
  0x00000000,0x04000011,0x6784d887,0x00000000,0xfffffff8,0x10000011,0x2784d800,
  0x00000000,0xfffffff8,0x04000011,0x11c0d88e,0x00000000,0x00000000,0xff810000,
  0x00004001,0x40000000,0xff411044,0x00001001,0xc0000420,0xff50006f,0x04000011,
  0x218ed820,0x00000000,0x00000000,0xff810000,0x00004001,0x40000000,0xff411043,
  0x00001001,0xc0000440,0x04000011,0x11c0d08b,0x00000000,0x00000010,0x04000001,
  0x6784c089,0x04000001,0x1189c08f,0x04000011,0x1d8fd08f,0x00000000,0x0000002f,
  0x04000011,0x208fd820,0x00000000,0x00000000,0xff810000,0x00004001,0x40000000,
  0xff411043,0x00001001,0xc0000460,0xff50000b,0x04000001,0x208b8e20,0x00004001,
  0x40000000,0xff411058,0x00001001,0xc0000460,0x04000001,0x11848b8a,0x04000011,
  0x678ad88a,0x00000000,0xfffffff8,0x04000001,0x118ac08f,0x04000011,0x1d8fd08f,
  0x00000000,0x0000002f,0x04000011,0x208fd820,0x00000000,0x00000000,0xff810000,
  0x00004001,0x40000000,0xff411043,0x00001001,0xc0000460,0x04000001,0x35898a89,
  0x04000001,0x118bc88b,0x00004001,0x40000000,0xff41100b,0x00001001,0xc0000420,
  0xff500070,0x04000011,0x218ed820,0x00000000,0x00000000,0xff810000,0x00004001,
  0x40000000,0xff411043,0x00001001,0xc0000440,0x04000011,0x11c0d08b,0x00000000,
  0x00000010,0x04000001,0x6784c089,0x04000001,0x1189c08f,0x04000011,0x1d8fd08f,
  0x00000000,0x0000002f,0x04000011,0x208fd820,0x00000000,0x00000000,0xff810000,
  0x00004001,0x40000000,0xff411043,0x00001001,0xc0000460,0xff50000b,0x04000001,
  0x208b8e20,0x00004001,0x40000000,0xff411058,0x00001001,0xc0000460,0x04000001,
  0x11848b8a,0x04000011,0x678ad88a,0x00000000,0xfffffff8,0x04000001,0x118ac08f,
  0x04000011,0x1d8fd08f,0x00000000,0x0000002f,0x04000011,0x208fd820,0x00000000,
  0x00000000,0xff810000,0x00004001,0x40000000,0xff411043,0x00001001,0xc0000460,
  0x04000001,0x37898a89,0x04000001,0x118bc88b,0x00004001,0x40000000,0xff41100b,
  0x00001001,0xc0000420,0xff000000,0xff500071,0x04000011,0x218ed840,0x00000000,
  0x00000000,0xff810000,0x00004001,0x40000000,0xff411043,0x00001001,0xc0000460,
  0x04000001,0x6784c08c,0x04000001,0x118cc08f,0x04000011,0x198cd08c,0x00000000,
  0x00000011,0x04000011,0x1b8cd08c,0x00000000,0x00000011,0x04000011,0x1d8fd08f,
  0x00000000,0x0000002f,0x04000011,0x208fd840,0x00000000,0x00000000,0xff810000,
  0x00004001,0x40000000,0xff411043,0x00001001,0xc0000460,0x04000011,0x6784d887,
  0x00000000,0xfffffff8,0x04000011,0x668cd889,0x00000000,0x00000000,0xff810000,
  0x04000001,0x2089c120,0x00004001,0x40000000,0xff41104f,0x00001001,0xc0000440,
  0x04000011,0x648cd88c,0x00000000,0x00000000,0xff810000,0x04000001,0x3ec48c89,
  0x00004001,0x40000000,0xff411058,0x00001001,0xc0000420,0xff500072,0x04000011,
  0x6788d88c,0x00000000,0x00000000,0xff810000,0x04000011,0x6788d889,0x00000000,
  0x00000000,0xff810000,0x04000001,0x218c8920,0x00004001,0x40000000,0xff411001,
  0x00001001,0xc0000440,0x04000011,0x6786d08c,0x00000000,0x00000010,0x10000011,
  0x2786d087,0x00000000,0x00000018,0x10000011,0x278cd884,0x00000000,0x00000000,
  0xff810000,0x04000001,0x11848e8e,0x04000001,0x138ec88e,0x04000001,0x118cc000,
  0x10000011,0x278cd88e,0x00000000,0x00000000,0xff810000,0x00004001,0x40000000,
  0xff31100e,0x00009012,0xc0000420,0x50000008,0x00000000,0x04000011,0x678cd884,
  0x00000000,0x00000000,0xff810000,0x04000011,0x678cd88e,0x00000000,0x00000000,
  0xff810000,0x04000001,0x138e848e,0x04000001,0x118ec88e,0xff50000b,0x04000011,
  0x218ed840,0x00000000,0x00000000,0xff810000,0x00004001,0x40000000,0xff411043,
  0x00001001,0xc0000460,0x04000001,0x6784c089,0x04000001,0x1189c08f,0x04000011,
  0x1d8fd08f,0x00000000,0x0000002f,0x04000011,0x208fd820,0x00000000,0x00000000,
  0xff810000,0x00004001,0x40000000,0xff411043,0x00001001,0xc0000460,0x04000001,
  0x3fc2898c,0x04000011,0x208cd060,0x00000000,0x000000ff,0x00004001,0x40000000,
  0xff411043,0x00001001,0xc0000460,0x10000011,0x2686d08c,0x00000000,0x00000028,
  0x04000001,0x11c0c18a,0x04000011,0x1186d08e,0x00000000,0x00000028,0xff000000,
  0xff500073,0x04000011,0x6786d08c,0x00000000,0x00000010,0x10000011,0x278cd884,
  0x00000000,0x00000000,0xff810000,0x04000001,0x0cc28a02,0x04000001,0x118ec001,
  0x04000001,0x118cc000,0x10000011,0x2786d087,0x00000000,0x00000018,0x00004001,
  0x40000000,0xff311023,0x00009012,0xc0000420,0x50000008,0x00000000,0x04000011,
  0x678cd884,0x00000000,0x00000000,0xff810000,0x04000011,0x6784d887,0x00000000,
  0xfffffff8,0x04000011,0x11c0d88f,0x00000000,0x00000000,0xff810000,0x04000011,
  0x198fd08f,0x00000000,0x0000002f,0x04000001,0x05008f00,0x10000011,0x2784d800,
  0x00000000,0xfffffff0,0x04000011,0x11c0d88e,0x00000000,0x00000000,0xff810000,
  0x00004001,0x40000000,0xff411044,0x00001001,0xc0000420,0xff500074,0x04000011,
  0x6788d88c,0x00000000,0x00000000,0xff810000,0x04000011,0x6788d889,0x00000000,
  0x00000000,0xff810000,0x04000001,0x218c8920,0x00004001,0x40000000,0xff411001,
  0x00001001,0xc0000440,0x04000011,0x6786d08c,0x00000000,0x00000010,0x10000011,
  0x2786d087,0x00000000,0x00000018,0x10000011,0x278cd884,0x00000000,0x00000000,
  0xff810000,0x04000001,0x11848e8e,0x04000001,0x138ec88e,0x04000001,0x118cc000,
  0x10000011,0x278cd88e,0x00000000,0x00000000,0xff810000,0x00004001,0x40000000,
  0xff31100e,0x00009012,0xc0000420,0x50000008,0x00000000,0x04000011,0x678cd884,
  0x00000000,0x00000000,0xff810000,0x04000011,0x678cd88e,0x00000000,0x00000000,
  0xff810000,0x04000001,0x138e848e,0x04000001,0x118ec88e,0xff50000b,0x04000011,
  0x10c0d88a,0x00000000,0xffffffff,0x04000011,0x218ed820,0x00000000,0x00000000,
  0xff810000,0x00004001,0x40000000,0xff411043,0x00001001,0xc0000440,0x04000011,
  0x218ed860,0x00000000,0x00000000,0xff810000,0x00004001,0x40000000,0xff411002,
  0x00001001,0xc0000440,0x04000011,0x6784d089,0x00000000,0x00000010,0x04000001,
  0x1189c08f,0x04000011,0x1d8fd08f,0x00000000,0x0000002f,0x04000011,0x208fd820,
  0x00000000,0x00000000,0xff810000,0x00004001,0x40000000,0xff411043,0x00001001,
  0xc0000460,0x04000001,0x3fc2898a,0xff50000c,0x04000001,0x6784c08c,0x04000001,
  0x118cc08f,0x04000011,0x198cd08c,0x00000000,0x00000011,0x04000011,0x1b8cd08c,
  0x00000000,0x00000011,0x04000011,0x1d8fd08f,0x00000000,0x0000002f,0x04000011,
  0x208fd840,0x00000000,0x00000000,0xff810000,0x00004001,0x40000000,0xff411043,
  0x00001001,0xc0000460,0x04000001,0x6784c889,0x04000001,0x1189c08f,0x04000011,
  0x1d8fd08f,0x00000000,0x0000002f,0x04000011,0x208fd820,0x00000000,0x00000000,
  0xff810000,0x00004001,0x40000000,0xff411043,0x00001001,0xc0000460,0x04000001,
  0x11c0c08b,0x04000001,0x3fc2898b,0x04000011,0x668cd88d,0x00000000,0x00000000,
  0xff810000,0x04000001,0x208d8a20,0x00004001,0x40000000,0xff411006,0x00001001,
  0xc0000440,0xff000000,0xff50000d,0x04000001,0x208bc0e0,0x00004001,0x40000000,
  0xff411008,0x00001001,0xc0000440,0xff50000e,0x04000001,0x128a8b8a,0x04000001,
  0x208ac0c0,0x00004001,0x40000000,0xff411075,0x00001001,0xc0000440,0x04000001,
  0x118c8b8e,0x04000011,0x118ed88e,0x00000000,0x00000000,0xff810000,0x04000001,
  0x108ac18a,0xff50000f,0x00004001,0x40000000,0xff411073,0x00001001,0xc0000420,
  0xff500010,0x04000001,0x208d8ac0,0x00004001,0x40000000,0xff411007,0x00001001,
  0xc0000440,0x04000001,0x108a8d8a,0x04000001,0x108ac18a,0x00004001,0x40000000,
  0xff41100d,0x00001001,0xc0000420,0xff500011,0x04000001,0x108dc08a,0x00004001,
  0x40000000,0xff41100d,0x00001001,0xc0000420,0xff500012,0x04000001,0x208bc040,
  0x00004001,0x40000000,0xff411009,0x00001001,0xc0000440,0x04000001,0x108b8d8b,
  0x04000001,0x108bc18b,0x04000001,0x208bc0e0,0x00004001,0x40000000,0xff41100e,
  0x00001001,0xc0000460,0xff500013,0x04000001,0x10c0c18b,0x00004001,0x40000000,
  0xff41100e,0x00001001,0xc0000420,0xff500075,0x04000001,0x088a8a8a,0x00004001,
  0x40000000,0xff41100f,0x00001001,0xc0000420,0xff500076,0x04000011,0x218ed820,
  0x00000000,0x00000000,0xff810000,0x00004001,0x40000000,0xff411043,0x00001001,
  0xc0000440,0x04000011,0x6788d88c,0x00000000,0x00000000,0xff810000,0x04000011,
  0x6788d889,0x00000000,0x00000000,0xff810000,0x04000001,0x218c8920,0x00004001,
  0x40000000,0xff411001,0x00001001,0xc0000440,0x04000011,0x6786d08c,0x00000000,
  0x00000010,0x10000011,0x2786d087,0x00000000,0x00000018,0x10000011,0x278cd884,
  0x00000000,0x00000000,0xff810000,0x04000001,0x11848e8e,0x04000001,0x138ec88e,
  0x04000001,0x118cc000,0x10000011,0x278cd88e,0x00000000,0x00000000,0xff810000,
  0x00004001,0x40000000,0xff31100e,0x00009012,0xc0000420,0x50000008,0x00000000,
  0x04000011,0x678cd884,0x00000000,0x00000000,0xff810000,0x04000011,0x678cd88e,
  0x00000000,0x00000000,0xff810000,0x04000001,0x138e848e,0x04000001,0x118ec88e,
  0xff000000,0xff50000b,0x04000001,0x6784c001,0x04000001,0x1101c08f,0x04000011,
  0x1901d001,0x00000000,0x00000011,0x04000011,0x1b01d001,0x00000000,0x00000011,
  0x04000011,0x1d8fd08f,0x00000000,0x0000002f,0x04000011,0x208fd840,0x00000000,
  0x00000000,0xff810000,0x00004001,0x40000000,0xff411043,0x00001001,0xc0000460,
  0x04000011,0x6786d08c,0x00000000,0x00000010,0x04000011,0x1188d800,0x00000000,
  0x00000000,0xff810000,0x10000011,0x278cd884,0x00000000,0x00000000,0xff810000,
  0x04000011,0x6700d88d,0x00000000,0x00000000,0xff810000,0x10000011,0x2700d88c,
  0x00000000,0x00000000,0xff810000,0x10000011,0x2700d88d,0x00000000,0x00000000,
  0xff810000,0x10000011,0x2786d087,0x00000000,0x00000018,0x00004001,0x40000000,
  0xff311024,0x00009012,0xc0000420,0x50000008,0x00000000,0x04000001,0x1100c000,
  0x00004001,0x40000000,0xff311025,0x00009012,0xc0000420,0x50000008,0x00000000,
  0x04000011,0x678cd884,0x00000000,0x00000000,0xff810000,0x04000011,0x6784d887,
  0x00000000,0xfffffff8,0x04000011,0x11c0d88f,0x00000000,0x00000000,0xff810000,
  0x04000011,0x198fd08f,0x00000000,0x0000002f,0x04000001,0x05008f00,0x10000011,
  0x2784d800,0x00000000,0xfffffff0,0x04000011,0x11c0d88e,0x00000000,0x00000000,
  0xff810000,0x00004001,0x40000000,0xff411044,0x00001001,0xc0000420,0xff500077,
  0x04000011,0x218ed820,0x00000000,0x00000000,0xff810000,0x00004001,0x40000000,
  0xff411043,0x00001001,0xc0000440,0x04000011,0x6788d88c,0x00000000,0x00000000,
  0xff810000,0x04000011,0x6788d889,0x00000000,0x00000000,0xff810000,0x04000001,
  0x218c8920,0x00004001,0x40000000,0xff411001,0x00001001,0xc0000440,0x04000011,
  0x6786d08c,0x00000000,0x00000010,0x10000011,0x2786d087,0x00000000,0x00000018,
  0x10000011,0x278cd884,0x00000000,0x00000000,0xff810000,0x04000001,0x11848e8e,
  0x04000001,0x138ec88e,0x04000001,0x118cc000,0x10000011,0x278cd88e,0x00000000,
  0x00000000,0xff810000,0x00004001,0x40000000,0xff31100e,0x00009012,0xc0000420,
  0x50000008,0x00000000,0x04000011,0x678cd884,0x00000000,0x00000000,0xff810000,
  0x04000011,0x678cd88e,0x00000000,0x00000000,0xff810000,0x04000001,0x138e848e,
  0x04000001,0x118ec88e,0xff000000,0xff50000b,0x04000001,0x6784c001,0x04000001,
  0x1101c08f,0x04000011,0x1901d001,0x00000000,0x00000011,0x04000011,0x1b01d001,
  0x00000000,0x00000011,0x04000011,0x1d8fd08f,0x00000000,0x0000002f,0x04000011,
  0x208fd840,0x00000000,0x00000000,0xff810000,0x00004001,0x40000000,0xff411043,
  0x00001001,0xc0000460,0x04000011,0x6786d08c,0x00000000,0x00000010,0x04000011,
  0x1188d800,0x00000000,0x00000000,0xff810000,0x10000011,0x278cd884,0x00000000,
  0x00000000,0xff810000,0x04000011,0x6700d88d,0x00000000,0x00000000,0xff810000,
  0x10000011,0x2700d88c,0x00000000,0x00000000,0xff810000,0x10000011,0x2700d88d,
  0x00000000,0x00000000,0xff810000,0x10000011,0x2786d087,0x00000000,0x00000018,
  0x00004001,0x40000000,0xff311026,0x00009012,0xc0000420,0x50000008,0x00000000,
  0x04000001,0x1100c000,0x00004001,0x40000000,0xff311025,0x00009012,0xc0000420,
  0x50000008,0x00000000,0x04000011,0x678cd884,0x00000000,0x00000000,0xff810000,
  0x04000011,0x6784d887,0x00000000,0xfffffff8,0x04000011,0x11c0d88f,0x00000000,
  0x00000000,0xff810000,0x04000011,0x198fd08f,0x00000000,0x0000002f,0x04000001,
  0x05008f00,0x10000011,0x2784d800,0x00000000,0xfffffff0,0x04000011,0x11c0d88e,
  0x00000000,0x00000000,0xff810000,0x00004001,0x40000000,0xff411044,0x00001001,
  0xc0000420,0xff500078,0x04000011,0x218ed820,0x00000000,0x00000000,0xff810000,
  0x00004001,0x40000000,0xff411043,0x00001001,0xc0000440,0x04000011,0x6788d88c,
  0x00000000,0x00000000,0xff810000,0x04000011,0x6788d889,0x00000000,0x00000000,
  0xff810000,0x04000001,0x218c8920,0x00004001,0x40000000,0xff411001,0x00001001,
  0xc0000440,0x04000011,0x6786d08c,0x00000000,0x00000010,0x10000011,0x2786d087,
  0x00000000,0x00000018,0x10000011,0x278cd884,0x00000000,0x00000000,0xff810000,
  0x04000001,0x11848e8e,0x04000001,0x138ec88e,0x04000001,0x118cc000,0x10000011,
  0x278cd88e,0x00000000,0x00000000,0xff810000,0x00004001,0x40000000,0xff31100e,
  0x00009012,0xc0000420,0x50000008,0x00000000,0x04000011,0x678cd884,0x00000000,
  0x00000000,0xff810000,0x04000011,0x678cd88e,0x00000000,0x00000000,0xff810000,
  0x04000001,0x138e848e,0x04000001,0x118ec88e,0xff000000,0xff50000b,0x04000001,
  0x6784c001,0x04000001,0x1101c08f,0x04000011,0x1901d001,0x00000000,0x00000011,
  0x04000011,0x1b01d001,0x00000000,0x00000011,0x04000011,0x1d8fd08f,0x00000000,
  0x0000002f,0x04000011,0x208fd840,0x00000000,0x00000000,0xff810000,0x00004001,
  0x40000000,0xff411043,0x00001001,0xc0000460,0x04000011,0x6786d08c,0x00000000,
  0x00000010,0x04000011,0x1188d800,0x00000000,0x00000000,0xff810000,0x10000011,
  0x278cd884,0x00000000,0x00000000,0xff810000,0x04000011,0x6700d88d,0x00000000,
  0x00000000,0xff810000,0x10000011,0x2700d88c,0x00000000,0x00000000,0xff810000,
  0x10000011,0x2700d88d,0x00000000,0x00000000,0xff810000,0x10000011,0x2786d087,
  0x00000000,0x00000018,0x00004001,0x40000000,0xff311027,0x00009012,0xc0000420,
  0x50000008,0x00000000,0x04000001,0x1100c000,0x00004001,0x40000000,0xff311025,
  0x00009012,0xc0000420,0x50000008,0x00000000,0x04000011,0x678cd884,0x00000000,
  0x00000000,0xff810000,0x04000011,0x6784d887,0x00000000,0xfffffff8,0x04000011,
  0x11c0d88f,0x00000000,0x00000000,0xff810000,0x04000011,0x198fd08f,0x00000000,
  0x0000002f,0x04000001,0x05008f00,0x10000011,0x2784d800,0x00000000,0xfffffff0,
  0x04000011,0x11c0d88e,0x00000000,0x00000000,0xff810000,0x00004001,0x40000000,
  0xff411044,0x00001001,0xc0000420,0xff500079,0x04000011,0x218ed820,0x00000000,
  0x00000000,0xff810000,0x00004001,0x40000000,0xff411043,0x00001001,0xc0000440,
  0x04000001,0x6784c089,0x04000001,0x1189c08f,0x04000011,0x1d8fd08f,0x00000000,
  0x0000002f,0x04000011,0x208fd820,0x00000000,0x00000000,0xff810000,0x00004001,
  0x40000000,0xff411043,0x00001001,0xc0000460,0x04000011,0x3189dc89,0x43380000,
  0x00000000,0x04000001,0x1089c08c,0x04000001,0x118ec08a,0x04000001,0x11848e8e,
  0x04000011,0x138ed08e,0x00000000,0x00000010,0xff50000b,0x04000001,0x3ec48c89,
  0x04000001,0x218e8460,0x00004001,0x40000000,0xff411058,0x00001001,0xc0000440,
  0x04000001,0x678ec089,0x04000001,0x1189c08f,0x04000011,0x1d8fd08f,0x00000000,
  0x0000002f,0x04000011,0x208fd820,0x00000000,0x00000000,0xff810000,0x00004001,
  0x40000000,0xff41107a,0x00001001,0xc0000460,0x04000011,0x3189dc89,0x43380000,
  0x00000000,0x04000001,0x1089c08b,0x04000001,0x008c8b8c,0x04000001,0x138ec88e,
  0x00004001,0x40000000,0xff41100b,0x00001001,0xc0000420,0xff000000,0xff50007b,
  0x04000011,0x218ed820,0x00000000,0x00000000,0xff810000,0x00004001,0x40000000,
  0xff411043,0x00001001,0xc0000440,0x04000001,0x6784c089,0x04000001,0x1189c08f,
  0x04000011,0x1d8fd08f,0x00000000,0x0000002f,0x04000011,0x208fd820,0x00000000,
  0x00000000,0xff810000,0x00004001,0x40000000,0xff411043,0x00001001,0xc0000460,
  0x04000011,0x3189dc89,0x43380000,0x00000000,0x04000001,0x1089c08c,0x04000001,
  0x118ec08a,0x04000001,0x11848e8e,0x04000011,0x138ed08e,0x00000000,0x00000010,
  0xff50000b,0x04000001,0x3ec48c89,0x04000001,0x218e8460,0x00004001,0x40000000,
  0xff411058,0x00001001,0xc0000440,0x04000001,0x678ec089,0x04000001,0x1189c08f,
  0x04000011,0x1d8fd08f,0x00000000,0x0000002f,0x04000011,0x208fd820,0x00000000,
  0x00000000,0xff810000,0x00004001,0x40000000,0xff41107a,0x00001001,0xc0000460,
  0x04000011,0x3189dc89,0x43380000,0x00000000,0x04000001,0x1089c08b,0x04000001,
  0x048c8b8c,0x04000001,0x138ec88e,0x00004001,0x40000000,0xff41100b,0x00001001,
  0xc0000420,0xff50007c,0x04000011,0x218ed820,0x00000000,0x00000000,0xff810000,
  0x00004001,0x40000000,0xff411043,0x00001001,0xc0000440,0x04000001,0x6784c089,
  0x04000001,0x1189c08f,0x04000011,0x1d8fd08f,0x00000000,0x0000002f,0x04000011,
  0x208fd820,0x00000000,0x00000000,0xff810000,0x00004001,0x40000000,0xff411043,
  0x00001001,0xc0000460,0x04000011,0x3189dc89,0x43380000,0x00000000,0x04000001,
  0x1089c08c,0x04000001,0x118ec08a,0x04000001,0x11848e8e,0x04000011,0x138ed08e,
  0x00000000,0x00000010,0xff50000b,0x04000001,0x3ec48c89,0x04000001,0x218e8460,
  0x00004001,0x40000000,0xff411058,0x00001001,0xc0000440,0x04000001,0x678ec089,
  0x04000001,0x1189c08f,0x04000011,0x1d8fd08f,0x00000000,0x0000002f,0x04000011,
  0x208fd820,0x00000000,0x00000000,0xff810000,0x00004001,0x40000000,0xff41107a,
  0x00001001,0xc0000460,0x04000011,0x3189dc89,0x43380000,0x00000000,0x04000001,
  0x1089c08b,0x04000001,0x088c8b8c,0x04000001,0x138ec88e,0x00004001,0x40000000,
  0xff41100b,0x00001001,0xc0000420,0xff50007d,0x04000011,0x218ed820,0x00000000,
  0x00000000,0xff810000,0x00004001,0x40000000,0xff411043,0x00001001,0xc0000440,
  0x04000001,0x6784c089,0x04000001,0x1189c08f,0x04000011,0x1d8fd08f,0x00000000,
  0x0000002f,0x04000011,0x208fd820,0x00000000,0x00000000,0xff810000,0x00004001,
  0x40000000,0xff411043,0x00001001,0xc0000460,0x04000011,0x3189dc89,0x43380000,
  0x00000000,0x04000001,0x1089c08c,0x04000001,0x3ec48c89,0x00004001,0x40000000,
  0xff411058,0x00001001,0xc0000420,0xff000000,0xff50007e,0x04000011,0x218ed820,
  0x00000000,0x00000000,0xff810000,0x00004001,0x40000000,0xff411043,0x00001001,
  0xc0000440,0x04000001,0x6784c089,0x04000001,0x1189c08f,0x04000011,0x1d8fd08f,
  0x00000000,0x0000002f,0x04000011,0x208fd820,0x00000000,0x00000000,0xff810000,
  0x00004001,0x40000000,0xff411043,0x00001001,0xc0000460,0x04000011,0x3189dc89,
  0x43380000,0x00000000,0x04000001,0x1089c08c,0x04000001,0x0cc68c8c,0x04000011,
  0x11c0dc89,0x80808080,0x00010203,0x04100011,0x4d8c8c8c,0x0f890000,0x00000000,
  0x04000001,0x3ec48c89,0x00004001,0x40000000,0xff411058,0x00001001,0xc0000420,
  0xff50007f,0x04000011,0x218ed820,0x00000000,0x00000000,0xff810000,0x00004001,
  0x40000000,0xff411043,0x00001001,0xc0000440,0x04000001,0x6784c089,0x04000001,
  0x1189c08f,0x04000011,0x1d8fd08f,0x00000000,0x0000002f,0x04000011,0x208fd820,
  0x00000000,0x00000000,0xff810000,0x00004001,0x40000000,0xff411043,0x00001001,
  0xc0000460,0x04000011,0x3189dc89,0x43380000,0x00000000,0x04000001,0x1089c08c,
  0x04000011,0x088cd88c,0x00000000,0xffffffff,0x04000001,0x3ec48c89,0x00004001,
  0x40000000,0xff411058,0x00001001,0xc0000420,0xff50007a,0x04000001,0x118ac08e,
  0x00004001,0x40000000,0xff411043,0x00001001,0xc0000420,0xff500080,0x04000011,
  0x218ed820,0x00000000,0x00000000,0xff810000,0x00004001,0x40000000,0xff411043,
  0x00001001,0xc0000440,0x04000001,0x6784c000,0x04000001,0x1100c08f,0x04000011,
  0x1d8fd08f,0x00000000,0x0000002f,0x04000011,0x208fd820,0x00000000,0x00000000,
  0xff810000,0x00004001,0x40000000,0xff411043,0x00001001,0xc0000460,0x04000001,
  0x6784c801,0x04000001,0x1101c08f,0x04000011,0x1d8fd08f,0x00000000,0x0000002f,
  0x04000011,0x208fd820,0x00000000,0x00000000,0xff810000,0x00004001,0x40000000,
  0xff411043,0x00001001,0xc0000460,0x04000011,0x3100dc89,0x43380000,0x00000000,
  0x04000011,0x3101dc8a,0x43380000,0x00000000,0x04000001,0x1089c08c,0x04000001,
  0x108ac08b,0x04000011,0x008bd08b,0x00000000,0x000000ff,0x04000001,0x188c8b8c,
  0x04000001,0x3ec48c89,0x00004001,0x40000000,0xff411058,0x00001001,0xc0000420,
  0xff500081,0x04000011,0x218ed820,0x00000000,0x00000000,0xff810000,0x00004001,
  0x40000000,0xff411043,0x00001001,0xc0000440,0x04000001,0x6784c000,0x04000001,
  0x1100c08f,0x04000011,0x1d8fd08f,0x00000000,0x0000002f,0x04000011,0x208fd820,
  0x00000000,0x00000000,0xff810000,0x00004001,0x40000000,0xff411043,0x00001001,
  0xc0000460,0x04000001,0x6784c801,0x04000001,0x1101c08f,0x04000011,0x1d8fd08f,
  0x00000000,0x0000002f,0x04000011,0x208fd820,0x00000000,0x00000000,0xff810000,
  0x00004001,0x40000000,0xff411043,0x00001001,0xc0000460,0x04000011,0x3100dc89,
  0x43380000,0x00000000,0x04000011,0x3101dc8a,0x43380000,0x00000000,0x04000001,
  0x1089c08c,0x04000001,0x108ac08b,0x04000011,0x008bd08b,0x00000000,0x000000ff,
  0x04000001,0x1a8c8b8c,0x04000001,0x3ec48c89,0x00004001,0x40000000,0xff411058,
  0x00001001,0xc0000420,0xff000000,0xff500082,0x04000011,0x218ed820,0x00000000,
  0x00000000,0xff810000,0x00004001,0x40000000,0xff411043,0x00001001,0xc0000440,
  0x04000001,0x6784c000,0x04000001,0x1100c08f,0x04000011,0x1d8fd08f,0x00000000,
  0x0000002f,0x04000011,0x208fd820,0x00000000,0x00000000,0xff810000,0x00004001,
  0x40000000,0xff411043,0x00001001,0xc0000460,0x04000001,0x6784c801,0x04000001,
  0x1101c08f,0x04000011,0x1d8fd08f,0x00000000,0x0000002f,0x04000011,0x208fd820,
  0x00000000,0x00000000,0xff810000,0x00004001,0x40000000,0xff411043,0x00001001,
  0xc0000460,0x04000011,0x3100dc89,0x43380000,0x00000000,0x04000011,0x3101dc8a,
  0x43380000,0x00000000,0x04000001,0x1089c08c,0x04000001,0x108ac08b,0x04000011,
  0x008bd08b,0x00000000,0x000000ff,0x04000001,0x1c8c8b8c,0x04000001,0x3ec48c89,
  0x00004001,0x40000000,0xff411058,0x00001001,0xc0000420,0xff500083,0x04000011,
  0x218ed820,0x00000000,0x00000000,0xff810000,0x00004001,0x40000000,0xff411043,
  0x00001001,0xc0000440,0x04000001,0x6784c000,0x04000001,0x1100c08f,0x04000011,
  0x1d8fd08f,0x00000000,0x0000002f,0x04000011,0x208fd820,0x00000000,0x00000000,
  0xff810000,0x00004001,0x40000000,0xff411043,0x00001001,0xc0000460,0x04000001,
  0x6784c801,0x04000001,0x1101c08f,0x04000011,0x1d8fd08f,0x00000000,0x0000002f,
  0x04000011,0x208fd820,0x00000000,0x00000000,0xff810000,0x00004001,0x40000000,
  0xff411043,0x00001001,0xc0000460,0x04000011,0x3100dc89,0x43380000,0x00000000,
  0x04000011,0x3101dc8a,0x43380000,0x00000000,0x04000001,0x1089c08c,0x04000001,
  0x108ac08b,0x04000011,0x008bd08b,0x00000000,0x000000ff,0x04000001,0x148c8b8c,
  0x04000001,0x3ec48c89,0x00004001,0x40000000,0xff411058,0x00001001,0xc0000420,
  0xff500084,0x04000011,0x218ed820,0x00000000,0x00000000,0xff810000,0x00004001,
  0x40000000,0xff411043,0x00001001,0xc0000440,0x04000001,0x6784c000,0x04000001,
  0x1100c08f,0x04000011,0x1d8fd08f,0x00000000,0x0000002f,0x04000011,0x208fd820,
  0x00000000,0x00000000,0xff810000,0x00004001,0x40000000,0xff411043,0x00001001,
  0xc0000460,0x04000001,0x6784c801,0x04000001,0x1101c08f,0x04000011,0x1d8fd08f,
  0x00000000,0x0000002f,0x04000011,0x208fd820,0x00000000,0x00000000,0xff810000,
  0x00004001,0x40000000,0xff411043,0x00001001,0xc0000460,0x04000011,0x3100dc89,
  0x43380000,0x00000000,0x04000011,0x3101dc8a,0x43380000,0x00000000,0x04000001,
  0x1089c08c,0x04000001,0x108ac08b,0x04000011,0x008bd08b,0x00000000,0x000000ff,
  0x04000001,0x168c8b8c,0x04000001,0x3ec48c89,0x00004001,0x40000000,0xff411058,
  0x00001001,0xc0000420,0xff000000,0xff50004b,0x04000011,0x11c0d88e,0x00000000,
  0x00000000,0xff810000,0xff500043,0x04000011,0x6786d08c,0x00000000,0x00000010,
  0x04000011,0x6784d887,0x00000000,0xfffffff8,0x10000011,0x2786d087,0x00000000,
  0x00000018,0x10000011,0x278cd884,0x00000000,0x00000000,0xff810000,0x04000001,
  0x11848e8e,0x04000001,0x138ec88e,0x04000011,0x118ed88b,0x00000000,0x00000000,
  0xff810000,0x10000011,0x278cd88e,0x00000000,0x00000000,0xff810000,0x04000011,
  0x6784d88e,0x00000000,0xfffffff0,0x04000011,0x198ed08e,0x00000000,0x00000011,
  0x04000011,0x1b8ed08e,0x00000000,0x00000011,0x04000011,0x678cd889,0x00000000,
  0x00000000,0xff810000,0x04000001,0x218b8960,0x00004001,0x40000000,0xff411005,
  0x00001001,0xc0000460,0x04000001,0x118cc000,0x04000011,0x678ed889,0x00000000,
  0x00000000,0xff810000,0x04000001,0x61c089d1,0x00009012,0xc0000420,0x50000008,
  0x00000000,0x04000011,0x678cd884,0x00000000,0x00000000,0xff810000,0x04000001,
  0x1900c38e,0x04000001,0x2100c0e0,0x00004001,0x40000000,0xff411044,0x00001001,
  0xc0000460,0xff50000b,0x04000011,0x678cd88b,0x00000000,0x00000000,0xff810000,
  0x04000001,0x138b848b,0x04000001,0x2100c040,0x04000001,0x118bc88e,0x04000011,
  0x6784d88c,0x00000000,0xfffffff0,0x00004001,0x40000000,0xff411026,0x00001001,
  0xc0000460,0x04000011,0x198cd08c,0x00000000,0x00000011,0x04000011,0x1b8cd08c,
  0x00000000,0x00000011,0x04000011,0x678cd887,0x00000000,0x00000000,0xff810000,
  0x04000001,0x6687c08b,0x04000011,0x018bd089,0x00000000,0x000000ff,0x04000001,
  0x1b8bc58b,0x04000011,0x018bd08b,0x00000000,0x000007f8,0x04000001,0x1187c487,
  0x04000001,0x1989c389,0x04000001,0x67898889,0x04000001,0x61c089d1,0x00001001,
  0xc0000420,0xff500026,0x04000001,0x1184c08b,0x04000011,0x2287d840,0x00000000,
  0x00000000,0xff810000,0x00004001,0x40000000,0xff411003,0x00001001,0xc0000460,
  0x04000011,0x6487d88c,0x00000000,0xfffffffd,0x04000001,0x13c08c8c,0x04000001,
  0x198cc389,0x04000001,0x11848984,0x04000011,0x1384d084,0x00000000,0x00000010,
  0x04000011,0x678bd88c,0x00000000,0xfffffff0,0x04000001,0x118cc08f,0x04000011,
  0x198cd08c,0x00000000,0x00000011,0x04000011,0x1b8cd08c,0x00000000,0x00000011,
  0x04000011,0x1d8fd08f,0x00000000,0x0000002f,0x04000011,0x208fd840,0x00000000,
  0x00000000,0xff810000,0x00004001,0x40000000,0xff411023,0x00001001,0xc0000460,
  0x04000001,0x118bc084,0x10000011,0x2784d887,0x00000000,0xfffffff8,0x04000011,
  0x678cd887,0x00000000,0x00000000,0xff810000,0x04000001,0x6687c08b,0x04000011,
  0x018bd089,0x00000000,0x000000ff,0x04000001,0x1b8bc58b,0x04000011,0x018bd08b,
  0x00000000,0x000007f8,0x04000001,0x1187c487,0x04000001,0x1989c389,0x04000001,
  0x67898889,0x04000001,0x61c089d1,0x00001001,0xc0000420,0xff50000d,0x04000001,
  0x1187c08c,0x04000011,0x018cd88c,0x00000000,0xfffffff8,0x04000001,0x13848c84,
  0x04000011,0x678bd88c,0x00000000,0xfffffff0,0x04000001,0x118cc08f,0x04000011,
  0x198cd08c,0x00000000,0x00000011,0x04000011,0x1b8cd08c,0x00000000,0x00000011,
  0x04000011,0x1d8fd08f,0x00000000,0x0000002f,0x04000011,0x208fd840,0x00000000,
  0x00000000,0xff810000,0x00004001,0x40000000,0xff411023,0x00001001,0xc0000460,
  0x04000001,0x118bc084,0x10000011,0x2784d887,0x00000000,0xfffffff8,0x04000011,
  0x678cd887,0x00000000,0x00000000,0xff810000,0x04000001,0x6687c08b,0x04000011,
  0x018bd089,0x00000000,0x000000ff,0x04000001,0x1b8bc58b,0x04000011,0x018bd08b,
  0x00000000,0x000007f8,0x04000001,0x1187c487,0x04000001,0x1989c389,0x04000001,
  0x67898889,0x04000001,0x61c089d1,0x00001001,0xc0000420,0xff000000,0xff50000f,
  0x04000011,0x11c0d801,0x00000000,0x00000000,0xff810000,0x04000001,0x118cc000,
  0x00004001,0x40000000,0xff311000,0x00009012,0xc0000420,0x50000008,0x00000000,
  0x04000011,0x678cd884,0x00000000,0x00000000,0xff810000,0x04000001,0x11c0c000,
  0x00004001,0x40000000,0xff41100b,0x00001001,0xc0000420,0xff500085,0x04000001,
  0x11c0c080,0x04000001,0x6780c080,0xff500086,0x04000011,0x6488d88e,0x00000000,
  0x00000000,0xff810000,0x04000011,0x238ed840,0x00000000,0x00000000,0xff810000,
  0x00004001,0x40000000,0xff411005,0x00001001,0xc0000460,0x00004001,0x40000000,
  0xff411001,0x00001001,0xc0000420,0xff500087,0x04000011,0x6488d88e,0x00000000,
  0x00000000,0xff810000,0x04000011,0x238ed840,0x00000000,0x00000000,0xff810000,
  0x00004001,0x40000000,0xff411005,0x00001001,0xc0000460,0x04000011,0x238ed840,
  0x00000000,0x00000000,0xff810000,0x00004001,0x40000000,0xff411005,0x00001001,
  0xc0000440,0x04000011,0x6688d889,0x00000000,0x00000000,0xff810000,0x04000001,
  0x1389c189,0x10000011,0x2688d889,0x00000000,0x00000000,0xff810000,0x04000001,
  0x2189c040,0x00004001,0x40000000,0xff411001,0x00001001,0xc0000440,0x04000011,
  0x238ed840,0x00000000,0x00000000,0xff810000,0x00004001,0x40000000,0xff411005,
  0x00001001,0xc0000440,0xff50000b,0x04000011,0x6786d08c,0x00000000,0x00000010,
  0x10000011,0x278cd884,0x00000000,0x00000000,0xff810000,0x04000001,0x1187c001,
  0x04000001,0x118cc000,0x00004001,0x40000000,0xff311028,0x00009012,0xc0000420,
  0x50000008,0x00000000,0xff000000,0xff50000d,0x04000011,0x678cd884,0x00000000,
  0x00000000,0xff810000,0xff50000e,0x04000011,0x6487d88b,0x00000000,0xfffffffd,
  0x04000001,0x198bc38b,0xff50000f,0x04000011,0x6487d88a,0x00000000,0xfffffffc,
  0x04000001,0x198ac38a,0x04000011,0x6587d88e,0x00000000,0xfffffffe,0x04000001,
  0x1b8ec58c,0x04000001,0x198ec38e,0x04000011,0x018cd08c,0x00000000,0x000007f8,
  0x04000011,0x018ed08d,0x00000000,0x000007f8,0x04000001,0x11888a8a,0x04000011,
  0x678ad88a,0x00000000,0x00000000,0xff810000,0x04000001,0x61c08ad1,0x00001001,
  0xc0000420,0xff500088,0x04000001,0x11c0c080,0x04000001,0x6780c080,0xff500089,
  0x10000011,0x2786d087,0x00000000,0x00000018,0xff50008a,0x04000001,0x11848e8e,
  0x04000001,0x138ec88e,0x04000011,0x6786d08c,0x00000000,0x00000010,0x10000011,
  0x278cd884,0x00000000,0x00000000,0xff810000,0x10000011,0x278cd88e,0x00000000,
  0x00000000,0xff810000,0x04000001,0x1187c001,0x04000001,0x118cc000,0x00004001,
  0x40000000,0xff311029,0x00009012,0xc0000420,0x50000008,0x00000000,0x04000001,
  0x11c0c089,0x10000011,0x2786d089,0x00000000,0x00000018,0x04000011,0x678cd884,
  0x00000000,0x00000000,0xff810000,0x04000001,0x1100c08b,0x04000011,0x678cd88e,
  0x00000000,0x00000000,0xff810000,0x04000001,0x138e848e,0x04000001,0x61c08bd1,
  0x04000011,0x6487d88b,0x00000000,0xfffffffd,0x04000001,0x198bc38b,0x04000001,
  0x118ec88e,0x00001001,0xc0000420,0xff50008b,0xff000000,0x04000011,0x6786d08c,
  0x00000000,0x00000010,0x10000011,0x278cd884,0x00000000,0x00000000,0xff810000,
  0x04000001,0x1187c001,0x04000001,0x118cc000,0x00004001,0x40000000,0xff31102a,
  0x00009012,0xc0000420,0x50000008,0x00000000,0x04000011,0x678cd884,0x00000000,
  0x00000000,0xff810000,0x04000001,0x1387c487,0x1c000113,0x6687c089,0x1187c487,
  0x6487c08a,0xf0000024,0x198ac38a,0x1b89cd8e,0x1b89d08c,0x1b89c58b,0x00000015,
  0x60000022,0x018ed88e,0x018bd18b,0x00000000,0x000007f8,0x0007fff8,0x70000123,
  0x678a888a,0x018cd08c,0x018ed18d,0x000007f8,0x000007f8,0x04000001,0x61c08ad1,
  0x00001001,0xc0000420,0xff000000,0xff50005a,0x00008011,0x00000000,0x00000000,
  0x00000090,0x04000011,0x0180dc81,0x80000000,0x00000000,0x04000011,0x0180dc82,
  0x7fffffff,0xffffffff,0x04000011,0x2f82dca0,0x43300000,0x00000000,0x00004001,
  0x40000000,0xff411003,0x00001001,0xc0000440,0x04000011,0x3182dc83,0x43300000,
  0x00000000,0x04000011,0x3383dc83,0x43300000,0x00000000,0x04000001,0x05838183,
  0x04000001,0x2f808320,0x04000011,0x11c0dc81,0x3ff00000,0x00000000,0x00004001,
  0x40000000,0xff411002,0x00001001,0xc0000460,0x04000001,0x33838183,0xff50000c,
  0x04000001,0x1183c080,0xff50000d,0x00004001,0xf0000000,0x00001001,0xc0000c20,
  0xff50005c,0x00008011,0x00000000,0x00000000,0x00000090,0x04000011,0x0180dc81,
  0x80000000,0x00000000,0x04000011,0x0180dc82,0x7fffffff,0xffffffff,0x04000011,
  0x2f82dca0,0x43300000,0x00000000,0x00004001,0x40000000,0xff411003,0x00001001,
  0xc0000440,0x04000011,0x3182dc83,0x43300000,0x00000000,0x04000011,0x3383dc83,
  0x43300000,0x00000000,0x04000001,0x05838183,0x04000001,0x2f8083c0,0x04000011,
  0x11c0dc81,0xbff00000,0x00000000,0x00004001,0x40000000,0xff411002,0x00001001,
  0xc0000460,0x04000001,0x33838183,0xff50000c,0x04000001,0x1183c080,0xff50000d,
  0x00004001,0xf0000000,0x00001001,0xc0000c20,0xff50008c,0x00008011,0x00000000,
  0x00000000,0x00000090,0x04000011,0x0180dc81,0x80000000,0x00000000,0x04000011,
  0x0180dc82,0x7fffffff,0xffffffff,0x04000011,0x2f82dca0,0x43300000,0x00000000,
  0x00004001,0x40000000,0xff411003,0x00001001,0xc0000440,0x04000011,0x3182dc83,
  0x43300000,0x00000000,0x04000011,0x3383dc83,0x43300000,0x00000000,0x04000001,
  0x2f828320,0x00004001,0x40000000,0xff411001,0x00001001,0xc0000460,0x04000011,
  0x3383dc83,0x3ff00000,0x00000000,0xff50000b,0x04000001,0x05838183,0xff50000c,
  0x04000001,0x1183c080,0xff50000d,0x00004001,0xf0000000,0x00001001,0xc0000c20,
  0xff50008d,0x00008011,0x00000000,0x00000000,0x00000090,0x82000001,0x49808182,
  0x04000011,0x0182dc83,0x7fffffff,0xffffffff,0x04000011,0x2f83dca0,0x43300000,
  0x00000000,0x00004001,0x40000000,0xff411002,0x00001001,0xc0000440,0x04000011,
  0x0182dc84,0x80000000,0x00000000,0x04000011,0x3183dc83,0x43300000,0x00000000,
  0x04000011,0x3383dc83,0x43300000,0x00000000,0x04000001,0x05838483,0x04000001,
  0x2f828320,0x00004001,0x40000000,0xff411001,0x00001001,0xc0000460,0x04000011,
  0x3383dc83,0x3ff00000,0x00000000,0xff50000b,0x04000001,0x39818381,0x04000001,
  0x33808180,0x00004001,0xf0000000,0x00001001,0xc0000c20,0xff50000c,0x04000001,
  0x39818281,0x04000001,0x33808180,0x00004001,0xf0000000,0x00001001,0xc0000c20,
  0xff50008e,0x04000001,0x11c5c000,0x00004001,0x40000000,0xff31102b,0x00009012,
  0xc0000420,0x50000008,0x00000000,0xff50008f,0x04000001,0x11c0c089,0xff000000,
  0xff500025,0x04000011,0x6786d08b,0x00000000,0x00000010,0x04000011,0x6788d887,
  0x00000000,0x00000000,0xff810000,0x10000011,0x2787d88b,0x00000000,0x00000000,
  0xff810000,0x10000011,0x278bd884,0x00000000,0x00000000,0xff810000,0x10000011,
  0x278bd88c,0x00000000,0x00000000,0xff810000,0x04000001,0x1187c000,0x04000001,
  0x1100c001,0x00004001,0x40000000,0xff31102c,0x00009012,0xc0000420,0x50000008,
  0x00000000,0x04000011,0x6787d880,0x00000000,0x00000000,0xff810000,0x00004001,
  0xf0000000,0x00001001,0xc0000c20,0xff500090,0x00008011,0x00000000,0x00000000,
  0x00000110,0x00008001,0x440000c4,0x04000011,0x6680d882,0x00000000,0x00000000,
  0xff810000,0x04000001,0x13c08282,0x04100011,0x58ec8283,0x01c00000,0x00000000,
  0x04000011,0x6480d884,0x00000000,0x00000000,0xff810000,0x04000001,0x1384c184,
  0x04000001,0x2184c0c0,0x00004001,0x40000000,0xff411002,0x00001001,0xc0000440,
  0x04000001,0x1984c384,0xff50000b,0x04000011,0x1184d081,0x00000000,0x00000040,
  0x04000011,0x1180d885,0x00000000,0x00000000,0xff810000,0x04000001,0x67858485,
  0x10000001,0x27838185,0x04000001,0x1384c884,0x04000001,0x2184c0c0,0x00004001,
  0x40000000,0xff41100b,0x00001001,0xc0000460,0xff50000c,0x04000011,0x6780d800,
  0x00000000,0x00000000,0xff810000,0x10000001,0x2783c000,0x04000011,0x6780d801,
  0x00000000,0x00000000,0xff810000,0x10000001,0x2783c801,0x04000011,0x6780d802,
  0x00000000,0x00000000,0xff810000,0x10000011,0x2783d002,0x00000000,0x00000010,
  0x04000011,0x6780d803,0x00000000,0x00000000,0xff810000,0x10000011,0x2783d003,
  0x00000000,0x00000018,0x04000011,0x6780d804,0x00000000,0x00000000,0xff810000,
  0x10000011,0x2783d004,0x00000000,0x00000020,0x04000011,0x6780d805,0x00000000,
  0x00000000,0xff810000,0x10000011,0x2783d005,0x00000000,0x00000028,0x04000011,
  0x6780d806,0x00000000,0x00000000,0xff810000,0x10000011,0x2783d006,0x00000000,
  0x00000030,0x04000011,0x6780d807,0x00000000,0x00000000,0xff810000,0x10000011,
  0x2783d007,0x00000000,0x00000038,0x04000011,0x6780d881,0x00000000,0x00000000,
  0xff810000,0x04000001,0x61c081d1,0x00009012,0xc0000420,0x50000004,0x00000000,
  0x04000011,0x6680d881,0x00000000,0x00000000,0xff810000,0x04000001,0x2181c040,
  0x00004001,0x40000000,0xff411003,0x00001001,0xc0000440,0x04000001,0x1181c002,
  0x04000001,0x1183c001,0x04000011,0x6780d800,0x00000000,0x00000000,0xff810000,
  0x00004001,0x40000000,0xff31102d,0x00009012,0xc0000420,0x50000004,0x00000000,
  0x00004001,0xf0000000,0x00001001,0xc0000c20,0xff000000,0xff50000d,0x10000011,
  0xa780d800,0x00000000,0x00000000,0xff810000,0x10000011,0xa780d801,0x00000000,
  0x00000000,0xff810000,0x10000011,0xa780d802,0x00000000,0x00000000,0xff810000,
  0x10000011,0xa780d803,0x00000000,0x00000000,0xff810000,0x10000011,0xa780d804,
  0x00000000,0x00000000,0xff810000,0x10000011,0xa780d805,0x00000000,0x00000000,
  0xff810000,0x10000011,0xa780d806,0x00000000,0x00000000,0xff810000,0x10000011,
  0xa780d807,0x00000000,0x00000000,0xff810000,0x00004001,0xf0000000,0x00001001,
  0xc0000c20,0xff000000,0xff700000,0xff000000,0x04000001,0x67848b8f,0x04000001,
  0x67848e8c,0x04000001,0x118fc08b,0x04000001,0x118cc08e,0x04000011,0x1d8fd08f,
  0x00000000,0x0000002f,0x04000011,0x1d8cd08c,0x00000000,0x0000002f,0x00004001,
  0x40000000,0xff411033,0x04000011,0x208fd820,0x00000000,0x00000000,0xff810000,
  0x00001001,0xc0000460,0x04000011,0x208cd820,0x00000000,0x00000000,0xff810000,
  0x00001001,0xc0000460,0x04000001,0x1187c487,0xff000000,0x04000001,0x2f8b8e20,
  0xff000000,0x04000001,0x2f8b8ea0,0xff000000,0x04000001,0x2f8b8e40,0xff000000,
  0x04000001,0x2f8b8ec0,0xff000000,0x00004001,0x40000000,0xff411001,0x00001001,
  0xc0000460,0x04000011,0x6587d88e,0x00000000,0xfffffffe,0x04000001,0x198ec28e,
  0x04000001,0x11878e87,0x04000011,0x1387d887,0x00000000,0x00000000,0xff810000,
  0xff50000b,0x1c000113,0x6687c089,0x1187c487,0x6487c08a,0xf0000024,0x198ac38a,
  0x1b89cd8e,0x1b89d08c,0x1b89c58b,0x00000015,0x60000022,0x018ed88e,0x018bd18b,
  0x00000000,0x000007f8,0x0007fff8,0x70000123,0x678a888a,0x018cd08c,0x018ed18d,
  0x000007f8,0x000007f8,0x04000001,0x61c08ad1,0x00001001,0xc0000420,0xff000000,
  0x04000001,0x67848e8c,0x04000001,0x67848b8f,0x04000001,0x1187c487,0x04000001,
  0x118cc08e,0x04000001,0x118fc08b,0x04000011,0x1d8cd08c,0x00000000,0x0000002f,
  0x04000011,0x1d8fd08f,0x00000000,0x0000002f,0x00004001,0x40000000,0xff411005,
  0x04000011,0x208cd820,0x00000000,0x00000000,0xff810000,0x00001001,0xc0000460,
  0x04000011,0x208fd820,0x00000000,0x00000000,0xff810000,0x00001001,0xc0000460,
  0x04000001,0x2f8b8e60,0x04000001,0x2f8b8e01,0xff000000,0x00004001,0x40000000,
  0xff411002,0x00001001,0xc0000440,0x00001001,0xc0000461,0xff50000b,0x04000011,
  0x6587d88e,0x00000000,0xfffffffe,0x04000001,0x198ec28e,0x04000001,0x11878e87,
  0x04000011,0x1387d887,0x00000000,0x00000000,0xff810000,0xff50000c,0xff000000,
  0x00004001,0x40000000,0xff411002,0x00001001,0xc0000440,0x00004001,0x40000000,
  0xff411001,0x00001001,0xc0000441,0xff50000c,0x04000011,0x6587d88e,0x00000000,
  0xfffffffe,0x04000001,0x198ec28e,0x04000001,0x11878e87,0x04000011,0x1387d887,
  0x00000000,0x00000000,0xff810000,0xff50000b,0xff000000,0x1c000113,0x6687c089,
  0x1187c487,0x6487c08a,0xf0000024,0x198ac38a,0x1b89cd8e,0x1b89d08c,0x1b89c58b,
  0x00000015,0x60000022,0x018ed88e,0x018bd18b,0x00000000,0x000007f8,0x0007fff8,
  0x70000123,0x678a888a,0x018cd08c,0x018ed18d,0x000007f8,0x000007f8,0x04000001,
  0x61c08ad1,0x00001001,0xc0000420,0xff50000f,0x04000011,0x208cd840,0x00000000,
  0x00000000,0xff810000,0x00004001,0x40000000,0xff411038,0x00001001,0xc0000440,
  0x04000011,0x208fd840,0x00000000,0x00000000,0xff810000,0x00001001,0xc0000440,
  0x04000001,0x218b8e40,0x00004001,0x40000000,0xff41100b,0x00001001,0xc0000440,
  0x04000001,0x208c8f40,0x00004001,0x40000000,0xff41100c,0x00001001,0xc0000460,
  0x04000011,0x208cd860,0x00000000,0x00000000,0xff810000,0x00001001,0xc0000460,
  0x04000011,0x198bd08b,0x00000000,0x00000011,0x04000011,0x1b8bd08b,0x00000000,
  0x00000011,0x04000011,0x678bd88c,0x00000000,0x00000000,0xff810000,0x04000001,
  0x218cc040,0x00004001,0x40000000,0xff41100c,0x00001001,0xc0000440,0x04000011,
  0x648cd889,0x00000000,0x00000000,0xff810000,0x04000011,0x2389d840,0x00000000,
  0x00000000,0xff810000,0x00001001,0xc0000460,0xff000000,0x04000001,0x11c0c08c,
  0xff000000,0x04000001,0x11c0c18c,0xff000000,0x00004001,0x40000000,0xff411037,
  0x00001001,0xc0000420,0xff000000,0x04000001,0x67848b8c,0x04000001,0x13858e89,
  0x04000011,0x6789d88e,0x00000000,0xfffffff8,0x04000001,0x1187c487,0x04000001,
  0x118cc08f,0x04000011,0x198cd08c,0x00000000,0x00000011,0x04000011,0x1b8cd08c,
  0x00000000,0x00000011,0x04000011,0x1d8fd08f,0x00000000,0x0000002f,0x04000011,
  0x208fd840,0x00000000,0x00000000,0xff810000,0x00004001,0x40000000,0xff411003,
  0x00001001,0xc0000460,0x04000001,0x218c8e40,0xff000000,0x00004001,0x40000000,
  0xff411002,0x00001001,0xc0000460,0xff50000b,0x04000011,0x6587d88e,0x00000000,
  0xfffffffe,0x04000001,0x198ec28e,0x04000001,0x11878e87,0x04000011,0x1387d887,
  0x00000000,0x00000000,0xff810000,0xff50000c,0xff000000,0x00004001,0x40000000,
  0xff411001,0x00001001,0xc0000440,0xff50000c,0x04000011,0x6587d88e,0x00000000,
  0xfffffffe,0x04000001,0x198ec28e,0x04000001,0x11878e87,0x04000011,0x1387d887,
  0x00000000,0x00000000,0xff810000,0xff50000b,0xff000000,0x1c000113,0x6687c089,
  0x1187c487,0x6487c08a,0xf0000024,0x198ac38a,0x1b89cd8e,0x1b89d08c,0x1b89c58b,
  0x00000015,0x60000022,0x018ed88e,0x018bd18b,0x00000000,0x000007f8,0x0007fff8,
  0x70000123,0x678a888a,0x018cd08c,0x018ed18d,0x000007f8,0x000007f8,0x04000001,
  0x61c08ad1,0x00001001,0xc0000420,0xff50000d,0x04000011,0x208fd840,0x00000000,
  0x00000000,0xff810000,0x00004001,0x40000000,0xff41100c,0x00001001,0xc0000460,
  0x00004001,0x40000000,0xff411038,0x00001001,0xc0000420,0xff000000,0x04000001,
  0x67848b8c,0x04000001,0x1187c487,0x04000001,0x118cc08f,0x04000011,0x1d8fd08f,
  0x00000000,0x0000002f,0x04000011,0x208fd820,0x00000000,0x00000000,0xff810000,
  0x00004001,0x40000000,0xff411003,0x00001001,0xc0000460,0x04000001,0x67858e89,
  0x04000001,0x67848b8a,0x04000001,0x2f898a60,0x04000001,0x2f898a01,0xff000000,
  0x00004001,0x40000000,0xff411002,0x00001001,0xc0000440,0x00001001,0xc0000461,
  0xff50000b,0x04000011,0x6587d88e,0x00000000,0xfffffffe,0x04000001,0x198ec28e,
  0x04000001,0x11878e87,0x04000011,0x1387d887,0x00000000,0x00000000,0xff810000,
  0xff50000c,0xff000000,0x00004001,0x40000000,0xff411002,0x00001001,0xc0000440,
  0x00004001,0x40000000,0xff411001,0x00001001,0xc0000441,0xff50000c,0x04000011,
  0x6587d88e,0x00000000,0xfffffffe,0x04000001,0x198ec28e,0x04000001,0x11878e87,
  0x04000011,0x1387d887,0x00000000,0x00000000,0xff810000,0xff50000b,0xff000000,
  0x1c000113,0x6687c089,0x1187c487,0x6487c08a,0xf0000024,0x198ac38a,0x1b89cd8e,
  0x1b89d08c,0x1b89c58b,0x00000015,0x60000022,0x018ed88e,0x018bd18b,0x00000000,
  0x000007f8,0x0007fff8,0x70000123,0x678a888a,0x018cd08c,0x018ed18d,0x000007f8,
  0x000007f8,0x04000001,0x61c08ad1,0x00001001,0xc0000420,0xff50000d,0x04000011,
  0x208fd840,0x00000000,0x00000000,0xff810000,0x00004001,0x40000000,0xff41100c,
  0x00001001,0xc0000460,0x00004001,0x40000000,0xff411038,0x00001001,0xc0000420,
  0xff000000,0x04000001,0x67848b8c,0x04000001,0x1b8ec38e,0x04000011,0x098ed88e,
  0x00000000,0xffffffff,0x04000011,0x1d8cd08c,0x00000000,0x0000002f,0x04000001,
  0x1187c487,0x04000001,0x208c8e40,0xff000000,0x00004001,0x40000000,0xff411002,
  0x00001001,0xc0000460,0x04000011,0x6587d88e,0x00000000,0xfffffffe,0x04000001,
  0x198ec28e,0x04000001,0x11878e87,0x04000011,0x1387d887,0x00000000,0x00000000,
  0xff810000,0xff50000b,0x1c000113,0x6687c089,0x1187c487,0x6487c08a,0xf0000024,
  0x198ac38a,0x1b89cd8e,0x1b89d08c,0x1b89c58b,0x00000015,0x60000022,0x018ed88e,
  0x018bd18b,0x00000000,0x000007f8,0x0007fff8,0x70000123,0x678a888a,0x018cd08c,
  0x018ed18d,0x000007f8,0x000007f8,0x04000001,0x61c08ad1,0x00001001,0xc0000420,
  0xff50000c,0x04000011,0x208cd840,0x00000000,0x00000000,0xff810000,0x00004001,
  0x40000000,0xff41100b,0x00001001,0xc0000460,0x00004001,0x40000000,0xff411038,
  0x00001001,0xc0000420,0xff000000,0x00004001,0x40000000,0xff411001,0x00001001,
  0xc0000440,0x04000011,0x208cd840,0x00000000,0x00000000,0xff810000,0x00004001,
  0x40000000,0xff411038,0x00001001,0xc0000440,0x04000011,0x6587d88e,0x00000000,
  0xfffffffe,0x04000001,0x198ec28e,0x04000001,0x11878e87,0x04000011,0x1387d887,
  0x00000000,0x00000000,0xff810000,0xff50000b,0x1c000113,0x6687c089,0x1187c487,
  0x6487c08a,0xf0000024,0x198ac38a,0x1b89cd8e,0x1b89d08c,0x1b89c58b,0x00000015,
  0x60000022,0x018ed88e,0x018bd18b,0x00000000,0x000007f8,0x0007fff8,0x70000123,
  0x678a888a,0x018cd08c,0x018ed18d,0x000007f8,0x000007f8,0x04000001,0x61c08ad1,
  0x00001001,0xc0000420,0xff000000,0x04000001,0x67848e8f,0x04000001,0x1187c487,
  0xff000000,0x04000001,0x118fc08c,0xff000000,0x04000011,0x1d8fd08f,0x00000000,
  0x0000002f,0x04000011,0x208fd820,0x00000000,0x00000000,0xff810000,0x00004001,
  0x40000000,0xff411001,0xff000000,0x00001001,0xc0000460,0xff000000,0x00001001,
  0xc0000440,0xff000000,0x10000001,0x27848b8c,0xff000000,0x04000011,0x6587d88e,
  0x00000000,0xfffffffe,0x04000001,0x198ec28e,0x04000001,0x11878e87,0x04000011,
  0x1387d887,0x00000000,0x00000000,0xff810000,0xff50000b,0x1c000113,0x6687c089,
  0x1187c487,0x6487c08a,0xf0000024,0x198ac38a,0x1b89cd8e,0x1b89d08c,0x1b89c58b,
  0x00000015,0x60000022,0x018ed88e,0x018bd18b,0x00000000,0x000007f8,0x0007fff8,
  0x70000123,0x678a888a,0x018cd08c,0x018ed18d,0x000007f8,0x000007f8,0x04000001,
  0x61c08ad1,0x00001001,0xc0000420,0xff000000,0x04000001,0x67848b8c,0x04000011,
  0x1d8cd08c,0x00000000,0x0000002c,0x04000011,0x018cdc8c,0xffffffff,0xfffffff8,
  0x04000001,0x118c8e8c,0x04000001,0x218cc040,0x00004001,0x40000000,0xff411039,
  0x00001001,0xc0000460,0x1c000113,0x6687c089,0x1187c487,0x6487c08a,0xf0000024,
  0x198ac38a,0x1b89cd8e,0x1b89d08c,0x1b89c58b,0x00000015,0x60000022,0x018ed88e,
  0x018bd18b,0x00000000,0x000007f8,0x0007fff8,0x70000123,0x678a888a,0x018cd08c,
  0x018ed18d,0x000007f8,0x000007f8,0x04000001,0x61c08ad1,0x00001001,0xc0000420,
  0xff000000,0x04000001,0x67848b89,0x04000001,0x1189c08f,0x04000011,0x1d8fd08f,
  0x00000000,0x0000002f,0x04000011,0x208fd820,0x00000000,0x00000000,0xff810000,
  0x00004001,0x40000000,0xff411039,0x00001001,0xc0000460,0x1c000113,0x6687c089,
  0x1187c487,0x6487c08a,0xf0000024,0x198ac38a,0x1b89cd8e,0x1b89d08c,0x1b89c58b,
  0x00000015,0x60000022,0x018ed88e,0x018bd18b,0x00000000,0x000007f8,0x0007fff8,
  0x70000123,0x678a888a,0x018cd08c,0x018ed18d,0x000007f8,0x000007f8,0x04000001,
  0x61c08ad1,0x00001001,0xc0000420,0xff000000,0xb8000124,0x1187c487,0x6487c08a,
  0x67848e00,0x6687c089,0x00000000,0xf0000024,0x198ac38a,0x1b89cd8e,0x1b89c58b,
  0x27848b00,0x00000000,0x70000123,0x678a888a,0x018ed88e,0x1b89d18c,0x00000015,
  0x0007fff8,0x64000023,0x61c08ad1,0x018cd08c,0x018ed18d,0x000007f8,0x000007f8,
  0x20001012,0xc0000420,0x018bd08b,0x000007f8,0xff000000,0x04000001,0x67848e8c,
  0x04000011,0x1d8cd08c,0x00000000,0x0000002f,0x04000001,0x11c0c28d,0x04000011,
  0x208cd820,0x00000000,0x00000000,0xff810000,0x00004001,0x40000000,0xff411001,
  0x00001001,0xc0000460,0x04000001,0x138dc18d,0xff50000b,0x04000011,0x198dd08d,
  0x00000000,0x0000002f,0x04000011,0x098dd88d,0x00000000,0xffffffff,0x10000001,
  0x27848b8d,0x1c000113,0x6687c089,0x1187c487,0x6487c08a,0xf0000024,0x198ac38a,
  0x1b89cd8e,0x1b89d08c,0x1b89c58b,0x00000015,0x60000022,0x018ed88e,0x018bd18b,
  0x00000000,0x000007f8,0x0007fff8,0x70000123,0x678a888a,0x018cd08c,0x018ed18d,
  0x000007f8,0x000007f8,0x04000001,0x61c08ad1,0x00001001,0xc0000420,0xff000000,
  0x04000001,0x67848e8c,0x04000001,0x118cc08f,0x04000011,0x1d8fd08f,0x00000000,
  0x0000002f,0x04000011,0x208fd820,0x00000000,0x00000000,0xff810000,0x00004001,
  0x40000000,0xff41103c,0x00001001,0xc0000460,0x04000011,0x098cdc8c,0x80000000,
  0x00000000,0x10000001,0x27848b8c,0x1c000113,0x6687c089,0x1187c487,0x6487c08a,
  0xf0000024,0x198ac38a,0x1b89cd8e,0x1b89d08c,0x1b89c58b,0x00000015,0x60000022,
  0x018ed88e,0x018bd18b,0x00000000,0x000007f8,0x0007fff8,0x70000123,0x678a888a,
  0x018cd08c,0x018ed18d,0x000007f8,0x000007f8,0x04000001,0x61c08ad1,0x00001001,
  0xc0000420,0xff000000,0x04000001,0x67848e8e,0x04000001,0x118ec08f,0x04000011,
  0x198ed08e,0x00000000,0x00000011,0x04000011,0x1b8ed08e,0x00000000,0x00000011,
  0x04000011,0x1d8fd08f,0x00000000,0x0000002f,0x04000011,0x208fd840,0x00000000,
  0x00000000,0xff810000,0x00004001,0x40000000,0xff411002,0x00001001,0xc0000460,
  0x04000011,0x668ed889,0x00000000,0x00000000,0xff810000,0x04000001,0x3ec4898a,
  0xff50000b,0x10000001,0x27848b8a,0x1c000113,0x6687c089,0x1187c487,0x6487c08a,
  0xf0000024,0x198ac38a,0x1b89cd8e,0x1b89d08c,0x1b89c58b,0x00000015,0x60000022,
  0x018ed88e,0x018bd18b,0x00000000,0x000007f8,0x0007fff8,0x70000123,0x678a888a,
  0x018cd08c,0x018ed18d,0x000007f8,0x000007f8,0x04000001,0x61c08ad1,0x00001001,
  0xc0000420,0xff50000c,0x04000011,0x218fd840,0x00000000,0x00000000,0xff810000,
  0x00004001,0x40000000,0xff41103e,0x00001001,0xc0000460,0x04000001,0x118ec000,
  0xff000000,0x04000011,0x678ed88c,0x00000000,0x00000000,0xff810000,0x04000001,
  0x218cc040,0x00004001,0x40000000,0xff411009,0x00001001,0xc0000460,0xff50000d,
  0xff000000,0xff50003f,0x00004001,0x40000000,0xff31102e,0x00009012,0xc0000420,
  0x50000008,0x00000000,0x04000001,0x3ec4008a,0x04000011,0x6487d88b,0x00000000,
  0xfffffffd,0x04000001,0x198bc38b,0x00004001,0x40000000,0xff41100b,0x00001001,
  0xc0000420,0xff000000,0xff500013,0x04000011,0x648cd889,0x00000000,0x00000000,
  0xff810000,0x04000011,0x2389d840,0x00000000,0x00000000,0xff810000,0x00004001,
  0x40000000,0xff41100d,0x00001001,0xc0000460,0x00004001,0x40000000,0xff41103e,
  0x00001001,0xc0000420,0xff000000,0xf0004125,0xe487c002,0x67858d8a,0x118bc000,
  0x67848c89,0x40000000,0xff41303a,0x68000023,0x1902c302,0x1d89d08f,0x31898a01,
  0x00000000,0x0000002f,0xb0000123,0x67028802,0x208fd820,0xe687c004,0x00000000,
  0x00000000,0xff810000,0xff000000,0xf0004125,0xe487c002,0x67858d8a,0x118bc000,
  0x67848c89,0x40000000,0xff41303b,0x68000023,0x1902c302,0x1d89d08f,0x318a8901,
  0x00000000,0x0000002f,0xb0000123,0x67028802,0x208fd820,0xe687c004,0x00000000,
  0x00000000,0xff810000,0xff000000,0xf0004125,0xe487c002,0x67848d8a,0x118bc000,
  0x67848c89,0x40000000,0xff41303d,0x74000034,0x1902c302,0x1d8ad003,0x1d89d18f,
  0x31898a01,0x00000000,0x0000002f,0x0000002f,0xb80000b4,0x2003d821,0x67028802,
  0x208fd920,0xe687c004,0x00000000,0x00000000,0x00000000,0xff820000,0xff810000,
  0x00040000,0x60614060,0xff000000,0x0c010012,0x61c002d2,0x1187c487,0x08600000,
  0xe0021034,0xc0000460,0x1b04cd8e,0x1b04d08c,0x1b04c58b,0x00000015,0x50600000,
  0x44604860,0x60000022,0x018ed88e,0x018bd18b,0x00000000,0x000007f8,0x0007fff8,
  0xe0001034,0xc0000820,0x018cd08c,0x018ed18d,0x27840001,0x00000000,0x000007f8,
  0x000007f8,0xff000000,0xf0004125,0xe487c002,0x67858d8a,0x118bc000,0x67848c89,
  0x40000000,0xff41303a,0x68000023,0x1902c302,0x1d89d08f,0x33898a01,0x00000000,
  0x0000002f,0xb0000123,0x67028802,0x208fd820,0xe687c004,0x00000000,0x00000000,
  0xff810000,0xff000000,0xf0004125,0xe487c002,0x67858d8a,0x118bc000,0x67848c89,
  0x40000000,0xff41303b,0x68000023,0x1902c302,0x1d89d08f,0x338a8901,0x00000000,
  0x0000002f,0xb0000123,0x67028802,0x208fd820,0xe687c004,0x00000000,0x00000000,
  0xff810000,0xff000000,0xf0004125,0xe487c002,0x67848d8a,0x118bc000,0x67848c89,
  0x40000000,0xff41303d,0x74000034,0x1902c302,0x1d8ad003,0x1d89d18f,0x33898a01,
  0x00000000,0x0000002f,0x0000002f,0xb80000b4,0x2003d821,0x67028802,0x208fd920,
  0xe687c004,0x00000000,0x00000000,0x00000000,0xff820000,0xff810000,0x00040000,
  0x60614060,0xff000000,0x0c010012,0x61c002d2,0x1187c487,0x08600000,0xe0021034,
  0xc0000460,0x1b04cd8e,0x1b04d08c,0x1b04c58b,0x00000015,0x50600000,0x44604860,
  0x60000022,0x018ed88e,0x018bd18b,0x00000000,0x000007f8,0x0007fff8,0xe0001034,
  0xc0000820,0x018cd08c,0x018ed18d,0x27840001,0x00000000,0x000007f8,0x000007f8,
  0xff000000,0xf0004125,0xe487c002,0x67858d8a,0x118bc000,0x67848c89,0x40000000,
  0xff41303a,0x680000a3,0x1902c302,0x1d89d08f,0x39898a01,0x00000000,0x0000002f,
  0xb0000123,0x67028802,0x208fd820,0xe687c004,0x00000000,0x00000000,0xff810000,
  0xff000000,0xf0004125,0xe487c002,0x67858d8a,0x118bc000,0x67848c89,0x40000000,
  0xff41303b,0x680000a3,0x1902c302,0x1d89d08f,0x398a8901,0x00000000,0x0000002f,
  0xb0000123,0x67028802,0x208fd820,0xe687c004,0x00000000,0x00000000,0xff810000,
  0xff000000,0xf0004125,0xe487c002,0x67848d8a,0x118bc000,0x67848c89,0x40000000,
  0xff41303d,0x740000b4,0x1902c302,0x1d8ad003,0x1d89d18f,0x39898a01,0x00000000,
  0x0000002f,0x0000002f,0xb80000b4,0x2003d821,0x67028802,0x208fd920,0xe687c004,
  0x00000000,0x00000000,0x00000000,0xff820000,0xff810000,0x00040000,0x60614060,
  0xff000000,0x0c010012,0x61c002d2,0x1187c487,0x08600000,0xe0021034,0xc0000460,
  0x1b04cd8e,0x1b04d08c,0x1b04c58b,0x00000015,0x50600000,0x44604860,0x60000022,
  0x018ed88e,0x018bd18b,0x00000000,0x000007f8,0x0007fff8,0xe0001034,0xc0000820,
  0x018cd08c,0x018ed18d,0x27840001,0x00000000,0x000007f8,0x000007f8,0xff000000,
  0xf0004125,0xe487c002,0x67858d8a,0x118bc000,0x67848c89,0x40000000,0xff41303a,
  0xaa0003a3,0x1902c302,0x1d89d08f,0x49898a01,0x00000000,0x0000002f,0xb0000123,
  0x67028802,0x208fd820,0xe687c004,0x00000000,0x00000000,0xff810000,0xff000000,
  0xf0004125,0xe487c002,0x67858d8a,0x118bc000,0x67848c89,0x40000000,0xff41303b,
  0xaa0003a3,0x1902c302,0x1d89d08f,0x498a8901,0x00000000,0x0000002f,0xb0000123,
  0x67028802,0x208fd820,0xe687c004,0x00000000,0x00000000,0xff810000,0xff000000,
  0xf0004125,0xe487c002,0x67848d8a,0x118bc000,0x67848c89,0x40000000,0xff41303d,
  0xb60003b4,0x1902c302,0x1d8ad003,0x1d89d18f,0x49898a01,0x00000000,0x0000002f,
  0x0000002f,0xb80000b4,0x2003d821,0x67028802,0x208fd920,0xe687c004,0x00000000,
  0x00000000,0x00000000,0xff820000,0xff810000,0x00040000,0x60614060,0xff000000,
  0x0c010012,0x61c002d2,0x1187c487,0x08600000,0xe0021034,0xc0000460,0x1b04cd8e,
  0x1b04d08c,0x1b04c58b,0x00000015,0x50600000,0x44604860,0x60000022,0x018ed88e,
  0x018bd18b,0x00000000,0x000007f8,0x0007fff8,0xe0001034,0xc0000820,0x018cd08c,
  0x018ed18d,0x27840001,0x00000000,0x000007f8,0x000007f8,0xff000000,0x04000011,
  0x018ed88c,0x00000000,0x0007f800,0x04000001,0x1b8cc88c,0x04000011,0x018ed08d,
  0x00000000,0x000007f8,0xff000000,0x04000001,0x67848c00,0x04000001,0x67858d01,
  0x04000001,0x1100c08f,0x04000011,0x1d8fd08f,0x00000000,0x0000002f,0x04000011,
  0x208fd820,0x00000000,0x00000000,0xff810000,0x00004001,0x40000000,0xff41103a,
  0x00001001,0xc0000460,0xff000000,0x04000001,0x67858d00,0x04000001,0x67848c01,
  0x04000001,0x1101c08f,0x04000011,0x1d8fd08f,0x00000000,0x0000002f,0x04000011,
  0x208fd820,0x00000000,0x00000000,0xff810000,0x00004001,0x40000000,0xff41103b,
  0x00001001,0xc0000460,0xff000000,0x04000001,0x67848c00,0x04000001,0x67848d01,
  0x04000001,0x1100c08f,0x04000011,0x1d8fd08f,0x00000000,0x0000002f,0x04000011,
  0x208fd820,0x00000000,0x00000000,0xff810000,0x00004001,0x40000000,0xff41103d,
  0x00001001,0xc0000460,0x04000001,0x1101c08f,0x04000011,0x1d8fd08f,0x00000000,
  0x0000002f,0x04000011,0x208fd820,0x00000000,0x00000000,0xff810000,0x00004001,
  0x40000000,0xff41103d,0x00001001,0xc0000460,0xff000000,0x00004001,0x40000000,
  0xff41108d,0x00009012,0xc0000420,0x50000008,0x00000000,0x10000001,0x27848b00,
  0x1c000113,0x6687c089,0x1187c487,0x6487c08a,0xf0000024,0x198ac38a,0x1b89cd8e,
  0x1b89d08c,0x1b89c58b,0x00000015,0x60000022,0x018ed88e,0x018bd18b,0x00000000,
  0x000007f8,0x0007fff8,0x70000123,0x678a888a,0x018cd08c,0x018ed18d,0x000007f8,
  0x000007f8,0x04000001,0x61c08ad1,0x00001001,0xc0000420,0xff000000,0x04000011,
  0x018ed88c,0x00000000,0x0007f800,0x04000001,0x1b8cc88c,0x04000011,0x018ed08d,
  0x00000000,0x000007f8,0x04000001,0x67848c00,0x04000001,0x67848d01,0x04000001,
  0x1100c08f,0x04000011,0x1d8fd08f,0x00000000,0x0000002f,0x04000011,0x208fd820,
  0x00000000,0x00000000,0xff810000,0x00004001,0x40000000,0xff41103d,0x00001001,
  0xc0000460,0x04000001,0x1101c08f,0x04000011,0x1d8fd08f,0x00000000,0x0000002f,
  0x04000011,0x208fd820,0x00000000,0x00000000,0xff810000,0x00004001,0x40000000,
  0xff41103d,0x00001001,0xc0000460,0x00004001,0x40000000,0xff31101e,0x00009012,
  0xc0000420,0x50000008,0x00000000,0x04000011,0x6487d88b,0x00000000,0xfffffffd,
  0x04000001,0x198bc38b,0x10000001,0x27848b00,0x1c000113,0x6687c089,0x1187c487,
  0x6487c08a,0xf0000024,0x198ac38a,0x1b89cd8e,0x1b89d08c,0x1b89c58b,0x00000015,
  0x60000022,0x018ed88e,0x018bd18b,0x00000000,0x000007f8,0x0007fff8,0x70000123,
  0x678a888a,0x018cd08c,0x018ed18d,0x000007f8,0x000007f8,0x04000001,0x61c08ad1,
  0x00001001,0xc0000420,0xff000000,0x04000011,0x018ed88c,0x00000000,0x0007f800,
  0x04000001,0x1b8cc88c,0x04000011,0x018ed08d,0x00000000,0x000007f8,0x04000011,
  0x6786d000,0x00000000,0x00000010,0x10000011,0x2700d884,0x00000000,0x00000000,
  0xff810000,0x04000001,0x11848d01,0x04000001,0x118dc002,0x04000001,0x13028c02,
  0x04000001,0x1b02c302,0xff500029,0x04000001,0x1100c08c,0x10000011,0x2786d087,
  0x00000000,0x00000018,0x00004001,0x40000000,0xff31102f,0x00009012,0xc0000420,
  0x50000008,0x00000000,0x04000011,0x678cd884,0x00000000,0x00000000,0xff810000,
  0x04000001,0x2100c040,0x00004001,0x40000000,0xff411034,0x00001001,0xc0000460,
  0x04000011,0x6487d88c,0x00000000,0xffffffff,0x04000001,0x198cc38c,0x04000011,
  0x6487d88b,0x00000000,0xfffffffd,0x04000001,0x198bc38b,0x04000001,0x67848c89,
  0x10000001,0x27848b89,0x1c000113,0x6687c089,0x1187c487,0x6487c08a,0xf0000024,
  0x198ac38a,0x1b89cd8e,0x1b89d08c,0x1b89c58b,0x00000015,0x60000022,0x018ed88e,
  0x018bd18b,0x00000000,0x000007f8,0x0007fff8,0x70000123,0x678a888a,0x018cd08c,
  0x018ed18d,0x000007f8,0x000007f8,0x04000001,0x61c08ad1,0x00001001,0xc0000420,
  0xff000000,0x04000001,0x13858e89,0x04000011,0x6789d88e,0x00000000,0xfffffff8,
  0x04000011,0x11c0d88f,0x00000000,0x00000000,0xff810000,0x04000011,0x198fd08f,
  0x00000000,0x0000002f,0x04000001,0x058e8f8e,0x10000001,0x27848b8e,0x1c000113,
  0x6687c089,0x1187c487,0x6487c08a,0xf0000024,0x198ac38a,0x1b89cd8e,0x1b89d08c,
  0x1b89c58b,0x00000015,0x60000022,0x018ed88e,0x018bd18b,0x00000000,0x000007f8,
  0x0007fff8,0x70000123,0x678a888a,0x018cd08c,0x018ed18d,0x000007f8,0x000007f8,
  0x04000001,0x61c08ad1,0x00001001,0xc0000420,0xff000000,0x04000001,0x13858e89,
  0x04000011,0x6789d88e,0x00000000,0xfffffff8,0x04000011,0x11c0d88f,0x00000000,
  0x00000000,0xff810000,0x04000011,0x198fd08f,0x00000000,0x0000002f,0x04000001,
  0x058e8f8e,0x10000001,0x27848b8e,0x1c000113,0x6687c089,0x1187c487,0x6487c08a,
  0xf0000024,0x198ac38a,0x1b89cd8e,0x1b89d08c,0x1b89c58b,0x00000015,0x60000022,
  0x018ed88e,0x018bd18b,0x00000000,0x000007f8,0x0007fff8,0x70000123,0x678a888a,
  0x018cd08c,0x018ed18d,0x000007f8,0x000007f8,0x04000001,0x61c08ad1,0x00001001,
  0xc0000420,0xff000000,0x04000001,0x1b8ec38e,0x04000001,0x0cc18e8e,0x04000001,
  0x3dc48e8e,0x10000001,0x27848b8e,0x1c000113,0x6687c089,0x1187c487,0x6487c08a,
  0xf0000024,0x198ac38a,0x1b89cd8e,0x1b89d08c,0x1b89c58b,0x00000015,0x60000022,
  0x018ed88e,0x018bd18b,0x00000000,0x000007f8,0x0007fff8,0x70000123,0x678a888a,
  0x018cd08c,0x018ed18d,0x000007f8,0x000007f8,0x04000001,0x61c08ad1,0x00001001,
  0xc0000420,0xff000000,0x04000001,0x67858e89,0x10000001,0x27848b89,0x1c000113,
  0x6687c089,0x1187c487,0x6487c08a,0xf0000024,0x198ac38a,0x1b89cd8e,0x1b89d08c,
  0x1b89c58b,0x00000015,0x60000022,0x018ed88e,0x018bd18b,0x00000000,0x000007f8,
  0x0007fff8,0x70000123,0x678a888a,0x018cd08c,0x018ed18d,0x000007f8,0x000007f8,
  0x04000001,0x61c08ad1,0x00001001,0xc0000420,0xff000000,0x04000011,0x198ed08e,
  0x00000000,0x0000002c,0x04000011,0x098ed88e,0x00000000,0xffffffff,0x10000001,
  0x27848b8e,0x1c000113,0x6687c089,0x1187c487,0x6487c08a,0xf0000024,0x198ac38a,
  0x1b89cd8e,0x1b89d08c,0x1b89c58b,0x00000015,0x60000022,0x018ed88e,0x018bd18b,
  0x00000000,0x000007f8,0x0007fff8,0x70000123,0x678a888a,0x018cd08c,0x018ed18d,
  0x000007f8,0x000007f8,0x04000001,0x61c08ad1,0x00001001,0xc0000420,0xff000000,
  0x04000001,0x11848b8b,0x04000001,0x118bc88b,0x04000001,0x11848e8e,0x04000011,
  0x11c0d88c,0x00000000,0x00000000,0xff810000,0x10000011,0x278bd88c,0x00000000,
  0xfffffff8,0xff50000b,0x10000001,0x278bc08c,0x04000001,0x118bc88b,0x04000001,
  0x218b8e60,0x00004001,0x40000000,0xff41100b,0x00001001,0xc0000440,0x1c000113,
  0x6687c089,0x1187c487,0x6487c08a,0xf0000024,0x198ac38a,0x1b89cd8e,0x1b89d08c,
  0x1b89c58b,0x00000015,0x60000022,0x018ed88e,0x018bd18b,0x00000000,0x000007f8,
  0x0007fff8,0x70000123,0x678a888a,0x018cd08c,0x018ed18d,0x000007f8,0x000007f8,
  0x04000001,0x61c08ad1,0x00001001,0xc0000420,0xff000000,0x04000011,0x6784d88c,
  0x00000000,0xfffffff0,0x04000011,0x198cd08c,0x00000000,0x00000011,0x04000011,
  0x1b8cd08c,0x00000000,0x00000011,0x04000001,0x118c8e89,0x04000011,0x6789d88c,
  0x00000000,0x00000000,0xff810000,0x04000011,0x678cd88c,0x00000000,0x00000000,
  0xff810000,0x04000001,0x678cc08e,0x10000001,0x27848b8e,0x1c000113,0x6687c089,
  0x1187c487,0x6487c08a,0xf0000024,0x198ac38a,0x1b89cd8e,0x1b89d08c,0x1b89c58b,
  0x00000015,0x60000022,0x018ed88e,0x018bd18b,0x00000000,0x000007f8,0x0007fff8,
  0x70000123,0x678a888a,0x018cd08c,0x018ed18d,0x000007f8,0x000007f8,0x04000001,
  0x61c08ad1,0x00001001,0xc0000420,0xff000000,0x04000011,0x6784d88c,0x00000000,
  0xfffffff0,0x04000011,0x198cd08c,0x00000000,0x00000011,0x04000011,0x1b8cd08c,
  0x00000000,0x00000011,0x04000001,0x118c8b89,0x04000011,0x6789d88c,0x00000000,
  0x00000000,0xff810000,0x04000011,0x648cd889,0x00000000,0x00000000,0xff810000,
  0x04000001,0x2189c040,0x04000011,0x678cd88c,0x00000000,0x00000000,0xff810000,
  0x04000001,0x67848e8b,0x10000001,0x278cc08b,0x00004001,0x40000000,0xff411001,
  0x00001001,0xc0000440,0x04000011,0x648cd889,0x00000000,0x00000000,0xff810000,
  0x04000011,0x2389d840,0x00000000,0x00000000,0xff810000,0x00004001,0x40000000,
  0xff411002,0x00001001,0xc0000460,0xff50000b,0x1c000113,0x6687c089,0x1187c487,
  0x6487c08a,0xf0000024,0x198ac38a,0x1b89cd8e,0x1b89d08c,0x1b89c58b,0x00000015,
  0x60000022,0x018ed88e,0x018bd18b,0x00000000,0x000007f8,0x0007fff8,0x70000123,
  0x678a888a,0x018cd08c,0x018ed18d,0x000007f8,0x000007f8,0x04000001,0x61c08ad1,
  0x00001001,0xc0000420,0xff50000c,0x04000001,0x118bc08e,0x04000011,0x1d8ed08e,
  0x00000000,0x0000002f,0x04000011,0x128ed88e,0x00000000,0x00000000,0xff810000,
  0x04000011,0x208ed860,0x00000000,0x00000000,0xff810000,0x00004001,0x40000000,
  0xff41100b,0x00001001,0xc0000440,0x04000011,0x198bd08b,0x00000000,0x00000011,
  0x04000011,0x1b8bd08b,0x00000000,0x00000011,0x04000011,0x648bd889,0x00000000,
  0x00000000,0xff810000,0x04000011,0x2389d840,0x00000000,0x00000000,0xff810000,
  0x00004001,0x40000000,0xff41100b,0x00001001,0xc0000440,0x04000001,0x118cc001,
  0x04000011,0x1188d800,0x00000000,0x00000000,0xff810000,0x00004001,0x40000000,
  0xff311030,0x00009012,0xc0000420,0x50000008,0x00000000,0x00004001,0x40000000,
  0xff41100b,0x00001001,0xc0000420,0xff000000,0x04000011,0x6784d88c,0x00000000,
  0xfffffff0,0x04000011,0x198cd08c,0x00000000,0x00000011,0x04000011,0x1b8cd08c,
  0x00000000,0x00000011,0x04000001,0x118c8b89,0x04000011,0x6789d88c,0x00000000,
  0x00000000,0xff810000,0x04000001,0x13858e89,0x04000011,0x6789d88b,0x00000000,
  0xfffffff8,0x04000011,0x678cd88e,0x00000000,0x00000000,0xff810000,0x04000011,
  0x11c0d88f,0x00000000,0x00000000,0xff810000,0x04000011,0x198fd08f,0x00000000,
  0x0000002f,0x04000001,0x058f8b8f,0x10000001,0x278ec08f,0x04000011,0x648cd889,
  0x00000000,0x00000000,0xff810000,0x04000011,0x2389d840,0x00000000,0x00000000,
  0xff810000,0x00004001,0x40000000,0xff411002,0x00001001,0xc0000460,0xff50000b,
  0x1c000113,0x6687c089,0x1187c487,0x6487c08a,0xf0000024,0x198ac38a,0x1b89cd8e,
  0x1b89d08c,0x1b89c58b,0x00000015,0x60000022,0x018ed88e,0x018bd18b,0x00000000,
  0x000007f8,0x0007fff8,0x70000123,0x678a888a,0x018cd08c,0x018ed18d,0x000007f8,
  0x000007f8,0x04000001,0x61c08ad1,0x00001001,0xc0000420,0xff50000c,0x04000011,
  0x648bd889,0x00000000,0x00000000,0xff810000,0x04000011,0x2389d840,0x00000000,
  0x00000000,0xff810000,0x00004001,0x40000000,0xff41100b,0x00001001,0xc0000440,
  0x04000011,0x648cd889,0x00000000,0x00000000,0xff810000,0x04000001,0x2189c040,
  0x00004001,0x40000000,0xff41100b,0x00001001,0xc0000440,0x04000001,0x118ec001,
  0x04000011,0x1188d800,0x00000000,0x00000000,0xff810000,0x00004001,0x40000000,
  0xff311030,0x00009012,0xc0000420,0x50000008,0x00000000,0x00004001,0x40000000,
  0xff41100b,0x00001001,0xc0000420,0xff000000,0x04000011,0x6784d88c,0x00000000,
  0xfffffff0,0x04000011,0x198cd08c,0x00000000,0x00000011,0x04000011,0x1b8cd08c,
  0x00000000,0x00000011,0x04000001,0x67858e89,0x04000001,0x118c8b8a,0x04000011,
  0x678ad88c,0x00000000,0x00000000,0xff810000,0x04000011,0x678cd88b,0x00000000,
  0x00000000,0xff810000,0x10000001,0x278bc089,0x1c000113,0x6687c089,0x1187c487,
  0x6487c08a,0xf0000024,0x198ac38a,0x1b89cd8e,0x1b89d08c,0x1b89c58b,0x00000015,
  0x60000022,0x018ed88e,0x018bd18b,0x00000000,0x000007f8,0x0007fff8,0x70000123,
  0x678a888a,0x018cd08c,0x018ed18d,0x000007f8,0x000007f8,0x04000001,0x61c08ad1,
  0x00001001,0xc0000420,0xff000000,0x04000011,0x6784d88c,0x00000000,0xfffffff0,
  0x04000011,0x198cd08c,0x00000000,0x00000011,0x04000011,0x1b8cd08c,0x00000000,
  0x00000011,0x04000001,0x118c8b89,0x04000011,0x6789d88c,0x00000000,0x00000000,
  0xff810000,0x04000011,0x198ed08e,0x00000000,0x0000002c,0x04000011,0x098ed88e,
  0x00000000,0xffffffff,0x04000011,0x678cd88b,0x00000000,0x00000000,0xff810000,
  0x10000001,0x278bc08e,0x1c000113,0x6687c089,0x1187c487,0x6487c08a,0xf0000024,
  0x198ac38a,0x1b89cd8e,0x1b89d08c,0x1b89c58b,0x00000015,0x60000022,0x018ed88e,
  0x018bd18b,0x00000000,0x000007f8,0x0007fff8,0x70000123,0x678a888a,0x018cd08c,
  0x018ed18d,0x000007f8,0x000007f8,0x04000001,0x61c08ad1,0x00001001,0xc0000420,
  0xff000000,0x04000001,0x1b8ec38e,0x04000001,0x198ec28e,0x04000001,0x11878e87,
  0x04000011,0x1387d887,0x00000000,0x00000000,0xff810000,0x04000011,0x6786d08c,
  0x00000000,0x00000010,0x04000011,0x678cd889,0x00000000,0x00000000,0xff810000,
  0x04000001,0x2189c040,0x00004001,0x40000000,0xff411001,0x00001001,0xc0000440,
  0x10000011,0x278cd884,0x00000000,0x00000000,0xff810000,0x04000001,0x11848b01,
  0x04000001,0x118cc000,0x00004001,0x40000000,0xff311031,0x00009012,0xc0000420,
  0x50000008,0x00000000,0x04000011,0x678cd884,0x00000000,0x00000000,0xff810000,
  0xff50000b,0x1c000113,0x6687c089,0x1187c487,0x6487c08a,0xf0000024,0x198ac38a,
  0x1b89cd8e,0x1b89d08c,0x1b89c58b,0x00000015,0x60000022,0x018ed88e,0x018bd18b,
  0x00000000,0x000007f8,0x0007fff8,0x70000123,0x678a888a,0x018cd08c,0x018ed18d,
  0x000007f8,0x000007f8,0x04000001,0x61c08ad1,0x00001001,0xc0000420,0xff000000,
  0x00004001,0x40000000,0xff311032,0x640000a3,0x6786d08c,0x6784d902,0x13858e89,
  0xfffffff0,0x00000010,0x20000011,0x6789d801,0x00000000,0xfffffff8,0x14000012,
  0x118cc000,0x278cd884,0x00000000,0xff810000,0x30009034,0xc0000420,0x2786d087,
  0x0102dd02,0x50000008,0x00007fff,0xffffffff,0x00000018,0xb4000134,0x6487d88b,
  0x6487c08a,0x6687c089,0x678cd984,0x00000000,0x00000000,0xfffffffd,0xff820000,
  0x7c000035,0x198ac38a,0x198bc38b,0x11c0d88f,0x1b89cd8e,0x1b89d18c,0x00000015,
  0x00000000,0xff810000,0x3c000034,0x678a888a,0x198fd08f,0x1187c487,0x018ed98e,
  0x00000000,0x0007fff8,0x0000002f,0x64000023,0x05008f00,0x018cd08c,0x018ed18d,
  0x000007f8,0x000007f8,0x90000012,0x27848b00,0x1b89c58b,0x00000000,0x44000012,
  0x61c08ad1,0x018bd08b,0x000007f8,0x00001001,0xc0000420,0xff000000,0x04000011,
  0x6786d08c,0x00000000,0x00000010,0x10000011,0x278cd884,0x00000000,0x00000000,
  0xff810000,0x04000011,0x6788d889,0x00000000,0x00000000,0xff810000,0x04000011,
  0x6788d88a,0x00000000,0x00000000,0xff810000,0x04000001,0x21898a20,0x10000011,
  0x2786d087,0x00000000,0x00000018,0x00004001,0x40000000,0xff411005,0x00001001,
  0xc0000460,0x04000001,0x1b8ec38e,0xff50000b,0x04000001,0x1b8ecb02,0x04000011,
  0x018ed08e,0x00000000,0x000007ff,0x04000011,0x218ed040,0x00000000,0x000007ff,
  0x00004001,0x40000000,0xff411003,0x00001001,0xc0000440,0xff50000c,0x04000001,
  0x118cc000,0x04000001,0x118ec001,0x00004001,0x40000000,0xff311033,0x00009012,
  0xc0000420,0x50000008,0x00000000,0x04000011,0x678cd884,0x00000000,0x00000000,
  0xff810000,0x04000011,0x6487d88b,0x00000000,0xfffffffd,0x04000001,0x198bc38b,
  0x04000011,0x11c0d88f,0x00000000,0x00000000,0xff810000,0x04000011,0x198fd08f,
  0x00000000,0x0000002f,0x04000001,0x05008f00,0x10000001,0x27848b00,0x1c000113,
  0x6687c089,0x1187c487,0x6487c08a,0xf0000024,0x198ac38a,0x1b89cd8e,0x1b89d08c,
  0x1b89c58b,0x00000015,0x60000022,0x018ed88e,0x018bd18b,0x00000000,0x000007f8,
  0x0007fff8,0x70000123,0x678a888a,0x018cd08c,0x018ed18d,0x000007f8,0x000007f8,
  0x04000001,0x61c08ad1,0x00001001,0xc0000420,0xff50000d,0x04000011,0x11c0d08e,
  0x00000000,0x00000801,0x00004001,0x40000000,0xff41100c,0x00001001,0xc0000420,
  0xff50000f,0x04000001,0x118cc000,0x00004001,0x40000000,0xff311034,0x00009012,
  0xc0000420,0x50000008,0x00000000,0x04000011,0x6587d88e,0x00000000,0xfffffffe,
  0x00004001,0x40000000,0xff41100b,0x00001001,0xc0000420,0xff000000,0x04000011,
  0x6786d08c,0x00000000,0x00000010,0x04000011,0x6788d889,0x00000000,0x00000000,
  0xff810000,0x04000011,0x6788d88a,0x00000000,0x00000000,0xff810000,0x10000011,
  0x2786d087,0x00000000,0x00000018,0x10000011,0x278cd884,0x00000000,0x00000000,
  0xff810000,0x04000001,0x21898a20,0x00004001,0x40000000,0xff411003,0x00001001,
  0xc0000460,0xff50000c,0x04000001,0x13858e89,0x04000011,0x6789d801,0x00000000,
  0xfffffff8,0x04000001,0x118cc000,0x00004001,0x40000000,0xff311035,0x00009012,
  0xc0000420,0x50000008,0x00000000,0x04000011,0x678cd884,0x00000000,0x00000000,
  0xff810000,0x04000011,0x6487d88b,0x00000000,0xfffffffd,0x04000001,0x198bc38b,
  0x04000011,0x11c0d88f,0x00000000,0x00000000,0xff810000,0x04000011,0x198fd08f,
  0x00000000,0x0000002f,0x04000001,0x05008f00,0x10000001,0x27848b00,0x1c000113,
  0x6687c089,0x1187c487,0x6487c08a,0xf0000024,0x198ac38a,0x1b89cd8e,0x1b89d08c,
  0x1b89c58b,0x00000015,0x60000022,0x018ed88e,0x018bd18b,0x00000000,0x000007f8,
  0x0007fff8,0x70000123,0x678a888a,0x018cd08c,0x018ed18d,0x000007f8,0x000007f8,
  0x04000001,0x61c08ad1,0x00001001,0xc0000420,0xff50000d,0x04000001,0x118cc000,
  0x00004001,0x40000000,0xff311034,0x00009012,0xc0000420,0x50000008,0x00000000,
  0x04000011,0x6587d88e,0x00000000,0xfffffffe,0x04000001,0x198ec38e,0x00004001,
  0x40000000,0xff41100c,0x00001001,0xc0000420,0xff000000,0xf00000b4,0x6487c003,
  0x6784d88c,0x11c0d900,0x13858e89,0x00000000,0x00000000,0xfffffff0,0xff820000,
  0x20000001,0x6687c002,0x60000022,0x6789d88d,0x018cdd8c,0x00007fff,0xffffffff,
  0xfffffff8,0x64000123,0x1903c303,0x678cd88c,0x1900d100,0x0000002f,0x00000000,
  0xff810000,0xa0000022,0x668cd889,0x668dd98a,0x00000000,0x00000000,0x00000000,
  0xff820000,0xff810000,0x30000092,0x67038803,0x678cd801,0x00000000,0xff810000,
  0x40000001,0x01898a8a,0x64000013,0x61c003d3,0x198ac589,0x198ac38a,0x20000001,
  0x13898a8a,0x60000012,0x11018a89,0x058d008f,0x00000000,0xa0000122,0x6789d88a,
  0xe789d904,0x00000000,0x00000000,0x00000000,0xff820000,0xff810000,0xff50000b,
  0xe00040a4,0xa104c042,0x218a8f43,0xe789d803,0x80000000,0x00000000,0xff42300b,
  0xff810000,0x00084011,0x40000000,0x00006062,0x63626264,0xff432002,0x60010012,
  0x1104c089,0x1103c08f,0x44e34863,0xe00100b3,0x6789d88a,0xa18fd941,0xe789da04,
  0x00000000,0x00000000,0x00000000,0x44645064,0xff840000,0xff830000,0xff820000,
  0x00001001,0xc0000844,0x20011022,0xc0000442,0x11c0d88f,0x00000000,0x00000000,
  0x44620000,0xff820000,0xf0021045,0xc0000441,0x1187c487,0x1b02cd8e,0x1b02d08c,
  0x27848b8f,0x00000000,0x00000015,0x49615261,0x126144e1,0xe0000023,0x018ed88e,
  0x018cd18c,0x1b02c58b,0x000007f8,0x0007fff8,0xc0001023,0xc0000c20,0x018ed08d,
  0x018bd18b,0x000007f8,0x000007f8,0xff50000c,0x20004112,0x678cd889,0x40000000,
  0x00000000,0xff42202a,0xff810000,0x60000112,0xe489d88a,0x2189c040,0x00000000,
  0xff810000,0x40000011,0xa38ad841,0x00000000,0x00000000,0xff810000,0x00040000,
  0x60616060,0xe4021045,0xc0000440,0x1187c487,0x1b02cd8e,0x1b02d08c,0x27848b8f,
  0x00000000,0x00000015,0x49605260,0x04e044e0,0xe0000023,0x1b02c58b,0x018cd08c,
  0x018ed98e,0x0007fff8,0x000007f8,0x60001023,0xc0000c20,0x018bd08b,0x018ed18d,
  0x000007f8,0x000007f8,0xff000000,0x04000011,0x6784d88c,0x00000000,0xfffffff0,
  0x04000011,0x198cd08c,0x00000000,0x00000011,0x04000011,0x1b8cd08c,0x00000000,
  0x00000011,0x04000011,0x678cd88c,0x00000000,0x00000000,0xff810000,0x04000001,
  0x13858e89,0x04000011,0x6789d88d,0x00000000,0xfffffff8,0x00004001,0x40000000,
  0xff411091,0x00001001,0xc0000420,0xff000000,0x04000011,0x018ed88c,0x00000000,
  0x0007f800,0x04000001,0x1b8cc88c,0x04000011,0x018ed08d,0x00000000,0x000007f8,
  0x04000001,0x67848c8c,0x04000001,0x67848d8d,0x04000001,0x118cc08f,0x04000011,
  0x198cd08c,0x00000000,0x00000011,0x04000011,0x1b8cd08c,0x00000000,0x00000011,
  0x04000011,0x1d8fd08f,0x00000000,0x0000002f,0x04000011,0x208fd840,0x00000000,
  0x00000000,0xff810000,0x00004001,0x40000000,0xff41102c,0x00001001,0xc0000460,
  0x04000001,0x118dc08f,0x04000011,0x1d8fd08f,0x00000000,0x0000002f,0x04000011,
  0x208fd820,0x00000000,0x00000000,0xff810000,0x00004001,0x40000000,0xff411005,
  0x00001001,0xc0000460,0x04000001,0x3fc28d89,0x04000001,0x3ec4898a,0x04000001,
  0x2f8d8a00,0x00004001,0x40000000,0xff41102c,0x00001001,0xc0000460,0x04000001,
  0x0cc2898d,0x04000011,0x668cd889,0x00000000,0x00000000,0xff810000,0x04000001,
  0x208d8920,0x00004001,0x40000000,0xff41102c,0x00001001,0xc0000460,0x04000001,
  0x198dc38d,0x04000011,0x678cd889,0x00000000,0x00000000,0xff810000,0x04000001,
  0x118d898d,0x04000001,0x678dc08f,0x04000011,0x218fd840,0x00000000,0x00000000,
  0xff810000,0x00004001,0x40000000,0xff411002,0x00001001,0xc0000440,0xff50000b,
  0x10000001,0x27848b8f,0x1c000113,0x6687c089,0x1187c487,0x6487c08a,0xf0000024,
  0x198ac38a,0x1b89cd8e,0x1b89d08c,0x1b89c58b,0x00000015,0x60000022,0x018ed88e,
  0x018bd18b,0x00000000,0x000007f8,0x0007fff8,0x70000123,0x678a888a,0x018cd08c,
  0x018ed18d,0x000007f8,0x000007f8,0x04000001,0x61c08ad1,0x00001001,0xc0000420,
  0xff50000c,0x04000011,0x678cd889,0x00000000,0x00000000,0xff810000,0x04000001,
  0x2189c040,0x00004001,0x40000000,0xff41100b,0x00001001,0xc0000440,0x04000011,
  0x6489d889,0x00000000,0x00000000,0xff810000,0x04000011,0x2389d840,0x00000000,
  0x00000000,0xff810000,0x00004001,0x40000000,0xff41102c,0x00001001,0xc0000440,
  0x00004001,0x40000000,0xff41100b,0x00001001,0xc0000420,0xff50000f,0x04000011,
  0x208fd840,0x00000000,0x00000000,0xff810000,0x00004001,0x40000000,0xff41102c,
  0x00001001,0xc0000460,0x04000011,0x198dd08d,0x00000000,0x00000011,0x04000011,
  0x1b8dd08d,0x00000000,0x00000011,0x14000022,0x668cd889,0x668dd98a,0x00000000,
  0x00000000,0x00000000,0xff820000,0xff810000,0x04000001,0x01898a8a,0x04100011,
  0x238ad889,0x01c00000,0x00000000,0xff810000,0x04000011,0x678cd88a,0x00000000,
  0x00000000,0xff810000,0x0c000012,0x118a8989,0x11c0d88f,0x00000000,0xff810000,
  0x04000011,0x198fd08f,0x00000000,0x0000002f,0x04000001,0x058f8d8f,0xff000000,
  0xff500010,0x04000011,0x6789d88a,0x00000000,0x00000000,0xff810000,0x04000001,
  0x218a8f40,0x00004001,0x40000000,0xff411008,0x00001001,0xc0000460,0x04000011,
  0x6789d88f,0x00000000,0x00000000,0xff810000,0x04000011,0x218fd840,0x00000000,
  0x00000000,0xff810000,0x00004001,0x40000000,0xff411009,0x00001001,0xc0000440,
  0xff500011,0x10000001,0x27848b8f,0x1c000113,0x6687c089,0x1187c487,0x6487c08a,
  0xf0000024,0x198ac38a,0x1b89cd8e,0x1b89d08c,0x1b89c58b,0x00000015,0x60000022,
  0x018ed88e,0x018bd18b,0x00000000,0x000007f8,0x0007fff8,0x70000123,0x678a888a,
  0x018cd08c,0x018ed18d,0x000007f8,0x000007f8,0x04000001,0x61c08ad1,0x00001001,
  0xc0000420,0xff500012,0x04000011,0x6789d889,0x00000000,0x00000000,0xff810000,
  0x04000001,0x2189c040,0x00004001,0x40000000,0xff411010,0x00001001,0xc0000460,
  0x04000011,0x11c0d88f,0x00000000,0x00000000,0xff810000,0xff500013,0x04000011,
  0x678cd889,0x00000000,0x00000000,0xff810000,0x04000001,0x2189c040,0x00004001,
  0x40000000,0xff411011,0x00001001,0xc0000440,0x04000011,0x6489d88a,0x00000000,
  0x00000000,0xff810000,0x04000011,0x238ad840,0x00000000,0x00000000,0xff810000,
  0x00004001,0x40000000,0xff411011,0x00001001,0xc0000460,0x00004001,0x40000000,
  0xff41102a,0x00001001,0xc0000420,0xff000000,0xf0004135,0x6487c003,0x67848c8c,
  0x11c0d800,0x13858d89,0x40000000,0x00000000,0x00000000,0xff43402a,0xff810000,
  0xe00000b3,0x6789d88d,0x1d8cd18f,0x018cde8c,0x00007fff,0xffffffff,0x0000002f,
  0xfffffff8,0xe4000034,0x1903c303,0x208fd840,0x1900d100,0x6687c002,0x00000000,
  0x0000002f,0x00000000,0xff810000,0xa0010022,0x668cd889,0x668dd98a,0x00000000,
  0x00000000,0x44605060,0xff830000,0xff820000,0x300100a2,0x67038803,0x678cd801,
  0x00000000,0x00000000,0x44600000,0xff820000,0x40011012,0xc0000460,0x01898a8a,
  0x48600000,0x64000013,0x61c003d3,0x198ac589,0x198ac38a,0x20000001,0x13898a8a,
  0x60000012,0x11018a89,0x058d008f,0x00000000,0xa0000122,0x6789d88a,0xe789d904,
  0x00000000,0x00000000,0x00000000,0xff820000,0xff810000,0xff50000b,0xe00040a4,
  0xa104c042,0x218a8f43,0xe789d803,0x80000000,0x00000000,0xff42300b,0xff810000,
  0x00084011,0x40000000,0x00006062,0x63626264,0xff432002,0x60010012,0x1104c089,
  0x1103c08f,0x44e34863,0xe00100b3,0x6789d88a,0xa18fd941,0xe789da04,0x00000000,
  0x00000000,0x00000000,0x44645064,0xff840000,0xff830000,0xff820000,0x00001001,
  0xc0000844,0x20011022,0xc0000442,0x11c0d88f,0x00000000,0x00000000,0x44620000,
  0xff820000,0xe4021045,0xc0000441,0x1187c487,0x1b02cd8e,0x1b02d08c,0x27848b8f,
  0x00000000,0x00000015,0x49615261,0x04e144e1,0xe0000023,0x018ed88e,0x018cd18c,
  0x1b02c58b,0x000007f8,0x0007fff8,0x60001023,0xc0000c20,0x018ed08d,0x018bd18b,
  0x000007f8,0x000007f8,0xff50000c,0x20004112,0x678cd889,0x40000000,0x00000000,
  0xff42202a,0xff810000,0x60000112,0xe489d88a,0x2189c040,0x00000000,0xff810000,
  0x40000011,0xa38ad841,0x00000000,0x00000000,0xff810000,0x00040000,0x60616060,
  0xe4021045,0xc0000440,0x1187c487,0x1b02cd8e,0x1b02d08c,0x27848b8f,0x00000000,
  0x00000015,0x49605260,0x04e044e0,0xe0000023,0x018ed88e,0x1b02c58b,0x018cd18c,
  0x000007f8,0x0007fff8,0x60001023,0xc0000c20,0x018bd08b,0x018ed18d,0x000007f8,
  0x000007f8,0xff000000,0x04000011,0x018ed88c,0x00000000,0x0007f800,0x04000001,
  0x1b8cc88c,0x04000011,0x018ed08d,0x00000000,0x000007f8,0x04000001,0x67848c8c,
  0x04000001,0x118cc08f,0x04000011,0x198cd08c,0x00000000,0x00000011,0x04000011,
  0x1b8cd08c,0x00000000,0x00000011,0x04000011,0x1d8fd08f,0x00000000,0x0000002f,
  0x04000011,0x208fd840,0x00000000,0x00000000,0xff810000,0x00004001,0x40000000,
  0xff41102b,0x00001001,0xc0000460,0x04000011,0x668cd889,0x00000000,0x00000000,
  0xff810000,0x04000001,0x1d8dc38a,0x04000001,0x218a8920,0x00004001,0x40000000,
  0xff41102b,0x00001001,0xc0000460,0x04000011,0x678cd889,0x00000000,0x00000000,
  0xff810000,0x04000001,0x118d898d,0x04000001,0x678dc08f,0x04000011,0x218fd840,
  0x00000000,0x00000000,0xff810000,0x00004001,0x40000000,0xff411002,0x00001001,
  0xc0000440,0xff50000b,0x10000001,0x27848b8f,0x1c000113,0x6687c089,0x1187c487,
  0x6487c08a,0xf0000024,0x198ac38a,0x1b89cd8e,0x1b89d08c,0x1b89c58b,0x00000015,
  0x60000022,0x018ed88e,0x018bd18b,0x00000000,0x000007f8,0x0007fff8,0x70000123,
  0x678a888a,0x018cd08c,0x018ed18d,0x000007f8,0x000007f8,0x04000001,0x61c08ad1,
  0x00001001,0xc0000420,0xff50000c,0x04000011,0x678cd889,0x00000000,0x00000000,
  0xff810000,0x04000001,0x2189c040,0x00004001,0x40000000,0xff41100b,0x00001001,
  0xc0000440,0x04000011,0x6489d88a,0x00000000,0x00000000,0xff810000,0x04000011,
  0x238ad840,0x00000000,0x00000000,0xff810000,0x00004001,0x40000000,0xff41102b,
  0x00001001,0xc0000440,0x00004001,0x40000000,0xff41100b,0x00001001,0xc0000420,
  0xff000000,0x04000011,0x018ed88c,0x00000000,0x0007f800,0x04000001,0x1b8cc88c,
  0x04000011,0x018ed08d,0x00000000,0x000007f8,0x04000001,0x67848c8c,0x04000011,
  0x198cd08c,0x00000000,0x00000011,0x04000011,0x1b8cd08c,0x00000000,0x00000011,
  0x04000001,0x67848d8d,0x04000001,0x3fc28d8d,0x04000011,0x668cd889,0x00000000,
  0x00000000,0xff810000,0x04000001,0x208d8920,0x00004001,0x40000000,0xff41102d,
  0x00001001,0xc0000460,0x04000001,0x188dc38d,0x04000001,0x0cc28d8d,0x04000011,
  0x678cd889,0x00000000,0x00000000,0xff810000,0x04000001,0x11898d8d,0x04000001,
  0x678dc08f,0x10000001,0x27848b8f,0x1c000113,0x6687c089,0x1187c487,0x6487c08a,
  0xf0000024,0x198ac38a,0x1b89cd8e,0x1b89d08c,0x1b89c58b,0x00000015,0x60000022,
  0x018ed88e,0x018bd18b,0x00000000,0x000007f8,0x0007fff8,0x70000123,0x678a888a,
  0x018cd08c,0x018ed18d,0x000007f8,0x000007f8,0x04000001,0x61c08ad1,0x00001001,
  0xc0000420,0xff000000,0x04000011,0x018ed88c,0x00000000,0x0007f800,0x04000001,
  0x1b8cc88c,0x04000011,0x018ed08d,0x00000000,0x000007f8,0x04000001,0x67848c8c,
  0x04000001,0x67848d8d,0x04000001,0x118cc08f,0x04000011,0x198cd08c,0x00000000,
  0x00000011,0x04000011,0x1b8cd08c,0x00000000,0x00000011,0x04000011,0x1d8fd08f,
  0x00000000,0x0000002f,0x04000011,0x208fd840,0x00000000,0x00000000,0xff810000,
  0x00004001,0x40000000,0xff411030,0x00001001,0xc0000460,0x04000001,0x118dc08f,
  0x04000011,0x1d8fd08f,0x00000000,0x0000002f,0x04000011,0x208fd820,0x00000000,
  0x00000000,0xff810000,0x00004001,0x40000000,0xff411005,0x00001001,0xc0000460,
  0x04000001,0x3fc28d89,0x04000001,0x3ec4898a,0x04000001,0x2f8d8a00,0x00004001,
  0x40000000,0xff411030,0x00001001,0xc0000460,0x04000001,0x0cc2898d,0x04000011,
  0x668cd889,0x00000000,0x00000000,0xff810000,0x04000001,0x208d8920,0x00004001,
  0x40000000,0xff411030,0x00001001,0xc0000460,0x04000001,0x198dc38d,0x04000011,
  0x678cd889,0x00000000,0x00000000,0xff810000,0x04000001,0x118d898d,0x04000001,
  0x668dc089,0x04000011,0x2089d840,0x00000000,0x00000000,0xff810000,0x00004001,
  0x40000000,0xff411003,0x00001001,0xc0000440,0xff50000b,0x04000011,0x648cd889,
  0x00000000,0x00000000,0xff810000,0x04000011,0x2389d840,0x00000000,0x00000000,
  0xff810000,0x00004001,0x40000000,0xff411007,0x00001001,0xc0000460,0xff50000c,
  0x04000001,0x67848b8c,0x10000001,0x278dc08c,0x1c000113,0x6687c089,0x1187c487,
  0x6487c08a,0xf0000024,0x198ac38a,0x1b89cd8e,0x1b89d08c,0x1b89c58b,0x00000015,
  0x60000022,0x018ed88e,0x018bd18b,0x00000000,0x000007f8,0x0007fff8,0x70000123,
  0x678a888a,0x018cd08c,0x018ed18d,0x000007f8,0x000007f8,0x04000001,0x61c08ad1,
  0x00001001,0xc0000420,0xff50000d,0x04000011,0x678cd88a,0x00000000,0x00000000,
  0xff810000,0x04000001,0x218ac040,0x00004001,0x40000000,0xff41100b,0x00001001,
  0xc0000440,0x04000011,0x648ad889,0x00000000,0x00000000,0xff810000,0x04000011,
  0x2389d840,0x00000000,0x00000000,0xff810000,0x00004001,0x40000000,0xff411030,
  0x00001001,0xc0000440,0x00004001,0x40000000,0xff41100b,0x00001001,0xc0000420,
  0xff50000f,0x04000011,0x208fd840,0x00000000,0x00000000,0xff810000,0x00004001,
  0x40000000,0xff411030,0x00001001,0xc0000460,0x04000011,0x198dd08d,0x00000000,
  0x00000011,0x04000011,0x1b8dd08d,0x00000000,0x00000011,0x00004001,0x40000000,
  0xff411091,0x00001001,0xc0000420,0xff000000,0xff500011,0x04000011,0x648cd889,
  0x00000000,0x00000000,0xff810000,0x04000011,0x0189d889,0x00000000,0x00000000,
  0xff810000,0x10000011,0x248cd889,0x00000000,0x00000000,0xff810000,0x04000011,
  0x6788d88a,0x00000000,0x00000000,0xff810000,0x10000011,0x2788d88c,0x00000000,
  0x00000000,0xff810000,0x10000011,0x278cd88a,0x00000000,0x00000000,0xff810000,
  0x00004001,0x40000000,0xff41100c,0x00001001,0xc0000420,0xff000000,0x04000011,
  0x018ed88c,0x00000000,0x0007f800,0x04000001,0x1b8cc88c,0x04000011,0x018ed08d,
  0x00000000,0x000007f8,0x04000001,0x67848c8c,0x04000001,0x13858d89,0x04000011,
  0x6789d88d,0x00000000,0xfffffff8,0x04000001,0x118cc08f,0x04000011,0x198cd08c,
  0x00000000,0x00000011,0x04000011,0x1b8cd08c,0x00000000,0x00000011,0x04000011,
  0x1d8fd08f,0x00000000,0x0000002f,0x04000011,0x208fd840,0x00000000,0x00000000,
  0xff810000,0x00004001,0x40000000,0xff41102e,0x00001001,0xc0000460,0xff500091,
  0x04000011,0x668cd889,0x00000000,0x00000000,0xff810000,0x04000011,0x668dd88a,
  0x00000000,0x00000000,0xff810000,0x04000001,0x01898a8a,0x04100011,0x238ad889,
  0x01c00000,0x00000000,0xff810000,0x04000001,0x11c0c08a,0x10000011,0x248cd88a,
  0x00000000,0x00000000,0xff810000,0x04000011,0x678cd88a,0x00000000,0x00000000,
  0xff810000,0x04000001,0x118a8989,0x04000011,0x11c0d88f,0x00000000,0x00000000,
  0xff810000,0x04000011,0x198fd08f,0x00000000,0x0000002f,0x04000001,0x058f8d8f,
  0xff50000b,0x04000011,0x6789d88a,0x00000000,0x00000000,0xff810000,0x04000001,
  0x218a8f40,0x00004001,0x40000000,0xff411005,0x00001001,0xc0000460,0x04000001,
  0x6789c08a,0x04000011,0x218ad840,0x00000000,0x00000000,0xff810000,0x00004001,
  0x40000000,0xff411004,0x00001001,0xc0000440,0xff50000c,0x04000011,0x648cd88a,
  0x00000000,0x00000000,0xff810000,0x04000011,0x238ad840,0x00000000,0x00000000,
  0xff810000,0x00004001,0x40000000,0xff411007,0x00001001,0xc0000460,0xff50000d,
  0x04000001,0x67848b8f,0x10000001,0x2789c08f,0x1c000113,0x6687c089,0x1187c487,
  0x6487c08a,0xf0000024,0x198ac38a,0x1b89cd8e,0x1b89d08c,0x1b89c58b,0x00000015,
  0x60000022,0x018ed88e,0x018bd18b,0x00000000,0x000007f8,0x0007fff8,0x70000123,
  0x678a888a,0x018cd08c,0x018ed18d,0x000007f8,0x000007f8,0x04000001,0x61c08ad1,
  0x00001001,0xc0000420,0xff50000e,0x04000011,0x678cd88f,0x00000000,0x00000000,
  0xff810000,0x04000001,0x218fc040,0x00004001,0x40000000,0xff41100c,0x00001001,
  0xc0000440,0x04000011,0x648fd88a,0x00000000,0x00000000,0xff810000,0x04000011,
  0x238ad840,0x00000000,0x00000000,0xff810000,0x00004001,0x40000000,0xff41102e,
  0x00001001,0xc0000440,0x00004001,0x40000000,0xff41100c,0x00001001,0xc0000420,
  0xff000000,0xff50000f,0x04000011,0x6789d889,0x00000000,0x00000000,0xff810000,
  0x04000001,0x2189c040,0x00004001,0x40000000,0xff41100b,0x00001001,0xc0000460,
  0x04000011,0x678cd889,0x00000000,0x00000000,0xff810000,0x04000001,0x2189c040,
  0x00004001,0x40000000,0xff411006,0x00001001,0xc0000440,0x04000011,0x6489d88a,
  0x00000000,0x00000000,0xff810000,0x04000011,0x238ad840,0x00000000,0x00000000,
  0xff810000,0x00004001,0x40000000,0xff41102e,0x00001001,0xc0000440,0xff500010,
  0x04000011,0x6786d000,0x00000000,0x00000010,0x10000011,0x2700d884,0x00000000,
  0x00000000,0xff810000,0x04000001,0x118cc001,0x04000011,0x1188d802,0x00000000,
  0x00000000,0xff810000,0x10000001,0x2702c08f,0x10000011,0x2786d087,0x00000000,
  0x00000018,0x00004001,0x40000000,0xff311036,0x00009012,0xc0000420,0x50000008,
  0x00000000,0x04000011,0x6786d08a,0x00000000,0x00000010,0x04000011,0x678ad884,
  0x00000000,0x00000000,0xff810000,0x04000001,0x1100c089,0x04000011,0x6487d88b,
  0x00000000,0xfffffffd,0x04000001,0x198bc38b,0x00004001,0x40000000,0xff41100c,
  0x00001001,0xc0000420,0xff500011,0x04000011,0x648cd88a,0x00000000,0x00000000,
  0xff810000,0x04000011,0x018ad88a,0x00000000,0x00000000,0xff810000,0x10000011,
  0x248cd88a,0x00000000,0x00000000,0xff810000,0x04000011,0x6788d88f,0x00000000,
  0x00000000,0xff810000,0x10000011,0x2788d88c,0x00000000,0x00000000,0xff810000,
  0x10000011,0x278cd88f,0x00000000,0x00000000,0xff810000,0x00004001,0x40000000,
  0xff41100d,0x00001001,0xc0000420,0xff000000,0x04000011,0x018ed88c,0x00000000,
  0x0007f800,0x04000001,0x1b8cc88c,0x04000011,0x018ed08d,0x00000000,0x000007f8,
  0x04000001,0x67848c8c,0x04000001,0x118cc08f,0x04000011,0x198cd08c,0x00000000,
  0x00000011,0x04000011,0x1b8cd08c,0x00000000,0x00000011,0x04000011,0x1d8fd08f,
  0x00000000,0x0000002f,0x04000011,0x208fd840,0x00000000,0x00000000,0xff810000,
  0x00004001,0x40000000,0xff41102f,0x00001001,0xc0000460,0x04000011,0x668cd889,
  0x00000000,0x00000000,0xff810000,0x04000001,0x1989c389,0x04000001,0x218d8920,
  0x00004001,0x40000000,0xff41102f,0x00001001,0xc0000460,0x04000011,0x678cd889,
  0x00000000,0x00000000,0xff810000,0x04000001,0x118d898d,0x04000001,0x678dc089,
  0x04000011,0x2189d840,0x00000000,0x00000000,0xff810000,0x00004001,0x40000000,
  0xff411003,0x00001001,0xc0000440,0xff50000b,0x04000011,0x648cd889,0x00000000,
  0x00000000,0xff810000,0x04000011,0x2389d840,0x00000000,0x00000000,0xff810000,
  0x00004001,0x40000000,0xff411007,0x00001001,0xc0000460,0xff50000c,0x04000001,
  0x67848b8f,0x10000001,0x278dc08f,0x1c000113,0x6687c089,0x1187c487,0x6487c08a,
  0xf0000024,0x198ac38a,0x1b89cd8e,0x1b89d08c,0x1b89c58b,0x00000015,0x60000022,
  0x018ed88e,0x018bd18b,0x00000000,0x000007f8,0x0007fff8,0x70000123,0x678a888a,
  0x018cd08c,0x018ed18d,0x000007f8,0x000007f8,0x04000001,0x61c08ad1,0x00001001,
  0xc0000420,0xff50000d,0x04000011,0x678cd88a,0x00000000,0x00000000,0xff810000,
  0x04000001,0x218ac040,0x00004001,0x40000000,0xff41100b,0x00001001,0xc0000440,
  0x04000011,0x648ad889,0x00000000,0x00000000,0xff810000,0x04000011,0x2389d840,
  0x00000000,0x00000000,0xff810000,0x00004001,0x40000000,0xff41102f,0x00001001,
  0xc0000440,0x00004001,0x40000000,0xff41100b,0x00001001,0xc0000420,0xff500011,
  0x04000011,0x648cd889,0x00000000,0x00000000,0xff810000,0x04000011,0x0189d889,
  0x00000000,0x00000000,0xff810000,0x10000011,0x248cd889,0x00000000,0x00000000,
  0xff810000,0x04000011,0x6788d88a,0x00000000,0x00000000,0xff810000,0x10000011,
  0x2788d88c,0x00000000,0x00000000,0xff810000,0x10000011,0x278cd88a,0x00000000,
  0x00000000,0xff810000,0x00004001,0x40000000,0xff41100c,0x00001001,0xc0000420,
  0xff000000,0x04000011,0x018ed88c,0x00000000,0x0007f800,0x04000001,0x1b8cc88c,
  0x04000011,0x018ed08d,0x00000000,0x000007f8,0x04000001,0x67848c8c,0x04000011,
  0x198cd08c,0x00000000,0x00000011,0x04000011,0x1b8cd08c,0x00000000,0x00000011,
  0x04000001,0x67848d8d,0x04000001,0x3fc28d8d,0x04000011,0x648cd889,0x00000000,
  0x00000000,0xff810000,0x04000011,0x2389d840,0x00000000,0x00000000,0xff810000,
  0x00004001,0x40000000,0xff411007,0x00001001,0xc0000460,0xff50000c,0x04000011,
  0x668cd889,0x00000000,0x00000000,0xff810000,0x04000001,0x208d8920,0x00004001,
  0x40000000,0xff411032,0x00001001,0xc0000460,0x04000001,0x188dc38d,0x04000001,
  0x0cc28d8d,0x04000011,0x678cd889,0x00000000,0x00000000,0xff810000,0x04000001,
  0x11898d8d,0x04000001,0x67848b8f,0x10000001,0x278dc08f,0x1c000113,0x6687c089,
  0x1187c487,0x6487c08a,0xf0000024,0x198ac38a,0x1b89cd8e,0x1b89d08c,0x1b89c58b,
  0x00000015,0x60000022,0x018ed88e,0x018bd18b,0x00000000,0x000007f8,0x0007fff8,
  0x70000123,0x678a888a,0x018cd08c,0x018ed18d,0x000007f8,0x000007f8,0x04000001,
  0x61c08ad1,0x00001001,0xc0000420,0xff500011,0x04000011,0x648cd889,0x00000000,
  0x00000000,0xff810000,0x04000011,0x0189d889,0x00000000,0x00000000,0xff810000,
  0x10000011,0x248cd889,0x00000000,0x00000000,0xff810000,0x04000011,0x6788d88a,
  0x00000000,0x00000000,0xff810000,0x10000011,0x2788d88c,0x00000000,0x00000000,
  0xff810000,0x10000011,0x278cd88a,0x00000000,0x00000000,0xff810000,0x00004001,
  0x40000000,0xff41100c,0x00001001,0xc0000420,0xff000000,0xff50000b,0x04000001,
  0x66858e8a,0x04000001,0x198ac38a,0x04000001,0x11848b8b,0x04000011,0x678bd88c,
  0x00000000,0xfffffff8,0x04000011,0x198cd08c,0x00000000,0x00000011,0x04000011,
  0x1b8cd08c,0x00000000,0x00000011,0x04000011,0x648cd889,0x00000000,0x00000000,
  0xff810000,0x04000011,0x2389d840,0x00000000,0x00000000,0xff810000,0x00004001,
  0x40000000,0xff411007,0x00001001,0xc0000460,0xff50000c,0x04000001,0x6686c08e,
  0x04000001,0x138ec88e,0x04000001,0x218ec040,0x00004001,0x40000000,0xff411004,
  0x00001001,0xc0000440,0x04000001,0x118e8a8e,0x04000011,0x668cd889,0x00000000,
  0x00000000,0xff810000,0x04000001,0x1989c389,0x04000001,0x218e8960,0x00004001,
  0x40000000,0xff411005,0x00001001,0xc0000460,0x04000001,0x138e8a8e,0x04000011,
  0x678cd889,0x00000000,0x00000000,0xff810000,0x04000001,0x118a898a,0xff50000d,
  0x04000001,0x678bc08c,0x04000001,0x118bc88b,0x10000001,0x278ac08c,0x04000001,
  0x118ac88a,0x04000001,0x138ec88e,0x04000001,0x218ec040,0x00004001,0x40000000,
  0xff41100d,0x00001001,0xc0000460,0xff50000e,0x1c000113,0x6687c089,0x1187c487,
  0x6487c08a,0xf0000024,0x198ac38a,0x1b89cd8e,0x1b89d08c,0x1b89c58b,0x00000015,
  0x60000022,0x018ed88e,0x018bd18b,0x00000000,0x000007f8,0x0007fff8,0x70000123,
  0x678a888a,0x018cd08c,0x018ed18d,0x000007f8,0x000007f8,0x04000001,0x61c08ad1,
  0x00001001,0xc0000420,0xff50000f,0x04000011,0x6786d000,0x00000000,0x00000010,
  0x10000011,0x2700d884,0x00000000,0x00000000,0xff810000,0x04000001,0x118cc001,
  0x04000001,0x118ec002,0x04000001,0x1b02c302,0x04000001,0x1100c08c,0x10000011,
  0x2786d087,0x00000000,0x00000018,0x00004001,0x40000000,0xff311037,0x00009012,
  0xc0000420,0x50000008,0x00000000,0x04000011,0x678cd884,0x00000000,0x00000000,
  0xff810000,0x04000011,0x6487d88b,0x00000000,0xfffffffd,0x04000001,0x198bc38b,
  0x04000011,0x6587d88e,0x00000000,0xfffffffe,0x04000001,0x198ec38e,0x00004001,
  0x40000000,0xff41100b,0x00001001,0xc0000420,0xff500011,0x04000011,0x648cd889,
  0x00000000,0x00000000,0xff810000,0x04000011,0x0189d889,0x00000000,0x00000000,
  0xff810000,0x10000011,0x248cd889,0x00000000,0x00000000,0xff810000,0x04000011,
  0x6788d88e,0x00000000,0x00000000,0xff810000,0x10000011,0x2788d88c,0x00000000,
  0x00000000,0xff810000,0x10000011,0x278cd88e,0x00000000,0x00000000,0xff810000,
  0x00004001,0x40000000,0xff41100c,0x00001001,0xc0000420,0xff000000,0xe00040a4,
  0x6686c089,0x118bd08b,0x67848b8c,0x40000000,0x00000010,0xff423023,0x40000011,
  0x018ed08e,0x00000000,0x000007f8,0xff000000,0xe0000033,0x1d8cd08f,0x018cdd8c,
  0x118e898e,0x00000000,0x00007fff,0xffffffff,0x0000002f,0xff000000,0x60000022,
  0x1d8cd08f,0x018cdd8c,0x00007fff,0xffffffff,0x0000002f,0xff000000,0xe00000a3,
  0x208fd840,0x11848b00,0xe78cd901,0x00000000,0x00000000,0xff820000,0xff810000,
  0x60010012,0x11848b84,0x11848b8b,0x44604960,0xe00200b3,0x6601c08b,0x1101c487,
  0x2700d887,0x00000000,0xfffffff8,0x50600000,0x44604860,0x00001001,0xc0000460,
  0x60000012,0x018bd089,0x1b8bc58b,0x000000ff,0x60000012,0x018bd08b,0x1989c389,
  0x000007f8,0x20000101,0x67898889,0x04000001,0x61c089d1,0x00001001,0xc0000420,
  0xff000000,0x04000001,0x6786c089,0x04000001,0x118e898e,0xff000000,0x04000001,
  0x11848b8b,0x04000011,0x118bd08b,0x00000000,0x00000010,0x04000001,0x1184c085,
  0x04000011,0x678bd88c,0x00000000,0xfffffff0,0x04000001,0x118cc08f,0x04000011,
  0x1d8fd08f,0x00000000,0x0000002f,0x04000011,0x208fd840,0x00000000,0x00000000,
  0xff810000,0x00004001,0x40000000,0xff411023,0x00001001,0xc0000460,0xff500040,
  0x04000011,0x6784d887,0x00000000,0xfffffff8,0x04000011,0x2387d840,0x00000000,
  0x00000000,0xff810000,0x00004001,0x40000000,0xff411007,0x00001001,0xc0000460,
  0xff50000b,0x10000011,0x2784d88c,0x00000000,0xfffffff0,0x10000001,0x2686c08e,
  0x04000001,0x138ec88e,0x04000001,0x218ec040,0x00004001,0x40000000,0xff411003,
  0x00001001,0xc0000440,0xff50000c,0x04000001,0x678bc08c,0x04000001,0x118bc88b,
  0x10000001,0x2785c08c,0x04000001,0x1185c885,0x04000001,0x138ec88e,0x04000001,
  0x218ec040,0x00004001,0x40000000,0xff41100c,0x00001001,0xc0000460,0x04000011,
  0x6784d88c,0x00000000,0xfffffff0,0xff50000d,0x04000011,0x198cd08c,0x00000000,
  0x00000011,0x04000011,0x1b8cd08c,0x00000000,0x00000011,0x04000001,0x6686c08e,
  0x04000011,0x648cd889,0x00000000,0x00000000,0xff810000,0x04000001,0x2189c160,
  0x00004001,0x40000000,0xff411005,0x00001001,0xc0000460,0xff50000e,0x04000011,
  0x678cd887,0x00000000,0x00000000,0xff810000,0x04000001,0x6687c08b,0x04000011,
  0x018bd089,0x00000000,0x000000ff,0x04000001,0x1b8bc58b,0x04000011,0x018bd08b,
  0x00000000,0x000007f8,0x04000001,0x1187c487,0x04000001,0x1989c389,0x04000001,
  0x67898889,0x04000001,0x61c089d1,0x00001001,0xc0000420,0xff50000f,0x04000011,
  0x2387d840,0x00000000,0x00000000,0xff810000,0x00004001,0x40000000,0xff41100e,
  0x00001001,0xc0000460,0x04000011,0x6487d88b,0x00000000,0xfffffffd,0x04000001,
  0x198bc38b,0x04000001,0x13848b89,0x04000011,0x6789d885,0x00000000,0xffffffe0,
  0x04000011,0x1985d085,0x00000000,0x00000011,0x04000011,0x1b85d085,0x00000000,
  0x00000011,0x04000011,0x6785d885,0x00000000,0x00000000,0xff810000,0x04000011,
  0x6785d885,0x00000000,0x00000000,0xff810000,0x00004001,0x40000000,0xff41100e,
  0x00001001,0xc0000420,0xff500011,0x04000011,0x1387d887,0x00000000,0x00000000,
  0xff810000,0x04000011,0x2387d840,0x00000000,0x00000000,0xff810000,0x00004001,
  0x40000000,0xff411008,0x00001001,0xc0000460,0x04000001,0x13848784,0x04000001,
  0x1184c085,0x04000011,0x6784d887,0x00000000,0xfffffff8,0x00004001,0x40000000,
  0xff41100b,0x00001001,0xc0000420,0xff000000,0xff500012,0x04000011,0x1187d887,
  0x00000000,0x00000000,0xff810000,0x00004001,0x40000000,0xff41100b,0x00001001,
  0xc0000420,0xff000000,0x04000001,0x11848b8b,0x04000011,0x118bd08b,0x00000000,
  0x00000010,0x04000011,0x678bd88c,0x00000000,0xffffffe0,0x04000011,0x678bd88d,
  0x00000000,0xffffffe8,0x10000001,0x278bc08c,0x10000001,0x278bc88d,0x04000011,
  0x678bd88c,0x00000000,0xffffffd8,0x10000011,0x278bd88c,0x00000000,0xfffffff0,
  0x04000011,0x11c0d08e,0x00000000,0x00000018,0x04000001,0x118cc08f,0x04000011,
  0x198cd08c,0x00000000,0x00000011,0x04000011,0x1b8cd08c,0x00000000,0x00000011,
  0x04000011,0x1d8fd08f,0x00000000,0x0000002f,0x04000011,0x208fd840,0x00000000,
  0x00000000,0xff810000,0x00004001,0x40000000,0xff411023,0x00001001,0xc0000460,
  0x04000001,0x118bc084,0x10000011,0x2784d887,0x00000000,0xfffffff8,0x04000011,
  0x678cd887,0x00000000,0x00000000,0xff810000,0x04000001,0x6687c08b,0x04000011,
  0x018bd089,0x00000000,0x000000ff,0x04000001,0x1b8bc58b,0x04000011,0x018bd08b,
  0x00000000,0x000007f8,0x04000001,0x1187c487,0x04000001,0x1989c389,0x04000001,
  0x67898889,0x04000001,0x61c089d1,0x00001001,0xc0000420,0xff000000,0x04000001,
  0x11848b89,0x04000011,0x6789d88c,0x00000000,0xfffffff0,0x04000011,0x198cd08c,
  0x00000000,0x00000011,0x04000011,0x1b8cd08c,0x00000000,0x00000011,0x04000011,
  0x6689d88d,0x00000000,0xfffffff8,0x04000011,0x668cd88a,0x00000000,0x00000000,
  0xff810000,0x04000001,0x1187c487,0x04000011,0x678cd88f,0x00000000,0x00000000,
  0xff810000,0xff50000b,0x04000001,0x208d8a20,0x00004001,0x40000000,0xff411005,
  0x00001001,0xc0000460,0x04000001,0x188dc389,0x04000001,0x678f8989,0x04000011,
  0x2189d840,0x00000000,0x00000000,0xff810000,0x00004001,0x40000000,0xff411004,
  0x00001001,0xc0000440,0x04000001,0x1189c08c,0x04000001,0x11848b89,0x10000001,
  0x2789c88c,0x04000001,0x3ec48d8a,0x10000001,0x2789c08a,0x04000001,0x108dc18d,
  0x10000011,0x2689d88d,0x00000000,0xfffffff8,0xff50000c,0x04000011,0x6587d88e,
  0x00000000,0xfffffffe,0x04000001,0x198ec28e,0x04000001,0x11878e87,0x04000011,
  0x1387d887,0x00000000,0x00000000,0xff810000,0xff50000d,0x1c000113,0x6687c089,
  0x1187c487,0x6487c08a,0xf0000024,0x198ac38a,0x1b89cd8e,0x1b89d08c,0x1b89c58b,
  0x00000015,0x60000022,0x018ed88e,0x018bd18b,0x00000000,0x000007f8,0x0007fff8,
  0x70000123,0x678a888a,0x018cd08c,0x018ed18d,0x000007f8,0x000007f8,0x04000001,
  0x61c08ad1,0x00001001,0xc0000420,0xff50000e,0x04000001,0x108dc18d,0x00004001,
  0x40000000,0xff41100b,0x00001001,0xc0000420,0xff50000f,0x04000001,0x128d8a8d,
  0xff500010,0x04000011,0x668cd889,0x00000000,0x00000000,0xff810000,0x04000001,
  0x208d8960,0x00004001,0x40000000,0xff41100d,0x00001001,0xc0000460,0x04100011,
  0x238dd88f,0x01c00000,0x00000000,0xff810000,0x04000011,0x678cd889,0x00000000,
  0x00000000,0xff810000,0x04000001,0x118f898f,0x04000011,0x678fd889,0x00000000,
  0x00000000,0xff810000,0x04000011,0x2189d840,0x00000000,0x00000000,0xff810000,
  0x00004001,0x40000000,0xff411007,0x00001001,0xc0000440,0x04000001,0x108d8a8a,
  0x04000001,0x108ac18a,0x04000011,0x678fd88c,0x00000000,0x00000000,0xff810000,
  0x04000011,0x678fd88d,0x00000000,0x00000000,0xff810000,0x04000001,0x11848b89,
  0x10000001,0x2789c08c,0x10000001,0x2789c88d,0x10000011,0x2689d88a,0x00000000,
  0xfffffff8,0x00004001,0x40000000,0xff41100c,0x00001001,0xc0000420,0xff500011,
  0x04000001,0x108dc18d,0x00004001,0x40000000,0xff411010,0x00001001,0xc0000420,
  0xff000000,0x04000001,0x1b8ec38e,0x04000001,0x11848b89,0x04000011,0x6789d88c,
  0x00000000,0xffffffe8,0x04000001,0x118cc08f,0x04000011,0x198cd08c,0x00000000,
  0x00000011,0x04000011,0x1b8cd08c,0x00000000,0x00000011,0x04000011,0x1d8fd08f,
  0x00000000,0x0000002f,0x04000011,0x208fd840,0x00000000,0x00000000,0xff810000,
  0x00004001,0x40000000,0xff411005,0x00001001,0xc0000460,0x04000011,0x6789d88a,
  0x00000000,0xfffffff0,0x04000001,0x118ac08f,0x04000011,0x1d8fd08f,0x00000000,
  0x0000002f,0x04000011,0x208fd840,0x00000000,0x00000000,0xff810000,0x00004001,
  0x40000000,0xff411005,0x00001001,0xc0000460,0x04000011,0x6789d88a,0x00000000,
  0xffffffe8,0x04000011,0x218ad840,0x00000000,0x00000000,0xff810000,0x00004001,
  0x40000000,0xff411005,0x00001001,0xc0000460,0x04000011,0x648cd88a,0x00000000,
  0x00000000,0xff810000,0x04000011,0x218ad840,0x00000000,0x00000000,0xff810000,
  0x00004001,0x40000000,0xff411005,0x00001001,0xc0000460,0x04000001,0x198ec28e,
  0x04000001,0x11878e87,0x04000011,0x1387d887,0x00000000,0x00000000,0xff810000,
  0x04000011,0x11c0dc8a,0xfffe7fff,0x00000000,0x10000011,0x2789d88a,0x00000000,
  0xfffffff8,0xff50000b,0x1c000113,0x6687c089,0x1187c487,0x6487c08a,0xf0000024,
  0x198ac38a,0x1b89cd8e,0x1b89d08c,0x1b89c58b,0x00000015,0x60000022,0x018ed88e,
  0x018bd18b,0x00000000,0x000007f8,0x0007fff8,0x70000123,0x678a888a,0x018cd08c,
  0x018ed18d,0x000007f8,0x000007f8,0x04000001,0x61c08ad1,0x00001001,0xc0000420,
  0xff50000f,0x04000011,0x11c0d88a,0x00000000,0x00000000,0xff810000,0x10000011,
  0x2487d88a,0x00000000,0xfffffffc,0x04000001,0x198ec28e,0x04000001,0x11878e87,
  0x04000011,0x1387d887,0x00000000,0x00000000,0xff810000,0x04000011,0x11c0d88a,
  0x00000000,0x00000000,0xff810000,0x10000001,0x2487c08a,0x00004001,0x40000000,
  0xff41100b,0x00001001,0xc0000420,0xff000000,0x04000011,0x018ed88c,0x00000000,
  0x0007f800,0x04000001,0x1b8cc88c,0x04000011,0x018ed08d,0x00000000,0x000007f8,
  0x04000001,0x11848d8a,0x04000011,0x118ad88a,0x00000000,0x00000000,0xff810000,
  0x04000001,0x11848b8b,0x04000011,0x6784d889,0x00000000,0xfffffff8,0x04000001,
  0x138a898a,0x04000001,0x218cc040,0x00004001,0x40000000,0xff411005,0x00001001,
  0xc0000440,0x04000001,0x118b8c89,0x04000001,0x1389c88c,0x04000001,0x218a8420,
  0x00004001,0x40000000,0xff411002,0x00001001,0xc0000460,0xff50000b,0x04000011,
  0x678ad88d,0x00000000,0xfffffff0,0x04000001,0x118ac88a,0x10000001,0x278bc08d,
  0x04000001,0x118bc88b,0x04000001,0x218b8c20,0x00004001,0x40000000,0xff411003,
  0x00001001,0xc0000460,0x04000001,0x218a8420,0x00004001,0x40000000,0xff41100b,
  0x00001001,0xc0000440,0xff50000c,0x04000011,0x11c0d889,0x00000000,0x00000000,
  0xff810000,0x10000001,0x278bc089,0x04000001,0x118bc88b,0x04000001,0x218b8c20,
  0x00004001,0x40000000,0xff41100c,0x00001001,0xc0000440,0xff50000d,0x1c000113,
  0x6687c089,0x1187c487,0x6487c08a,0xf0000024,0x198ac38a,0x1b89cd8e,0x1b89d08c,
  0x1b89c58b,0x00000015,0x60000022,0x018ed88e,0x018bd18b,0x00000000,0x000007f8,
  0x0007fff8,0x70000123,0x678a888a,0x018cd08c,0x018ed18d,0x000007f8,0x000007f8,
  0x04000001,0x61c08ad1,0x00001001,0xc0000420,0xff50000f,0x04000011,0x11c0d889,
  0x00000000,0x00000000,0xff810000,0x10000001,0x2686c089,0x04000001,0x1184c08d,
  0x04000001,0x218d8a60,0x04000001,0x138d8a8d,0x00004001,0x40000000,0xff41100d,
  0x00001001,0xc0000440,0x04000001,0x118dc88c,0x10000001,0x2686c08c,0x04000011,
  0x6786d08c,0x00000000,0x00000010,0x04000001,0x118d8b8d,0x04000011,0x678cd889,
  0x00000000,0x00000000,0xff810000,0x04000001,0x218d8960,0x00004001,0x40000000,
  0xff411007,0x00001001,0xc0000460,0xff500010,0x04000011,0x678ad88d,0x00000000,
  0xfffffff0,0x04000001,0x118ac88a,0x10000001,0x278bc08d,0x04000001,0x118bc88b,
  0x04000001,0x218a8420,0x00004001,0x40000000,0xff411010,0x00001001,0xc0000440,
  0x00004001,0x40000000,0xff41100d,0x00001001,0xc0000420,0xff500011,0x10000011,
  0x278cd884,0x00000000,0x00000000,0xff810000,0x10000011,0x278cd88b,0x00000000,
  0x00000000,0xff810000,0x10000011,0x2786d087,0x00000000,0x00000018,0x04000001,
  0x138a848a,0x04000001,0x6686c001,0x04000001,0x1301c801,0x04000001,0x1b01c301,
  0x04000001,0x118cc000,0x00004001,0x40000000,0xff311000,0x00009012,0xc0000420,
  0x50000008,0x00000000,0x04000011,0x678cd884,0x00000000,0x00000000,0xff810000,
  0x04000011,0x678cd88b,0x00000000,0x00000000,0xff810000,0x04000001,0x118a848a,
  0x00004001,0x40000000,0xff411010,0x00001001,0xc0000420,0xff000000,0x04000101,
  0x6786c089,0x20000001,0x118e898e,0xff000000,0xff50000b,0x04004112,0x6784d887,
  0xc0000000,0xfffffff8,0xff422019,0x10004012,0x2686c08e,0x40000000,0x00000000,
  0xff42200b,0x28000022,0x2387d840,0x9387d98c,0x00000000,0x00000000,0x00000000,
  0xff820000,0xff810000,0x04000011,0xa38cd841,0x00000000,0x00000000,0xff810000,
  0x00040000,0x60616261,0x00001001,0xc0000c41,0x60011023,0xc0000460,0x13848c84,
  0x118b8c8b,0x00000000,0x44e04960,0xff500018,0x04000001,0x1184c085,0x04000001,
  0x138ec88e,0x04000001,0x218ec040,0x00004001,0x40000000,0xff411003,0x00001001,
  0xc0000440,0xff50000c,0x04000001,0x67858b8c,0x10000011,0x2785d88c,0x00000000,
  0xfffffff0,0x04000001,0x1185c885,0x04000001,0x138ec88e,0x04000001,0x218ec040,
  0x00004001,0x40000000,0xff41100c,0x00001001,0xc0000460,0xff50000d,0x04000001,
  0x6686c08e,0x04000011,0x6487d88c,0x00000000,0xffffffff,0x04000001,0x198cc38c,
  0xff50000f,0x04000001,0x218c8e60,0x00004001,0x40000000,0xff411006,0x00001001,
  0xc0000460,0x04000011,0x6487d88b,0x00000000,0xfffffffd,0x04000001,0x198bc38b,
  0x04000001,0x13848b84,0x04000011,0x1384d084,0x00000000,0x00000010,0x04000011,
  0x6784d885,0x00000000,0xfffffff0,0x04000011,0x1985d085,0x00000000,0x00000011,
  0x04000011,0x1b85d085,0x00000000,0x00000011,0x04000011,0x6785d885,0x00000000,
  0x00000000,0xff810000,0x04000011,0x6785d885,0x00000000,0x00000000,0xff810000,
  0x1c000113,0x6687c089,0x1187c487,0x6487c08a,0xf0000024,0x198ac38a,0x1b89cd8e,
  0x1b89d08c,0x1b89c58b,0x00000015,0x60000022,0x018ed88e,0x018bd18b,0x00000000,
  0x000007f8,0x0007fff8,0x70000123,0x678a888a,0x018cd08c,0x018ed18d,0x000007f8,
  0x000007f8,0x04000001,0x61c08ad1,0x00001001,0xc0000420,0xff500010,0x04000011,
  0x11c0d889,0x00000000,0x00000000,0xff810000,0x10000011,0x2785d889,0x00000000,
  0xfffffff0,0x04000001,0x118ec88e,0x00004001,0x40000000,0xff41100f,0x00001001,
  0xc0000420,0xff000000,0xff50000b,0x04004112,0x6784d887,0xc0000000,0xfffffff8,
  0xff422019,0x10004012,0x2686c08e,0x40000000,0x00000000,0xff42200b,0x6c004035,
  0xe487c001,0x2387d840,0xe687c000,0x9387d98c,0x80000000,0x00000000,0x00000000,
  0xff434003,0xff820000,0xff810000,0x20000011,0xa38cd841,0x00000000,0x00000000,
  0xff810000,0x00040000,0x60616261,0x00001001,0xc0000c41,0xff000000,0xf0021035,
  0xc0000460,0x1901c301,0x13848c84,0x118b8c8b,0x67848b8c,0x49605060,0x106044e0,
  0xff000000,0x30011023,0xc0000460,0x1901c301,0x13848c84,0x00000000,0x106044e0,
  0xff000000,0x80000011,0x2784d88c,0x00000000,0xfffffff0,0xff000000,0xff50000c,
  0x240040a3,0x6487d889,0x6487d98b,0x40000000,0xfffffffd,0xffffffff,0xff43300c,
  0x40000011,0x018ed08a,0x00000000,0x000007f8,0x04000001,0x1989c389,0x04000001,
  0x21898a60,0x70021034,0xc0000860,0x67018801,0x198bc38b,0x1384d084,0x00000010,
  0x48600000,0x10604460,0xe8000024,0x1187c487,0x13848b84,0x1b00cd8e,0x1b00d08c,
  0x00000015,0xe0000123,0x6784d885,0x1b00c58b,0x018ed98e,0x0007fff8,0xfffffff0,
  0x24000022,0x61c001d1,0x0185dc85,0x00000000,0x00007fff,0xffffffff,0x60000122,
  0x6785d885,0x018cd18c,0x00000000,0x000007f8,0x00000000,0xff810000,0x80000011,
  0x018bd08b,0x00000000,0x000007f8,0x60001023,0xc0000420,0x6785d885,0x018ed18d,
  0x000007f8,0x00000000,0xff810000,0xff50000d,0x60000022,0x1384d089,0x11c0d98a,
  0x00000000,0x00000000,0x00000018,0xff820000,0xa0001013,0xc0000420,0x118ec88e,
  0x27898e8a,0xff000000,0x2c000023,0x1b8ec101,0x1387d802,0x11848b8b,0x00000000,
  0x00000000,0xff810000,0xa0000112,0x678bd08c,0x678bc089,0x00000010,0xe0000293,
  0x31898c89,0x2f8cc022,0x678bc88a,0xe0000113,0x2f8a8920,0x2f898a21,0x278bc089,
  0x000c0010,0x00007360,0x62006480,0x60616280,0x84010022,0x11020187,0x278bd089,
  0x00000000,0x00000018,0x04e00000,0x1c000113,0x6487c08a,0x1187c487,0x6687c089,
  0xf0000024,0x198ac38a,0x1b89cd8e,0x1b89d08c,0x1b89c58b,0x00000015,0x64000123,
  0x678a888a,0x018ed88e,0x018bd18b,0x000007f8,0x0007fff8,0x64000023,0x61c08ad1,
  0x018cd08c,0x018ed18d,0x000007f8,0x000007f8,0x00001001,0xc0000420,0xff000000,
  0x70004034,0x1387d802,0x11848b8b,0x11c0d100,0x80000000,0x00000000,0x0000002f,
  0x00000000,0xff444041,0xff810000,0xb8000124,0x1b8ec103,0x678bd08c,0x678bc089,
  0x678bc88a,0x00000010,0x78000024,0x11020302,0x1d8c008f,0x1d890000,0x1d8a0001,
  0x00000000,0x6c000044,0x208fd8c3,0x208fd920,0x2000da21,0x2001db22,0x00000000,
  0x00000000,0x00000000,0x00000000,0x00000000,0xff840000,0xff830000,0xff820000,
  0xff810000,0x00080010,0x00000000,0x620050a2,0x60614060,0x60000092,0x2f8a8920,
  0x2f898a21,0x00000000,0x80011022,0xc0000862,0x278bd089,0x00000000,0x00000018,
  0x50620000,0x000c0010,0x00007360,0x006364c0,0x606162c0,0x04010011,0x1102c087,
  0x00000000,0x04600000,0x1c000113,0x6487c08a,0x1187c487,0x6687c089,0xf0000024,
  0x198ac38a,0x1b89cd8e,0x1b89d08c,0x1b89c58b,0x00000015,0x70000123,0x678a888a,
  0x018ed88e,0x018bd18b,0x000007f8,0x0007fff8,0x64000023,0x61c08ad1,0x018cd08c,
  0x018ed18d,0x000007f8,0x000007f8,0x00001001,0xc0000420,0xff000000,0x04000001,
  0x11848b8b,0x04000001,0x678bc08c,0x04000011,0x218cd840,0x00000000,0x00000000,
  0xff810000,0x00004001,0x40000000,0xff411001,0x00001001,0xc0000440,0x04000001,
  0x1b8ec38e,0x04000001,0x198ec28e,0x04000001,0x11878e87,0x04000011,0x1387d887,
  0x00000000,0x00000000,0xff810000,0x10000011,0x278bd88c,0x00000000,0xfffffff8,
  0xff50000b,0x1c000113,0x6687c089,0x1187c487,0x6487c08a,0xf0000024,0x198ac38a,
  0x1b89cd8e,0x1b89d08c,0x1b89c58b,0x00000015,0x60000022,0x018ed88e,0x018bd18b,
  0x00000000,0x000007f8,0x0007fff8,0x70000123,0x678a888a,0x018cd08c,0x018ed18d,
  0x000007f8,0x000007f8,0x04000001,0x61c08ad1,0x00001001,0xc0000420,0xff000000,
  0x1c000113,0x6687c089,0x1187c487,0x6487c08a,0xf0000024,0x198ac38a,0x1b89cd8e,
  0x1b89d08c,0x1b89c58b,0x00000015,0x60000022,0x018ed88e,0x018bd18b,0x00000000,
  0x000007f8,0x0007fff8,0x70000123,0x678a888a,0x018cd08c,0x018ed18d,0x000007f8,
  0x000007f8,0x04000001,0x61c08ad1,0x00001001,0xc0000420,0xff000000,0x04000001,
  0x1b8ec38e,0x04000001,0x198ec28e,0x04000001,0x11878e87,0x04000011,0x1387d887,
  0x00000000,0x00000000,0xff810000,0x1c000113,0x6687c089,0x1187c487,0x6487c08a,
  0xf0000024,0x198ac38a,0x1b89cd8e,0x1b89d08c,0x1b89c58b,0x00000015,0x60000022,
  0x018ed88e,0x018bd18b,0x00000000,0x000007f8,0x0007fff8,0x70000123,0x678a888a,
  0x018cd08c,0x018ed18d,0x000007f8,0x000007f8,0x04000001,0x61c08ad1,0x00001001,
  0xc0000420,0xff000000,0x04000011,0x6787d885,0x00000000,0x00000000,0xff810000,
  0x04000011,0x6786d08c,0x00000000,0x00000010,0x04000001,0x11848b8b,0x04000011,
  0x678cd889,0x00000000,0x00000000,0xff810000,0x04000001,0x218b8960,0x00004001,
  0x40000000,0xff41101f,0x00001001,0xc0000460,0x04000011,0x6487d88b,0x00000000,
  0x00000000,0xff810000,0x04000001,0x198bc38b,0x04000001,0x218e8b60,0x00004001,
  0x40000000,0xff411003,0x00001001,0xc0000440,0xff50000c,0x1c000113,0x6687c089,
  0x1187c487,0x6487c08a,0xf0000024,0x198ac38a,0x1b89cd8e,0x1b89d08c,0x1b89c58b,
  0x00000015,0x60000022,0x018ed88e,0x018bd18b,0x00000000,0x000007f8,0x0007fff8,
  0x70000123,0x678a888a,0x018cd08c,0x018ed18d,0x000007f8,0x000007f8,0x04000001,
  0x61c08ad1,0x00001001,0xc0000420,0xff50000d,0x04000001,0x138ec889,0x04000011,
  0x11c0d88a,0x00000000,0x00000000,0xff810000,0x10000001,0x2784898a,0x04000001,
  0x118ec88e,0x04000001,0x218e8b60,0x00004001,0x40000000,0xff41100d,0x00001001,
  0xc0000440,0x00004001,0x40000000,0xff41100c,0x00001001,0xc0000420,0xff000000,
  0x04000011,0x118ed88c,0x00000000,0x00000000,0xff810000,0x04000001,0x118e848e,
  0x04000001,0x118ec88e,0x04000011,0x6784d885,0x00000000,0xfffffff0,0x10000011,
  0x278ed88c,0x00000000,0xfffffff8,0x10000011,0x278ed885,0x00000000,0xfffffff0,
  0x04000011,0x6786d08c,0x00000000,0x00000010,0x04000001,0x118b8e8b,0x04000011,
  0x678cd889,0x00000000,0x00000000,0xff810000,0x04000001,0x218b8960,0x00004001,
  0x40000000,0xff41101e,0x00001001,0xc0000460,0x04000001,0x1184c08b,0x04000001,
  0x118ec084,0x04000011,0x6487d88c,0x00000000,0x00000000,0xff810000,0x04000001,
  0x218cc040,0x00004001,0x40000000,0xff411002,0x00001001,0xc0000440,0x04000001,
  0x118bc88b,0xff50000b,0x04000001,0x118bc88b,0x04000001,0x218b8420,0x00004001,
  0x40000000,0xff411003,0x00001001,0xc0000460,0x04000011,0x678bd885,0x00000000,
  0xfffffff0,0x10000001,0x278ec085,0x04000001,0x118ec88e,0x04000011,0x11c0d88a,
  0x00000000,0x00000000,0xff810000,0x10000011,0x278bd88a,0x00000000,0xfffffff0,
  0x04000001,0x138cc18c,0x04000001,0x218cc040,0x00004001,0x40000000,0xff41100b,
  0x00001001,0xc0000460,0xff50000c,0x04000011,0x6787d885,0x00000000,0x00000000,
  0xff810000,0x1c000113,0x6687c089,0x1187c487,0x6487c08a,0xf0000024,0x198ac38a,
  0x1b89cd8e,0x1b89d08c,0x1b89c58b,0x00000015,0x60000022,0x018ed88e,0x018bd18b,
  0x00000000,0x000007f8,0x0007fff8,0x70000123,0x678a888a,0x018cd08c,0x018ed18d,
  0x000007f8,0x000007f8,0x04000001,0x61c08ad1,0x00001001,0xc0000420,0xff50000d,
  0x04000011,0x11c0d889,0x00000000,0x00000000,0xff810000,0x10000001,0x278ec089,
  0x04000001,0x118ec88e,0x04000001,0x138cc18c,0x04000001,0x218cc040,0x00004001,
  0x40000000,0xff41100d,0x00001001,0xc0000460,0x00004001,0x40000000,0xff41100c,
  0x00001001,0xc0000420,0xff000000,0x04000011,0x6784d88c,0x00000000,0xfffffff0,
  0x04000011,0x198cd08c,0x00000000,0x00000011,0x04000011,0x1b8cd08c,0x00000000,
  0x00000011,0x04000011,0x678cd885,0x00000000,0x00000000,0xff810000,0x04000011,
  0x6786d08c,0x00000000,0x00000010,0x04000001,0x11848e8e,0x04000001,0x138ec88e,
  0x10000011,0x278cd884,0x00000000,0x00000000,0xff810000,0x04000011,0x118ed889,
  0x00000000,0x00000000,0xff810000,0x04000011,0x678cd88a,0x00000000,0x00000000,
  0xff810000,0x04000001,0x21898a60,0x10000011,0x278cd88e,0x00000000,0x00000000,
  0xff810000,0xff000000,0x04000001,0x118cc000,0xff000000,0x04000001,0x1185c001,
  0x04000001,0x118cc000,0xff000000,0x00004001,0x40000000,0xff41101d,0x00001001,
  0xc0000460,0x04000011,0x11c0d889,0x00000000,0x00000000,0xff810000,0x10000011,
  0x2688d889,0x00000000,0x00000000,0xff810000,0xff000000,0x04000001,0x61c085d1,
  0xff000000,0x04000011,0x6788d889,0x00000000,0x00000000,0xff810000,0x04000001,
  0x61c089d1,0xff000000,0x00009012,0xc0000420,0x50000008,0x00000000,0x04000011,
  0x678cd884,0x00000000,0x00000000,0xff810000,0x10000011,0x2788d88c,0x00000000,
  0x00000000,0xff810000,0x04000011,0x11c0d889,0x00000000,0x00000000,0xff810000,
  0x10000011,0x2688d889,0x00000000,0x00000000,0xff810000,0x04000001,0x1900c38e,
  0x04000001,0x11848e8b,0x04000011,0x678cd889,0x00000000,0x00000000,0xff810000,
  0x04000001,0x13898b8b,0x04000011,0x6784d887,0x00000000,0xfffffff8,0x00004001,
  0x40000000,0xff411016,0x00001001,0xc0000420,0xff000000,0xff100000
};

#line 9 "vm_e2k.dasc"
//|.globals GLOB_
enum {
  GLOB_vm_returnp,
  GLOB_cont_dispatch,
  GLOB_vm_returnc,
  GLOB_vm_unwind_c_eh,
  GLOB_BC_RET_Z,
  GLOB_vm_return,
  GLOB_vm_unwind_c,
  GLOB_vm_unwind_ff,
  GLOB_vm_unwind_ff_eh,
  GLOB_vm_growstack_c,
  GLOB_vm_growstack_v,
  GLOB_vm_growstack_f,
  GLOB_vm_resume,
  GLOB_vm_pcall,
  GLOB_vm_call,
  GLOB_vmeta_call,
  GLOB_vm_cpcall,
  GLOB_cont_ffi_callback,
  GLOB_vm_call_tail,
  GLOB_cont_cat,
  GLOB_cont_ra,
  GLOB_BC_CAT_Z,
  GLOB_vmeta_tgets,
  GLOB_vmeta_tgetb,
  GLOB_vmeta_tgetv,
  GLOB_vmeta_tgetr,
  GLOB_vmeta_tsets,
  GLOB_vmeta_tsetb,
  GLOB_vmeta_tsetv,
  GLOB_cont_nop,
  GLOB_vmeta_tsetr,
  GLOB_vmeta_comp,
  GLOB_vmeta_binop,
  GLOB_cont_condt,
  GLOB_cont_condf,
  GLOB_vmeta_equal,
  GLOB_vmeta_equal_cd,
  GLOB_vmeta_istype,
  GLOB_vmeta_arith_vn,
  GLOB_vmeta_arith_nv,
  GLOB_vmeta_unm,
  GLOB_vmeta_arith_vv,
  GLOB_vmeta_len,
  GLOB_BC_LEN_Z,
  GLOB_BC_CALLT_Z,
  GLOB_vmeta_for,
  GLOB_ff_assert,
  GLOB_fff_fallback,
  GLOB_fff_res,
  GLOB_ff_type,
  GLOB_ff_getmetatable,
  GLOB_ff_setmetatable,
  GLOB_ff_rawget,
  GLOB_ff_tonumber,
  GLOB_ff_tostring,
  GLOB_fff_fallback_1,
  GLOB_ff_next,
  GLOB_ff_pairs,
  GLOB_ff_ipairs_aux,
  GLOB_fff_res0,
  GLOB_ff_ipairs,
  GLOB_ff_pcall,
  GLOB_ff_xpcall,
  GLOB_ff_coroutine_resume,
  GLOB_ff_coroutine_wrap_aux,
  GLOB_ff_coroutine_yield,
  GLOB_ff_math_abs,
  GLOB_ff_math_sqrt,
  GLOB_fff_resb,
  GLOB_ff_math_floor,
  GLOB_vm_floor,
  GLOB_ff_math_ceil,
  GLOB_vm_ceil,
  GLOB_ff_math_log,
  GLOB_ff_math_log10,
  GLOB_ff_math_exp,
  GLOB_ff_math_sin,
  GLOB_ff_math_cos,
  GLOB_ff_math_tan,
  GLOB_ff_math_asin,
  GLOB_ff_math_acos,
  GLOB_ff_math_atan,
  GLOB_ff_math_sinh,
  GLOB_ff_math_cosh,
  GLOB_ff_math_tanh,
  GLOB_ff_math_pow,
  GLOB_ff_math_atan2,
  GLOB_ff_math_fmod,
  GLOB_ff_math_ldexp,
  GLOB_ff_math_frexp,
  GLOB_ff_math_modf,
  GLOB_ff_math_min,
  GLOB_ff_math_max,
  GLOB_ff_string_byte,
  GLOB_ff_string_char,
  GLOB_fff_newstr,
  GLOB_ff_string_sub,
  GLOB_fff_emptystr,
  GLOB_ff_string_reverse,
  GLOB_ff_string_lower,
  GLOB_ff_string_upper,
  GLOB_ff_bit_band,
  GLOB_fff_fallback_bit_op,
  GLOB_ff_bit_bor,
  GLOB_ff_bit_bxor,
  GLOB_ff_bit_tobit,
  GLOB_ff_bit_bswap,
  GLOB_ff_bit_bnot,
  GLOB_ff_bit_lshift,
  GLOB_ff_bit_rshift,
  GLOB_ff_bit_arshift,
  GLOB_ff_bit_rol,
  GLOB_ff_bit_ror,
  GLOB_vm_record,
  GLOB_vm_rethook,
  GLOB_vm_inshook,
  GLOB_cont_hook,
  GLOB_vm_callhook,
  GLOB_vm_hotcall,
  GLOB_vm_profhook,
  GLOB_vm_trunc,
  GLOB_vm_mod,
  GLOB_assert_bad_for_arg_type,
  GLOB_vm_ffi_callback,
  GLOB_vm_ffi_call,
  GLOB_BC_TSETS_Z,
  GLOB__MAX
};
#line 10 "vm_e2k.dasc"
//|.globalnames globnames
static const char *const globnames[] = {
  "vm_returnp",
  "cont_dispatch",
  "vm_returnc",
  "vm_unwind_c_eh",
  "BC_RET_Z",
  "vm_return",
  "vm_unwind_c",
  "vm_unwind_ff",
  "vm_unwind_ff_eh",
  "vm_growstack_c",
  "vm_growstack_v",
  "vm_growstack_f",
  "vm_resume",
  "vm_pcall",
  "vm_call",
  "vmeta_call",
  "vm_cpcall",
  "cont_ffi_callback",
  "vm_call_tail",
  "cont_cat",
  "cont_ra",
  "BC_CAT_Z",
  "vmeta_tgets",
  "vmeta_tgetb",
  "vmeta_tgetv",
  "vmeta_tgetr",
  "vmeta_tsets",
  "vmeta_tsetb",
  "vmeta_tsetv",
  "cont_nop",
  "vmeta_tsetr",
  "vmeta_comp",
  "vmeta_binop",
  "cont_condt",
  "cont_condf",
  "vmeta_equal",
  "vmeta_equal_cd",
  "vmeta_istype",
  "vmeta_arith_vn",
  "vmeta_arith_nv",
  "vmeta_unm",
  "vmeta_arith_vv",
  "vmeta_len",
  "BC_LEN_Z",
  "BC_CALLT_Z",
  "vmeta_for",
  "ff_assert",
  "fff_fallback",
  "fff_res",
  "ff_type",
  "ff_getmetatable",
  "ff_setmetatable",
  "ff_rawget",
  "ff_tonumber",
  "ff_tostring",
  "fff_fallback_1",
  "ff_next",
  "ff_pairs",
  "ff_ipairs_aux",
  "fff_res0",
  "ff_ipairs",
  "ff_pcall",
  "ff_xpcall",
  "ff_coroutine_resume",
  "ff_coroutine_wrap_aux",
  "ff_coroutine_yield",
  "ff_math_abs",
  "ff_math_sqrt",
  "fff_resb",
  "ff_math_floor",
  "vm_floor",
  "ff_math_ceil",
  "vm_ceil",
  "ff_math_log",
  "ff_math_log10",
  "ff_math_exp",
  "ff_math_sin",
  "ff_math_cos",
  "ff_math_tan",
  "ff_math_asin",
  "ff_math_acos",
  "ff_math_atan",
  "ff_math_sinh",
  "ff_math_cosh",
  "ff_math_tanh",
  "ff_math_pow",
  "ff_math_atan2",
  "ff_math_fmod",
  "ff_math_ldexp",
  "ff_math_frexp",
  "ff_math_modf",
  "ff_math_min",
  "ff_math_max",
  "ff_string_byte",
  "ff_string_char",
  "fff_newstr",
  "ff_string_sub",
  "fff_emptystr",
  "ff_string_reverse",
  "ff_string_lower",
  "ff_string_upper",
  "ff_bit_band",
  "fff_fallback_bit_op",
  "ff_bit_bor",
  "ff_bit_bxor",
  "ff_bit_tobit",
  "ff_bit_bswap",
  "ff_bit_bnot",
  "ff_bit_lshift",
  "ff_bit_rshift",
  "ff_bit_arshift",
  "ff_bit_rol",
  "ff_bit_ror",
  "vm_record",
  "vm_rethook",
  "vm_inshook",
  "cont_hook",
  "vm_callhook",
  "vm_hotcall",
  "vm_profhook",
  "vm_trunc",
  "vm_mod",
  "assert_bad_for_arg_type",
  "vm_ffi_callback",
  "vm_ffi_call",
  "BC_TSETS_Z",
  (const char *)0
};
#line 11 "vm_e2k.dasc"
//|.externnames extnames
static const char *const extnames[] = {
  "lj_state_growstack",
  "lj_meta_tget",
  "lj_tab_getinth",
  "lj_meta_tset",
  "lj_tab_setinth",
  "lj_meta_comp",
  "lj_meta_equal",
  "lj_meta_equal_cd",
  "lj_meta_istype",
  "lj_meta_arith",
  "lj_meta_len",
  "lj_meta_call",
  "lj_meta_for",
  "lj_tab_get",
  "lj_gc_step",
  "lj_strfmt_num",
  "lj_tab_next",
  "lj_ffh_coroutine_wrap_err",
  "log",
  "log10",
  "exp",
  "sin",
  "cos",
  "tan",
  "asin",
  "acos",
  "atan",
  "sinh",
  "cosh",
  "tanh",
  "pow",
  "atan2",
  "fmod",
  "frexp",
  "modf",
  "lj_str_new",
  "lj_buf_putstr_reverse",
  "lj_buf_tostr",
  "lj_buf_putstr_lower",
  "lj_buf_putstr_upper",
  "lj_dispatch_ins",
  "lj_dispatch_call",
  "lj_dispatch_profile",
  "raise",
  "lj_ccallback_leave",
  "memcpy",
  "lj_tab_len",
  "lj_meta_cat",
  "lj_gc_barrieruv",
  "lj_func_closeuv",
  "lj_func_newL_gc",
  "lj_tab_new",
  "lj_gc_step_fixtop",
  "lj_tab_dup",
  "lj_tab_newkey",
  "lj_tab_reasize",
  (const char *)0
};
#line 12 "vm_e2k.dasc"
//|
//|//-----------------------------------------------------------------------
//|
//|// Fixed register assignments for the interpreter.
//|.define RRET1,     r0
//|.define RARG1,     r0
//|.define RARG2,     r1
//|.define RARG3,     r2
//|.define RARG4,     r3
//|.define RARG5,     r4
//|.define RARG6,     r5
//|.define RARG7,     r6
//|.define RARG8,     r7
//|
//|.define CRET1,     b0
//|.define CRET2,     b1
//|.define CRET3,     b2
//|.define CRET4,     b3
//|.define CRET5,     b4
//|.define CRET6,     b5
//|.define CRET7,     b6
//|.define CRET8,     b7
//|.define CARG1,     b0
//|.define CARG2,     b1
//|.define CARG3,     b2
//|.define CARG4,     b3
//|.define CARG5,     b4
//|.define CARG6,     b5
//|.define CARG7,     b6
//|.define CARG8,     b7
//|
//|.define BASE,      r4
//|.define KBASE,     r5
//|.define STACK,     r6
//|.define PC,        r7
//|.define DISPATCH,  r8
//|
//|.define TMP0,      r9
//|.define TMP1,      r10
//|
//|.define RA,        r11
//|.define RB,        r12
//|.define RC,        r13
//|.define RD,        r14
//|.define ITYPE,     r15
//|
//|.macro do_fault
//| addd 0, 0x0, 0x0, RARG1
//| ldd 0, RARG1, 0x0, RARG1
//|.endmacro
//|.macro set_frame
//| setwd wsz = 0xc, nfx = 0x1, dbl = 0x0
//| setbn rsz = 0x3, rbs = 0x8, rcur = 0x0
//|.endmacro
//|.macro set_frame_4
//| setwd wsz = 0x4, nfx = 0x1, dbl = 0x0
//|.endmacro
//|
//|// Type definitions. Some of these are only used for documentation.
//|.type L,           lua_State
#define Dt1(_V) (int)(ptrdiff_t)&(((lua_State *)0)_V)
#line 72 "vm_e2k.dasc"
//|.type GL,          global_State
#define Dt2(_V) (int)(ptrdiff_t)&(((global_State *)0)_V)
#line 73 "vm_e2k.dasc"
//|.type TVALUE,      TValue
#define Dt3(_V) (int)(ptrdiff_t)&(((TValue *)0)_V)
#line 74 "vm_e2k.dasc"
//|.type GCOBJ,       GCobj
#define Dt4(_V) (int)(ptrdiff_t)&(((GCobj *)0)_V)
#line 75 "vm_e2k.dasc"
//|.type STR,         GCstr
#define Dt5(_V) (int)(ptrdiff_t)&(((GCstr *)0)_V)
#line 76 "vm_e2k.dasc"
//|.type TAB,         GCtab
#define Dt6(_V) (int)(ptrdiff_t)&(((GCtab *)0)_V)
#line 77 "vm_e2k.dasc"
//|.type LFUNC,       GCfuncL
#define Dt7(_V) (int)(ptrdiff_t)&(((GCfuncL *)0)_V)
#line 78 "vm_e2k.dasc"
//|.type CFUNC,       GCfuncC
#define Dt8(_V) (int)(ptrdiff_t)&(((GCfuncC *)0)_V)
#line 79 "vm_e2k.dasc"
//|.type PROTO,       GCproto
#define Dt9(_V) (int)(ptrdiff_t)&(((GCproto *)0)_V)
#line 80 "vm_e2k.dasc"
//|.type UPVAL,       GCupval
#define DtA(_V) (int)(ptrdiff_t)&(((GCupval *)0)_V)
#line 81 "vm_e2k.dasc"
//|.type NODE,        Node
#define DtB(_V) (int)(ptrdiff_t)&(((Node *)0)_V)
#line 82 "vm_e2k.dasc"
//|.type NARGS,       int
#define DtC(_V) (int)(ptrdiff_t)&(((int *)0)_V)
#line 83 "vm_e2k.dasc"
//|.type TRACE,       GCtrace
#define DtD(_V) (int)(ptrdiff_t)&(((GCtrace *)0)_V)
#line 84 "vm_e2k.dasc"
//|.type SBUF,        SBuf
#define DtE(_V) (int)(ptrdiff_t)&(((SBuf *)0)_V)
#line 85 "vm_e2k.dasc"
//|
//|// Stack layout while in interpreter. Must match with lj_frame.h.
//|//-----------------------------------------------------------------------
//|.define CFRAME_SPACE,  0x30                // 8*6
//|.define STACK_SPACE,   0xffffffd0          // -(8*6)
//|.define MULTRES,       0x0
//|.define SAVE_NRES,     0x8
//|.define SAVE_ERRF,     0xc
//|.define SAVE_L,        0x10
//|.define SAVE_PC,       0x18
//|.define SAVE_CFRAME,   0x20
//|.define STACK_TMP,     0x28
//|
//|//-----------------------------------------------------------------------
//|
//|// Instruction headers.
//|.macro ins_A; .endmacro
//|.macro ins_AD; .endmacro
//|.macro ins_AJ; .endmacro
//|.macro ins_ABC
//| andd 0, RD, 0x7f800, RB
//| shrd 0, RB, 0x8, RB
//| andd 0, RD, 0x7f8, RC
//|.endmacro
//|.macro ins_AND; .endmacro
//|
//|// Instruction decode+dispatch.
//|.macro ins_NEXT             // AD = {D |A|OP}, ABC = {B|C|A|OP}, AC = {lo_D|A|OP}
//|<
//| ldw 0, PC, 0x0, TMP0
//| ldb 2, PC, 0x0, TMP1
//| addd 1, PC, 0x4, PC
//| nop 2
//|>
//|<
//| shld 2, TMP1, 0x3, TMP1
//| shrd 3, TMP0, 0xd, RD
//| shrd 4, TMP0, 0x15, RB
//| shrd 5, TMP0, 0x5, RA
//|>
//|<
//| andd 3, RD, 0x7fff8, RD
//| andd 4, RA, 0x7f8, RA
//|>
//|<
//| ldd 2, TMP1, DISPATCH, TMP1
//| andd 3, RB, 0x7f8, RB
//| andd 4, RD, 0x7f8, RC
//| nop 2
//|>
//| movtd 0, TMP1, ctpr1
//| ct ctpr1
//|.endmacro
//|
//|// Instruction footer.
//|.if 1
//| // Replicated dispatch. Less unpredictable branches, but higher I-Cache use.
//| .define ins_next, ins_NEXT
//| .define ins_next_, ins_NEXT
//|.else
//| // Common dispatch. Lower I-Cache use, only one (very) unpredictable branch.
//| // Affects only certain kinds of benchmarks (and only with -j off).
//| // Around 10%-30% slower on Core2, a lot more slower on P4.
//| .macro ins_next
//|   disp ctpr1, ->ins_next
//| .endmacro
//| .macro ins_next_
//| ->ins_next:
//|   ins_NEXT
//| .endmacro
//|.endif
//| 
//|// Call decode and dispatch.
//|.macro ins_callt
//| // BASE = new base, RB = LFUNC, RD = (nargs+1)*8, [BASE-8] = PC
//| ldd 0, RB, LFUNC->pc, PC
//| ldw 0, PC, 0x0, RA
//| andd 0, RA, 0xff, TMP0
//| shrd 0, RA, 0x5, RA
//| andd 0, RA, 0x7f8, RA
//| addd 0, PC, 0x4, PC
//| shld 0, TMP0, 0x3, TMP0                      // jmp to [DISPATCH+OP*8]
//| ldd 0, TMP0, DISPATCH, TMP0
//| movtd 0, TMP0, ctpr1
//| ct ctpr1
//|.endmacro
//|
//|.macro ins_call
//| // BASE = new base, RB = LFUNC, RD = (nargs+1)*8, PC = caller PC
//| std 2, BASE, 0xfffffff8, PC
//| ins_callt
//|.endmacro
//|
//|//-----------------------------------------------------------------------
//|
//|// Macros to clear or set tags.
//|.macro cleartp, reg
//| shld 0, reg, 0x11, reg
//| shrd 0, reg, 0x11, reg
//|.endmacro
//|.macro settp, reg, tp
//| addd 0, 0x0, tp, ITYPE
//| shld 0, ITYPE, 0x2f, ITYPE
//| ord 0, reg, ITYPE, reg
//|.endmacro
//|.macro settp, dst, reg, tp
//| addd 0, 0x0, tp, dst
//| shld 0, dst, 0x2f, dst
//| ord 0, dst, reg, dst
//|.endmacro
//|
//|// Macros to test operand types.
//|.macro checktp_nc, reg, tp, target
//| addd 0, reg, 0x0, ITYPE
//| sard 0, ITYPE, 0x2f, ITYPE
//| cmpesb 0, ITYPE, tp, pred0
//| disp ctpr1, target
//| ct ctpr1, ~pred0
//|.endmacro
//|.macro checktp, reg, tp, target
//| addd 0, reg, 0x0, ITYPE
//| cleartp reg
//| sard 0, ITYPE, 0x2f, ITYPE
//| cmpesb 0, ITYPE, tp, pred0
//| disp ctpr1, target
//| ct ctpr1, ~pred0
//|.endmacro
//|.macro checktptp, src, tp, target
//| addd 0, src, 0x0, ITYPE
//| sard 0, ITYPE, 0x2f, ITYPE
//| cmpesb 0, ITYPE, tp, pred0
//| disp ctpr1, target
//| ct ctpr1, ~pred0
//|.endmacro
//|
//|.macro checknumx, reg, target, cmp, pred
//| addd 0, reg, 0x0, ITYPE
//| sard 0, ITYPE, 0x2f, ITYPE
//| cmp 0, ITYPE, LJ_TISNUM, pred0
//| disp ctpr1, target
//| ct ctpr1, pred
//|.endmacro
//|.macro checkstr, reg, target; checktp reg, LJ_TSTR, target; .endmacro
//|.macro checktab, reg, target; checktp reg, LJ_TTAB, target; .endmacro
//|.macro checkfunc, reg, target; checktp reg, LJ_TFUNC, target; .endmacro
//|.macro checknum, reg, target; checknumx reg, target, cmpbsb, ~pred0; .endmacro
//|.macro checknumtp, src, target; checknumx src, target, cmpbsb, ~pred0; .endmacro
//|.macro checknumber, src, target; checknumx src, target, cmpbesb, ~pred0; .endmacro
//|
//|.macro mov_false, reg
//| addd 0, 0x0, U64x(0xffff7fff,0xffffffff), reg
//|.endmacro
//|.macro mov_true, reg
//| addd 0, 0x0, U64x(0xfffeffff,0xffffffff), reg
//|.endmacro
//|
//|.define PC_OP, 0xfffffffc                  // Byte
//|.define PC_RA, 0xfffffffd                  // Byte
//|.define PC_RB, 0xffffffff                  // Byte
//|.define PC_RC, 0xfffffffe                  // Byte
//|.define PC_RD, 0xfffffffe                  // Halfword
//|.macro branchPC, reg
//| shld 0, reg, 0x2, reg
//| addd 0, PC, reg, PC
//| subd 0, PC, BCBIAS_J*4, PC
//|.endmacro
//|
//|// Assumes DISPATCH is relative to GL.
#define DISPATCH_GL(field)      (GG_DISP2G + (int)offsetof(global_State, field))
#define PC2PROTO(field)         ((int)offsetof(GCproto, field)-(int)sizeof(GCproto))
//|
//|// Set current VM state.
//|.macro set_vmstate, st
//| addd 0, 0x0, ~LJ_VMST_..st, TMP0
//| stw 2, DISPATCH, DISPATCH_GL(vmstate), TMP0
//|.endmacro
//|
//|// Move table write barrier back. Overwrites reg.
//|.macro barrierback, tab, reg, tmp
//| ldb 0, tab, TAB->marked, tmp
//| andd 0, tmp, ~LJ_GC_BLACK, tmp               // black2gray(tab)
//| stb 2, tab, TAB->marked, tmp
//| ldd 0, DISPATCH, DISPATCH_GL(gc.grayagain), reg
//| std 2, DISPATCH, DISPATCH_GL(gc.grayagain), tab
//| std 2, tab, TAB->gclist, reg
//|.endmacro
//|
//|//-----------------------------------------------------------------------

/* Generate subroutines used by opcodes and other parts of the VM */
/* The .code_sub section should be last to help static branch prediction. */
static void build_subroutines(BuildCtx *ctx)
{
    //|.code_sub
    dasm_put(Dst, 0);
#line 279 "vm_e2k.dasc"
    //|
    //|//-----------------------------------------------------------------------
    //|//-- Return handling ----------------------------------------------------
    //|//-----------------------------------------------------------------------
    //|
    //|->vm_returnp:
    //| cmpandesb 0, PC, FRAME_P, pred0
    //| disp ctpr1, ->cont_dispatch
    //| ct ctpr1, pred0
    //|
    //| // Return from pcall or xpcall fast func
    //| andd 0, PC, 0xfffffff8, PC
    //| subd 0, BASE, PC, BASE                   // Restore caller base.
    //| addd 0, RA, PC, RA                       // Rebase RA and prepend one result.
    //| subd 0, RA, 0x8, RA
    //| ldd 0, BASE, 0xfffffff8, PC              // Fetch PC of previous frame.
    //| // Prepending may overwrite the pcall frame, so do it at the end.
    //| mov_true ITYPE
    //| std 2, BASE, RA, ITYPE                   // Prepend true to results.
    //|
    //|->vm_returnc:
    //| addd 0, RD, 0x8, RD                      // RD = (nresults+1)*8
    //| cmpedb 0, RD, 0x0, pred0
    //| addd 0, 0x0, LUA_YIELD, RRET1
    //| disp ctpr1, ->vm_unwind_c_eh
    //| ct ctpr1, pred0
    //| stw 2, STACK, MULTRES, RD
    //| cmpandedb 0, PC, FRAME_TYPE, pred0
    //| disp ctpr1, ->BC_RET_Z
    //| ct ctpr1, pred0                       // Handle regular return to Lua.
    //|
    //|->vm_return:
    //| // BASE = base, RA = resultofs, RD/MULTRES = (nresults+1)*8, PC = return
    //| xord 0, PC, FRAME_C, PC
    //| cmpandesb 0, PC, FRAME_TYPE, pred0
    //| disp ctpr1, ->vm_returnp
    //| ct ctpr1, ~pred0
    //|
    //| // Return to C.
    //| set_vmstate C
    //| subd 0, 0x0, 0x8, TMP0
    //| andd 0, PC, TMP0, PC
    //| subd 0, PC, BASE, PC
    //| subd 0, 0x0, PC, PC                      // Previous base = BASE - delta
    //| subd 0, RD, 0x8, RD
    //| cmpedb 0, RD, 0x0, pred0
    //| disp ctpr1, >2
    //| ct ctpr1, pred0
    //|1:                                     // Move results down.
    //| ldd 0, BASE, RA, RB
    //| subd 0, BASE, 0x10, TMP0
    //| std 2, TMP0, 0x0, RB
    //| addd 0, BASE, 0x8, BASE
    //| subd 0, RD, 0x8, RD
    //| cmpedb 0, RD, 0x0, pred0
    //| disp ctpr1, <1
    //| ct ctpr1, ~pred0
    //|2:
    //| ldd 0, STACK, SAVE_L, RB
    //| std 2, RB, L->base, PC
    //|3:
    //| ldw 0, STACK, MULTRES, RD
    //| ldw 0, STACK, SAVE_NRES, RA
    //| shld 0, RA, 0x3, RA                      // RA = wanted (nresults+1)*8
    //|4:
    //| cmpesb 0, RA, RD, pred0
    //| disp ctpr1, >6
    //| ct ctpr1, ~pred0                      // More/less results wanted?
    //|5:
    //| subd 0, BASE, 0x10, BASE
    //| std 2, RB, L->top, BASE
    //| ldd 0, STACK, SAVE_CFRAME, TMP0          // Restore previous C frame.
    //| std 2, RB, L->cframe, TMP0
    //| addd 0, 0x0, 0x0, RRET1                  // Ok return status for vm_pcall.
    //| return ctpr3
    //| ct ctpr3
    //|
    //|6:
    dasm_put(Dst, 1, FRAME_P, LUA_YIELD, FRAME_TYPE, FRAME_C, FRAME_TYPE, ~LJ_VMST_C, DISPATCH_GL(vmstate), Dt1(->base), Dt1(->top), Dt1(->cframe));
#line 357 "vm_e2k.dasc"
    //| cmpbsb 0, RA, RD, pred0
    //| disp ctpr1, >7                        // Less results wanted?
    //| ct ctpr1, pred0
    //| // More results wanted. Check stack size and fill up results with nil.
    //| ldd 0, RB, L->maxstack, TMP0
    //| cmpbedb 0, BASE, TMP0, pred0
    //| disp ctpr1, >8
    //| ct ctpr1, ~pred0
    //| subd 0, BASE, 0x10, TMP0
    //| addd 0, 0x0, LJ_TNIL, TMP1
    //| std 2, TMP0, 0x0, TMP1
    //| addd 0, BASE, 0x8, BASE
    //| adds 0, RD, 0x8, RD
    //| disp ctpr1, <4
    //| ct ctpr1
    //|
    //|7:                                     // Less results wanted.
    //| cmpesb 0, RA, 0x0, pred0
    //| disp ctpr1, <5
    //| ct ctpr1, pred0
    //| subd 0, RA, RD, RA                       // Negative result!
    //| addd 0, BASE, RA, BASE                   // Correct top.
    //| disp ctpr1, <5
    //| ct ctpr1
    //|
    //|8:
    //| // Corner case: need to grow stack for filling up results.
    //| // This can happen if:
    //| // - A C function grows the stack (a lot).
    //| // - The GC shrinks the stack in between.
    //| // - A return back from a lua_call() with (high) nresults adjustment.
    //| std 2, RB, L->top, BASE                  // Save current top held in BASE (yes).
    //| stw 2, STACK, MULTRES, RD
    //| adds 0, RA, 0x0, CARG2
    //| addd 0, RB, 0x0, CARG1
    //| disp ctpr1, extern lj_state_growstack // (lua_State *L, int n)
    //| call ctpr1, wbs = 0x8
    //| ldd 0, RB, L->top, BASE                  // Need the (realloced) L->top in BASE
    //| disp ctpr1, <3
    //| ct ctpr1
    //|
    //|->vm_unwind_c:                         // Unwind C stack, return from vm_pcall.
    //| // (void *cframe, int errcode)
    //| set_frame
    //| addd 0, RARG1, 0x0, STACK
    //| addd 0, RARG2, 0x0, RRET1                // Error return status for vm_pcall.
    //|->vm_unwind_c_eh:                      // Landing pad for external unwinder.
    //| ldd 0, STACK, SAVE_L, RB
    //| ldd 0, RB, L->glref, RB
    //| addd 0, 0x0, ~LJ_VMST_C, TMP0
    //| stw 2, RB, GL->vmstate, TMP0
    //| return ctpr3
    //| ct ctpr3
    //|
    //|->vm_unwind_ff:                        // Unwind C stack, return from ff pcall.
    //| // (void *cframe)
    //| set_frame
    //| andd 0, RARG1, CFRAME_RAWMASK, RARG1
    //| addd 0, RARG1, 0x0, STACK
    //|->vm_unwind_ff_eh:                     //  Landing pad for external unwinder.
    //| ldd 0, STACK, SAVE_L, RB
    //| addd 0, 0x0, (1+1)*8, RD                 // Really 1+2 results, incr. later.
    //| ldd 0, RB, L->base, BASE
    //| ldd 0, RB, L->glref, DISPATCH            // Setup pointer to dispatch table.
    //| addd 0, DISPATCH, GG_G2DISP, DISPATCH
    //| ldd 0, BASE, 0xfffffff8, PC              // Fetch PC of previous frame.
    //| mov_false RA
    //| ldd 0, BASE, 0x0, RB
    //| std 2, BASE, 0xfffffff0, RA              // Prepend false to error message.
    //| std 2, BASE, 0xfffffff8, RB
    //| subd 0, 0x0, 0x10, RA                    // Results start at BASE+RA = BASE-16.
    //| set_vmstate INTERP
    //| disp ctpr1, ->vm_returnc              // Increments RD/MULTRES and returns.
    //| ct ctpr1
    //|
    //|//-----------------------------------------------------------------------
    //|//-- Grow stack for calls -----------------------------------------------
    //|//-----------------------------------------------------------------------
    //|
    //|->vm_growstack_c:                      // Grow stack for C function.
    dasm_put(Dst, 173, Dt1(->maxstack), LJ_TNIL, Dt1(->top), Dt1(->top), Dt1(->glref), ~LJ_VMST_C, Dt2(->vmstate), CFRAME_RAWMASK, (1+1)*8, Dt1(->base), Dt1(->glref), GG_G2DISP, ~LJ_VMST_INTERP, DISPATCH_GL(vmstate));
#line 437 "vm_e2k.dasc"
    //| addd 0, 0x0, LUA_MINSTACK, CARG2
    //| disp ctpr1, >2
    //| ct ctpr1
    //|
    //|->vm_growstack_v:                      // Grow stack for vararg Lua function.
    //| subd 0, RD, 0x10, RD                     // LJ_FR2
    //| disp ctpr1, >1
    //| ct ctpr1
    //|
    //|->vm_growstack_f:                      // Grow stack for fixarg Lua function.
    //| // BASE = new base, RD = (nargs+1)*8, RB = L, PC = first PC
    //| addd 0, BASE, RD, RD
    //| subd 0, RD, 0x8, RD
    //|1:
    //| ldb 0, PC, PC2PROTO(framesize)-4, RA
    //| addd 0, PC, 0x4, PC                      // Must point after first instruction.
    //| std 2, RB, L->base, BASE
    //| std 2, RB, L->top, RD
    //| std 2, STACK, SAVE_PC, PC
    //| addd 0, RA, 0x0, CARG2
    //|2:
    //| // RB = L, L->base = new base, L->top = top 
    //| addd 0, RB, 0x0, CARG1
    //| disp ctpr1, extern lj_state_growstack // (lua_State *L, int n)
    //| call ctpr1, wbs = 0x8
    //| ldd 0, RB, L->base, BASE
    //| ldd 0, RB, L->top, RD
    //| ldd 0, BASE, 0xfffffff0, RB
    //| cleartp RB
    //| subd 0, RD, BASE, RD
    //| addd 0, RD, 0x8, RD
    //|
    //| // BASE = new base, RB = LFUNC, RD = (nargs+1)*8
    //| ins_callt                             // Just retry the call
    //|
    //|//-----------------------------------------------------------------------
    //|//-- Entry points into the assembler VM ---------------------------------
    //|//-----------------------------------------------------------------------
    //|
    //|->vm_resume:                           // Setup C frame and resume thread.
    //| // (lua_State *L, TValue *base, int nres1 = 0, ptrdiff_t ef = 0)
    //| set_frame
    //| addd 0, RARG1, 0x0, RB
    //| getsp 0, STACK_SPACE, STACK
    //| std 2, STACK, SAVE_L, RARG1
    //| addd 0, RARG2, 0x0, RA
    //| addd 0, 0x0, FRAME_CP, PC
    //| addd 0, 0x0, 0x0, RD
    //| addd 0, STACK, CFRAME_RESUME, KBASE
    //| ldd 0, RB, L->glref, DISPATCH            // Setup pointer to dispatch table.
    //| addd 0, DISPATCH, GG_G2DISP, DISPATCH
    //| std 2, STACK, SAVE_PC, RD                // Any value outside of bytecode is ok.
    //| std 2, STACK, SAVE_CFRAME, RD
    //| stw 2, STACK, SAVE_NRES, RD
    //| stw 2, STACK, SAVE_ERRF, RD
    //| std 2, RB, L->cframe, KBASE
    //| ldb 0, RB, L->status, TMP0
    //| cmpedb 0, TMP0, 0x0, pred0
    //| disp ctpr1, >2
    //| ct ctpr1, pred0                       // Initial resume (like a call).
    //| 
    //| // Resume after yield (like a return).
    //| std 2, DISPATCH, DISPATCH_GL(cur_L), RB
    //| set_vmstate INTERP
    //| stb 2, RB, L->status, RD
    //| ldd 0, RB, L->base, BASE
    //| ldd 0, RB, L->top, RD
    //| subd 0, RD, RA, RD
    //| addd 0, RD, 0x8, RD                      // RD = (nresults+1)*8
    //| subd 0, RA, BASE, RA                     // RA = resultofs
    //| ldd 0, BASE, 0xfffffff8, PC
    //| stw 2, STACK, MULTRES, RD
    //| cmpandesb 0, PC, FRAME_TYPE, pred0
    //| disp ctpr1, ->BC_RET_Z
    //| ct ctpr1, pred0
    //| disp ctpr1, ->vm_return
    //| ct ctpr1
    //|
    //|->vm_pcall:                            // Setup protected C frame and enter VM.
    dasm_put(Dst, 371, LUA_MINSTACK, PC2PROTO(framesize)-4, Dt1(->base), Dt1(->top), Dt1(->base), Dt1(->top), Dt7(->pc), FRAME_CP, CFRAME_RESUME, Dt1(->glref), GG_G2DISP, Dt1(->cframe), Dt1(->status), DISPATCH_GL(cur_L), ~LJ_VMST_INTERP, DISPATCH_GL(vmstate), Dt1(->status), Dt1(->base), Dt1(->top), FRAME_TYPE);
#line 516 "vm_e2k.dasc"
    //| // (lua_State *L, TValue *base, int news1, ptrdiff_t ef)
    //| set_frame
    //| addd 0, 0x0, FRAME_CP, PC
    //| getsp 0, STACK_SPACE, STACK
    //| stw 2, STACK, SAVE_ERRF, RARG4
    //| disp ctpr1, >1
    //| ct ctpr1
    //|
    //|->vm_call:                             // Setup C frame and enter VM.
    //| // (lua_State *L, TValue *base, int nres1)
    //| set_frame
    //| getsp 0, STACK_SPACE, STACK
    //| addd 0, 0x0, FRAME_C, PC
    //|
    //|1: // Entry point for vm_pcall above (PC = ftype)
    //| stw 2, STACK, SAVE_NRES, RARG3
    //| std 2, STACK, SAVE_L, RARG1
    //| addd 0, RARG1, 0x0, RB
    //| addd 0, RARG2, 0x0, RA
    //| ldd 0, RB, L->glref, DISPATCH            // Setup pointer to dispatch table.
    //| ldd 0, RB, L->cframe, KBASE              // Add our C frame to cframe chain.
    //| std 2, STACK, SAVE_CFRAME, KBASE
    //| std 2, STACK, SAVE_PC, RB                // Any value outsize of bytecode is ok.
    //| addd 0, DISPATCH, GG_G2DISP, DISPATCH
    //| std 2, RB, L->cframe, STACK
    //|
    //|2: // Entry point for vm_resume/vm_cpcall (RA = base, RB = L, PC = ftype)
    //|<
    //| addd 0, PC, RA, PC
    //| addd 1, 0x0, ~LJ_VMST_INTERP, TMP0
    //| ldd 3, RB, L->base, BASE              // BASE = old base (used in vmeta_call).
    //| ldd 5, RB, L->top, RD
    //| disp ctpr1,  ->vmeta_call
    //|>
    //|<
    //| std 2, DISPATCH, DISPATCH_GL(cur_L), RB
    //|>
    //|<
    //| ldd 0, RA, 0xfffffff0, RB             // RB = LFUNC
    //| stw 2, DISPATCH, DISPATCH_GL(vmstate), TMP0
    //| nop 1
    //|>
    //|<
    //| subd 0, PC, BASE, PC                  // PC = frame delta + frame type
    //| addd 3, RA, 0x0, CARG2
    //|>
    //|<
    //| sard 0, RB, 0x2f, ITYPE
    //| andd 1, RB, U64x(0x00007fff,0xffffffff), RB
    //| subd 3, RD, CARG2, RD
    //|>
    //|<
    //| lddsm 0, RB, LFUNC->pc, CARG1
    //| cmpesb 1, ITYPE, LJ_TFUNC, pred0
    //| addd 3, RD, 0x8, RD                   // RD = (nargs+1)*8
    //| nop 1
    //|>
    //|<
    //| addd 3, CARG2, 0x0, BASE, pred0       // BASE = new base
    //| ct ctpr1, ~pred0
    //|>
    //|<
    //| ldb 2, CARG1, 0x0, TMP1
    //| ldw 3, CARG1, 0x0, RA
    //| nop 2
    //|>
    //|<
    //| shld 0, TMP1, 0x3, TMP1               // jmp to [DISPATCH+OP*8]
    //| std 2, BASE, 0xfffffff8, PC           // [BASE-8] = PC
    //|>
    //|<
    //| ldd 0, TMP1, DISPATCH, TMP1
    //| addd 1, CARG1, 0x4, PC
    //| shrd 3, RA, 0x5, RA
    //| nop 2
    //|>
    //|<
    //| movtd 0, TMP1, ctpr1
    //| andd 3, RA, 0x7f8, RA
    //|>
    //| ct ctpr1
    //|
    //|->vm_cpcall:                           // Setup protected C frame, call C.
    //| // (lua_State *L, lua_CFunction func, void *ud, lua_CPFunction cp)
    //|<
    //| setwd wsz = 0xc, nfx = 0x1, dbl = 0x0
    //| setbn rsz = 0x3, rbs = 0x8, rcur = 0x0
    //|>
    //|<
    //| getsp 0, STACK_SPACE, STACK
    //| addd 1, RARG1, 0x0, RB
    //| ldd 2, RARG1, L->top, TMP1
    //|>
    //|<
    //| ldd 0, RB, L->stack, TMP0
    //| ldd 2, RB, L->glref, DISPATCH         // Setup pointer to dispatch table.
    //| nop 1
    //|>
    //|<
    //| movtd 0, RARG4, ctpr1
    //| std 2, STACK, SAVE_L, RB
    //|>
    //|<
    //| subd 0, TMP0, TMP1, TMP0
    //| addd 1, 0x0, 0x0, TMP1
    //| std 2, STACK, SAVE_PC, RB
    //|>
    //|<
    //| addd 0, DISPATCH, GG_G2DISP, DISPATCH
    //| stw 2, STACK, SAVE_ERRF, TMP1         // No error function.
    //|>
    //|<
    //| ldd 0, RB, L->cframe, TMP0
    //| stw 2, STACK, SAVE_NRES, TMP0         // Neg. delta means cframe w/o frame.
    //|>
    //|<
    //| addd 0, RARG1, 0x0, CARG1
    //| std 2, STACK, SAVE_CFRAME, TMP0
    //|>
    //|<
    //| addd 0, RARG2, 0x0, CARG2
    //| std 2, RB, L->cframe, STACK
    //|>
    //|<
    //| addd 0, RARG3, 0x0, CARG3
    //| std 2, DISPATCH, DISPATCH_GL(cur_L), RB
    //| call ctpr1, wbs = 0x8                 // (lua_State *L, lua_CFunction func, void *ud)
    //|>
    //| // TValue * (new base) or NULL returned.
    //| lddsm 0, STACK, SAVE_CFRAME, TMP0     // Restore previous C frame.
    //| disp ctpr1, <2
    //| nop 1
    //|<
    //| cmpedb 1, CRET1, 0x0, pred0
    //| return ctpr3
    //|>
    //|<
    //| addd 0, 0x0, 0x0, RRET1, pred0        // Ok return status for vm_pcall.
    //| std 2, RB, L->cframe, TMP0, pred0
    //|>
    //| ct ctpr3, pred0
    //|<
    //| addd 0, CRET1, 0x0, RA
    //| addd 1, 0x0, FRAME_CP, PC
    //| ct ctpr1                              // Else continue with the call.
    //|>
    //|
    //|//-----------------------------------------------------------------------
    //|//-- Metamethod handling ------------------------------------------------
    //|//-----------------------------------------------------------------------
    //|
    //|//-- Continuation dispatch ----------------------------------------------
    //|
    //|->cont_dispatch:
    dasm_put(Dst, 612, FRAME_CP, FRAME_C, Dt1(->glref), Dt1(->cframe), GG_G2DISP, Dt1(->cframe), Dt1(->top), Dt1(->base), ~LJ_VMST_INTERP, DISPATCH_GL(cur_L), DISPATCH_GL(vmstate), LJ_TFUNC, Dt7(->pc), Dt1(->top), Dt1(->glref), Dt1(->stack), GG_G2DISP, Dt1(->cframe), Dt1(->cframe), DISPATCH_GL(cur_L), Dt1(->cframe), FRAME_CP);
#line 670 "vm_e2k.dasc"
    //| // BASE = meta base, RA = resultofs, RD = (nresults+1)*8 (also in MULTRES)
    //| addd 0, BASE, RA, RA
    //| andd 0, PC, 0xfffffff8, PC
    //| addd 0, BASE, 0x0, RB
    //| subd 0, BASE, PC, BASE                   // Restore caller BASE.
    //| addd 0, 0x0, LJ_TNIL, TMP0
    //| addd 0, RA, RD, TMP1
    //| std 2, TMP1, 0xfffffff8, TMP0            // Ensure one valid arg.
    //| addd 0, RA, 0x0, CRET1
    //| ldd 0, RB, 0xffffffe8, PC                // Restore PC from [cont|PC].
    //| ldd 0, RB, 0xffffffe0, RA
    //|.if FFI
    //| cmpbedb 0, RA, 0x1, pred0
    //| disp ctpr1, >1
    //| ct ctpr1, pred0
    //|.endif
    //| ldd 0, BASE, 0xfffffff0, KBASE
    //| cleartp KBASE
    //| ldd 0, KBASE, LFUNC->pc, KBASE
    //| ldd 0, KBASE, PC2PROTO(k), KBASE
    //| // BASE = base, CRET1 = result, RB = meta base
    //| movtd 0, RA, ctpr1
    //| ct ctpr1                              // Jump to continuation.
    //|
    //|.if FFI
    //|1:
    //| cmpedb 0, RA, 0x1, pred0
    //| disp ctpr1, ->cont_ffi_callback       // cont = 1: return from FFI callback.
    //| ct ctpr1, pred0
    //| // cont = 0: Tail call from C function.
    //| subd 0, RB, BASE, RB
    //| subd 0, RB, 0x18, RD
    //| disp ctpr1, ->vm_call_tail
    //| ct ctpr1
    //|.endif
    //|
    //|->cont_cat:                            // BASE = base, CRET1 = result, RB = mbase
    //| ldb 0, PC, PC_RB, RA
    //| subd 0, RB, 0x20, RB
    //| shld 0, RA, 0x3, RA
    //| addd 0, BASE, RA, RA
    //| subd 0, RA, RB, RA
    //| cmpedb 0, RA, 0x0, pred0
    //| disp ctpr1, ->cont_ra
    //| ct ctpr1, pred0
    //| subd 0, 0x0, RA, RA
    //| shrd 0, RA, 0x3, RA
    //| addd 0, RA, 0x0, CARG3
    //| ldd 0, CRET1, 0x0, RA
    //| std 2, RB, 0x0, RA
    //| addd 0, RB, 0x0, CARG2
    //| ldd 0, STACK, SAVE_L, CARG1
    //| std 2, CARG1, L->base, BASE
    //| disp ctpr1, ->BC_CAT_Z
    //| ct ctpr1
    //|
    //|//-- Table indexing metamethods -----------------------------------------
    //|
    //|->vmeta_tgets:
    //| settp RC, LJ_TSTR                     // RC = GCstr *
    //| addd 0, DISPATCH, DISPATCH_GL(tmptv), TMP0 // Store GStr * in g->tmptv
    //| std 2, TMP0, 0x0, RC
    //| addd 0, TMP0, 0x0, RC
    //| ldb 0, PC, PC_OP, TMP1
    //| cmpedb 0, TMP1, BC_GGET, pred0
    //| disp ctpr1, >1
    //| ct ctpr1, ~pred0
    //| settp RA, RB, LJ_TTAB                 // RB = GCtab *
    //| addd 0, DISPATCH, DISPATCH_GL(tmptv2), RB // Store fn->l.env in g->tmptv2.
    //| std 2, RB, 0x0, RA
    //| disp ctpr1, >2
    //| ct ctpr1
    //|
    //|->vmeta_tgetb:
    //| ldb 0, PC, PC_RC, RC
    //| istofd 0, RC, TMP0
    //| addd 0, DISPATCH, DISPATCH_GL(tmptv), RC
    //| std 2, RC, 0x0, TMP0
    //| disp ctpr1, >1
    //| ct ctpr1
    //|
    //|->vmeta_tgetv:
    //| ldb 0, PC, PC_RC, RC                     // Reload TValue *k from RC.
    //| shld 0, RC, 0x3, RC
    //| addd 0, BASE, RC, RC
    //|1:
    dasm_put(Dst, 847, LJ_TNIL, Dt7(->pc), PC2PROTO(k), Dt1(->base), LJ_TSTR, DISPATCH_GL(tmptv), BC_GGET, LJ_TTAB, DISPATCH_GL(tmptv2), DISPATCH_GL(tmptv));
#line 756 "vm_e2k.dasc"
    //| ldb 0, PC, PC_RB, RB                     // Reload TValue *t from RB.
    //| shld 0, RB, 0x3, RB
    //| addd 0, BASE, RB, RB
    //|2:
    //| ldd 0, STACK, SAVE_L, CARG1
    //| std 2, CARG1, L->base, BASE
    //| addd 0, RB, 0x0, CARG2
    //| addd 0, RC, 0x0, CARG3
    //| addd 0, CARG1, 0x0, RB
    //| std 2, STACK, SAVE_PC, PC
    //| disp ctpr1, extern lj_meta_tget       // (lua_State *L, TValue *o, TValue *k)
    //| call ctpr1, wbs = 0x8
    //| // TValue * (finished) or NULL (metamethod) returned.
    //| ldd 0, RB, L->base, BASE
    //| cmpedb 0, CRET1, 0x0, pred0
    //| disp ctpr1, >3
    //| ct ctpr1, pred0
    //|
    //|->cont_ra:                             // BASE = base, CRET1 = result
    //| ldb 0, PC, PC_RA, RA
    //| shld 0, RA, 0x3, RA
    //| ldd 0, CRET1, 0x0, RB
    //| std 2, BASE, RA, RB
    //| ins_next
    //|
    //|3:                                     // Call __index metamethod. 
    //| // BASE = base, L->top = new base, stack = cont/func/t/k
    //| ldd 0, RB, L->top, RA
    //| std 2, RA, 0xffffffe8, PC                // [RA-24] cont|PC
    //| addd 0, RA, FRAME_CONT, PC
    //| subd 0, PC, BASE, PC
    //| ldd 0, RA, 0xfffffff0, RB                // [RA-16] Guaranteed to be a function here.
    //| addd 0, 0x0, (2+1)*8, RD                 // (2+1)*8 args for func(t, k)
    //| cleartp RB
    //| addd 0, RA, 0x0, BASE
    //| ins_call
    //| // BASE = new base, RB = func, RD = (nargs+1)*8, PC = caller PC
    //|
    //|->vmeta_tgetr:
    //| addd 0, RB, 0x0, CARG1
    //| adds 0, RC, 0x0, CARG2
    //| disp ctpr1, extern lj_tab_getinth     // // (GCtab *t, int32_t key)
    //| call ctpr1, wbs = 0x8
    //| // cTValue * or NULL returned.
    //| ldb 0, PC, PC_RA, RA
    //| shld 0, RA, 0x3, RA
    //| cmpedb 0, CRET1, 0x0, pred0
    //| disp ctpr1, >1
    //| ct ctpr1, ~pred0
    //| addd 0, 0x0, LJ_TNIL, ITYPE
    //| disp ctpr1, >2
    //| ct ctpr1
    //|1:
    //| ldd 0, CRET1, 0x0, ITYPE
    //|2:
    //| std 2, BASE, RA, ITYPE
    //| ins_next
    //|
    //|//-----------------------------------------------------------------------
    //|
    //|->vmeta_tsets:
    //| settp RC, LJ_TSTR                     // STR:RC = GCstr *
    //| std 2, STACK, STACK_TMP, RC
    //| addd 0, STACK, STACK_TMP, RC
    //| ldb 0, PC, PC_OP, TMP0
    //| cmpedb 0, TMP0, BC_GSET, pred0
    //| disp ctpr1, >1
    //| ct ctpr1, ~pred0
    //| settp RA, RB, LJ_TTAB                 // RB = GCtab *
    //| addd 0, DISPATCH, DISPATCH_GL(tmptv), RB // Store fn->l.env in g->tmptv
    //| std 2, RB, 0x0, RA
    //| disp ctpr1, >2
    //| ct ctpr1
    //|
    //|->vmeta_tsetb:
    dasm_put(Dst, 1066, Dt1(->base), Dt1(->base), Dt1(->top), FRAME_CONT, (2+1)*8, Dt7(->pc), LJ_TNIL, LJ_TSTR, BC_GSET, LJ_TTAB, DISPATCH_GL(tmptv));
#line 831 "vm_e2k.dasc"
    //| ldb 0, PC, PC_RC, RC
    //| istofd 0, RC, RC
    //| std 2, STACK, STACK_TMP, RC
    //| addd 0, STACK, STACK_TMP, RC
    //| disp ctpr1, >1
    //| ct ctpr1
    //|
    //|->vmeta_tsetv:
    //| ldb 0, PC, PC_RC, RC                     // Reload TValue *k from RC.
    //| shld 0, RC, 0x3, RC
    //| addd 0, BASE, RC, RC
    //|1:
    //| ldb 0, PC, PC_RB, RB                     // Reload TValue *t from RB.
    //| shld 0, RB, 0x3, RB
    //| addd 0, BASE, RB, RB
    //|2:
    //| ldd 0, STACK, SAVE_L, CARG1
    //| std 2, CARG1, L->base, BASE
    //| addd 0, RB, 0x0, CARG2
    //| addd 0, RC, 0x0, CARG3
    //| addd 0, CARG1, 0x0, RB
    //| std 2, STACK, SAVE_PC, PC
    //| disp ctpr1, extern lj_meta_tset      // (lua_State *L, TValue *o, TValue *k)
    //| call ctpr1, wbs = 0x8
    //| // TValue * (finished) or NULL (metamethod) returned.
    //| ldd 0, RB, L->base, BASE
    //| cmpedb 0, CRET1, 0x0, pred0
    //| disp ctpr1, >3
    //| ct ctpr1, pred0
    //| // NOBARRIER: lj_meta_tset ensures the table is not black.
    //| ldb 0, PC, PC_RA, RA
    //| shld 0, RA, 0x3, RA
    //| ldd 0, BASE, RA, RB
    //| std 2, CRET1, 0x0, RB
    //|->cont_nop:                            // BASE = base, (CRET1 = result)
    //| ins_next
    //|
    //|3: // Call __newindex metamethod
    //| // BASE = base, L->top = new base, stack = cont/func/t/k/(v)
    //| ldd 0, RB, L->top, RA
    //| std 2, RA, 0xffffffe8, PC                // [cont|PC]
    //| ldb 0, PC, PC_RA, RC
    //| // Copy value to third argument.
    //| shld 0, RC, 0x3, RC
    //| ldd 0, BASE, RC, RB
    //| std 2, RA, 0x10, RB
    //| addd 0, RA, FRAME_CONT, PC
    //| subd 0, PC, BASE, PC
    //| ldd 0, RA, 0xfffffff0, RB                // Guaranteed to be a function here.
    //| addd 0, 0x0, (3+1)*8, RD                 // 3 args for func (t, k, v)
    //| cleartp RB
    //| addd 0, RA, 0x0, BASE
    //| ins_call
    //| // BASE = new base, RB = func, RD = (nargs+1)*8, PC = caller PC
    //|
    //|->vmeta_tsetr:
    //| ldd 0, STACK, SAVE_L, CARG1
    //| addd 0, RB, 0x0, CARG2
    //| std 2, CARG1, L->base, BASE
    //| adds 0, RC, 0x0, CARG3
    //| std 2, STACK, SAVE_PC, PC
    //| disp ctpr1, extern lj_tab_setinth     // (lua_State *L, GCtab *t, int32_t key)
    //| call ctpr1, wbs = 0x8
    //| // TValue * returned.
    //| ldb 0, PC, PC_RA, RA
    //| shld 0, RA, 0x3, RA
    //| ldd 0, BASE, RA, ITYPE
    //| std 2, CRET1, 0x0, ITYPE
    //| ins_next
    //|
    //|//-- Comparison metamethods ---------------------------------------------
    //|
    //|->vmeta_comp:
    //| ldh 0, PC, PC_RD, RD
    //| shld 0, RD, 0x3, RD
    //| ldb 0, PC, PC_RA, RA
    //| shld 0, RA, 0x3, RA
    //| ldd 0, STACK, SAVE_L, RB
    //| std 2, RB, L->base, BASE
    //| addd 0, BASE, RA, CARG2
    //| addd 0, BASE, RD, CARG3
    //| addd 0, RB, 0x0, CARG1
    //| ldb 0, PC, PC_OP, CARG4
    //| std 2, STACK, SAVE_PC, PC
    //| disp ctpr1, extern lj_meta_comp       // (lua_State *L, TValue *o1, *o2, int op)
    //| call ctpr1, wbs = 0x8
    //| // 0/1 or TValue * (metamethod) returned.
    //|3:
    //| ldd 0, RB, L->base, BASE
    //| cmpbedb 0, CRET1, 0x1, pred0
    //| disp ctpr1, ->vmeta_binop
    //| ct ctpr1, ~pred0
    //|4:
    dasm_put(Dst, 1343, Dt1(->base), Dt1(->base), Dt1(->top), FRAME_CONT, (3+1)*8, Dt7(->pc), Dt1(->base), Dt1(->base), Dt1(->base));
#line 924 "vm_e2k.dasc"
    //| addd 0, PC, 0x4, PC
    //| cmpbdb 0, CRET1, 0x1, pred0
    //| disp ctpr1, >6
    //| ct ctpr1, pred0
    //|5:
    //| ldh 0, PC, PC_RD, RD
    //| branchPC RD
    //|6:
    //| ins_next
    //|
    //|->cont_condt:
    //| // BASE = base, CRET1 = result
    //| addd 0, PC, 0x4, PC
    //| ldd 0, CRET1, 0x0, ITYPE
    //| sard 0, ITYPE, 0x2f, ITYPE
    //| cmpbsb 0, ITYPE, LJ_TISTRUECOND, pred0
    //| disp ctpr1, <5                        // Branch if result is true.
    //| ct ctpr1, pred0
    //| disp ctpr1, <6
    //| ct ctpr1
    //|
    //|->cont_condf:                          // BASE = base, CRET1 = result
    //| addd 0, PC, 0x4, PC
    //| ldd 0, CRET1, 0x0, ITYPE
    //| sard 0, ITYPE, 0x2f, ITYPE
    //| cmpbsb 0, ITYPE, LJ_TISTRUECOND, pred0   // Branch if result is false.
    //| disp ctpr1, <6
    //| ct ctpr1, pred0
    //| disp ctpr1, <5
    //| ct ctpr1
    //|
    //|->vmeta_equal:
    //| cleartp RD
    //| subd 0, PC, 0x4, PC
    //| addd 0, RA, 0x0, CARG2
    //| addd 0, RB, 0x0, CARG4
    //| ldd 0, STACK, SAVE_L, RB
    //| std 2, RB, L->base, BASE
    //| addd 0, RD, 0x0, CARG3
    //| addd 0, RB, 0x0, CARG1
    //| std 2, STACK, SAVE_PC, PC
    //| disp ctpr1, extern lj_meta_equal      // (lua_State *L, GCobj *o1, *o2, int ne)
    //| call ctpr1, wbs = 0x8
    //| // 0/1 or TValue * (metamethod) returned.
    //| disp ctpr1, <3
    //| ct ctpr1
    //|
    //|->vmeta_equal_cd:
    //|.if FFI
    //| subd 0, PC, 0x4, PC
    //| ldd 0, STACK, SAVE_L, RB
    //| std 2, RB, L->base, BASE
    //| addd 0, RB, 0x0, CARG1
    //| ldw 0, PC, 0xfffffffc, CARG2
    //| std 2, STACK, SAVE_PC, PC
    //| disp ctpr1, extern lj_meta_equal_cd   // (lua_State *L, BCIns ins)
    //| call ctpr1, wbs = 0x8
    //| // 0/1 or TValue * (metamethod) returned.
    //| disp ctpr1, <3
    //| ct ctpr1
    //|.endif
    //|
    //|->vmeta_istype:
    //| ldd 0, STACK, SAVE_L, RB
    //| std 2, RB, L->base, BASE
    //| shrd 0, RD, 0x3, CARG3
    //| shrd 0, RA, 0x3, CARG2
    //| addd 0, RB, 0x0, CARG1
    //| std 2, STACK, SAVE_PC, PC
    //| disp ctpr1, extern lj_meta_istype     // (lua_State *L, BCReg ra, BCReg tp)
    //| call ctpr1, wbs = 0x8
    //| ldd 0, RB, L->base, BASE
    //| disp ctpr1, <6
    //| ct ctpr1
    //|
    //|//-- Arithmetic metamethods ---------------------------------------------
    //|
    //|->vmeta_arith_vn:
    dasm_put(Dst, 1654, BCBIAS_J*4, LJ_TISTRUECOND, LJ_TISTRUECOND, Dt1(->base), Dt1(->base), Dt1(->base), Dt1(->base));
#line 1002 "vm_e2k.dasc"
    //| addd 0, KBASE, RC, RC
    //| disp ctpr1, >1
    //| ct ctpr1
    //|
    //|->vmeta_arith_nv:
    //| addd 0, KBASE, RC, TMP0
    //| addd 0, BASE, RB, RC
    //| addd 0, TMP0, 0x0, RB
    //| disp ctpr1, >2
    //| ct ctpr1
    //|
    //|->vmeta_unm:
    //| addd 0, BASE, RD, RC
    //| addd 0, RC, 0x0, RB
    //| disp ctpr1, >2
    //| ct ctpr1
    //|
    //|->vmeta_arith_vv:
    //| addd 0, BASE, RC, RC
    //|1:
    //| addd 0, BASE, RB, RB
    //|2:
    //| addd 0, BASE, RA, RA
    //| ldb 0, PC, PC_OP, CARG5
    //| addd 0, RA, 0x0, CARG2
    //| addd 0, RC, 0x0, CARG4
    //| ldd 0, STACK, SAVE_L, CARG1
    //| std 2, CARG1, L->base, BASE
    //| addd 0, RB, 0x0, CARG3
    //| addd 0, CARG1, 0x0, RB
    //| std 2, STACK, SAVE_PC, PC
    //| disp ctpr1, extern lj_meta_arith      // (lua_State *L, TValue *ra, *rb, *rc, BCReg op)
    //| call ctpr1, wbs = 0x8
    //| // NULL (finished) or TValue * (metamethod) returned.
    //| ldd 0, RB, L->base, BASE
    //| cmpedb 0, CRET1, 0x0, pred0
    //| disp ctpr1, ->cont_nop
    //| ct ctpr1, pred0
    //|
    //| // Call metamethod for binary op.
    //|->vmeta_binop:
    //| // BASE = old base, CRET1 = new base, stack = cont/func/o1/o2
    //| addd 0, CRET1, 0x0, RA
    //| subd 0, CRET1, BASE, CRET1
    //| std 2, RA, 0xffffffe8, PC                // [cont|PC]
    //| addd 0, CRET1, FRAME_CONT, PC
    //| addd 0, 0x0, (2+1)*8, RD                 // 2 args for func(o1, o2).
    //| // BASE = old base, RA = new base, RD = (nargs+1)*8, PC = caller PC
    //| ldd 0, RA, 0xfffffff0, RB
    //| checkfunc RB, ->vmeta_call
    //| addd 0, RA, 0x0, BASE
    //| ins_call
    //|
    //|->vmeta_len:
    //| ldh 0, PC, PC_RD, RD
    //| shld 0, RD, 0x3, RD
    //| ldd 0, STACK, SAVE_L, RB
    //| std 2, RB, L->base, BASE
    //| addd 0, BASE, RD, CARG2
    //| addd 0, RB, 0x0, CARG1
    //| std 2, STACK, SAVE_PC, PC
    //| disp ctpr1, extern lj_meta_len        // (lua_State *L, TValue *o)
    //| call ctpr1, wbs = 0x8
    //| // NULL (retry) or TValue * (metamethod) returned.
    //| ldd 0, RB, L->base, BASE
    dasm_put(Dst, 1869, Dt1(->base), Dt1(->base), FRAME_CONT, (2+1)*8, LJ_TFUNC, Dt7(->pc), Dt1(->base), Dt1(->base));
#line 1067 "vm_e2k.dasc"
#if LJ_52
    //| cmpedb 0, CRET1, 0x0, pred0
    //| disp ctpr1, ->vmeta_binop             // Binop call for compatibility.
    //| ct ctpr1, ~pred0
    //| ldh 0, PC, PC_RD, RD
    //| shld 0, RD, 0x3, RD
    //| ldd 0, BASE, RD, CARG1
    //| cleartp CARG1
    //| disp ctpr1, ->BC_LEN_Z
    //| ct ctpr1
    dasm_put(Dst, 2069);
#line 1077 "vm_e2k.dasc"
#else
    //| disp ctpr1, ->vmeta_binop             // Binop call for compatibility.
    //| ct ctpr1
    dasm_put(Dst, 2098);
#line 1080 "vm_e2k.dasc"
#endif
    //|
    //|//-- Call metamethod ----------------------------------------------------
    //|
    //|->vmeta_call:                          // Resolve and call __call metamethod.
    //| // BASE = old base, RA = new base, RD = (nargs+1)*8
    //| ldd 0, STACK, SAVE_L, CARG1
    //| std 2, CARG1, L->base, BASE
    //| subd 0, RA, 0x10, CARG2
    //| addd 0, RA, RD, CARG3
    //| subd 0, CARG3, 0x8, CARG3
    //| std 2, STACK, SAVE_PC, PC
    //| disp ctpr1, extern lj_meta_call       // (lua_State *L, TValue *func, TValue *top)
    //| call ctpr1, wbs = 0x8
    //| ldd 0, STACK, SAVE_L, RB
    //| ldd 0, RB, L->base, BASE
    //| ldd 0, RA, 0xfffffff0, RB
    //| addd 0, RD, 0x8, RD
    //| // This is fragile. L->base must not move, KBASE must always be defined.
    //| cmpedb 0, KBASE, BASE, pred0
    //| disp ctpr1, ->BC_CALLT_Z              // Continue with CALLT if flag set.
    //| ct ctpr1, pred0
    //| cleartp RB
    //| addd 0, RA, 0x0, BASE
    //| ins_call                              // Otherwise call resolved metamethod.
    //|
    //|//-- Argument coercion for 'for' statement ------------------------------
    //|
    //|->vmeta_for:
    //| ldd 0, STACK, SAVE_L, RB
    //| std 2, RB, L->base, BASE
    //| addd 0, RA, 0x0, CARG2
    //| addd 0, RB, 0x0, CARG1
    //| std 2, STACK, SAVE_PC, PC
    //| disp ctpr1, extern lj_meta_for        // (lua_State *L, TValue *base)
    //| call ctpr1, wbs = 0x8
    //| ldd 0, RB, L->base, BASE
    //| ldw 0, PC, 0xfffffffc, TMP0
    //| shrd 0, TMP0, 0x5, RA
    //| andd 0, RA, 0x7f8, RA
    //| andd 0, TMP0, 0xff, TMP1
    //| shld 0, TMP1, 0x3, TMP1
    //| addd 0, DISPATCH, TMP1, TMP1
    //| ldd 0, TMP1, GG_DISP2STATIC, TMP1
    //| movtd 0, TMP1, ctpr1
    //| ct ctpr1
    //|
    //|//-----------------------------------------------------------------------
    //|//-- Fast functions -----------------------------------------------------
    //|//-----------------------------------------------------------------------
    //|
    //|.macro .ffunc, name
    //|->ff_ .. name:
    //|.endmacro
    //|
    //|.macro .ffunc_1, name
    //|->ff_ .. name:
    //| cmpbdb 0, RD, (1+1)*8, pred0
    //| disp ctpr1, ->fff_fallback
    //| ct ctpr1, pred0
    //|.endmacro
    //|
    //|.macro .ffunc_2, name
    //|->ff_ .. name:
    //| cmpbdb 0, RD, (2+1)*8, pred0
    //| disp ctpr1, ->fff_fallback
    //| ct ctpr1, pred0
    //|.endmacro
    //|
    //|.macro .ffunc_n, name
    //| .ffunc_1 name
    //| ldd 0, BASE, 0x0, CARG1
    //| checknumtp CARG1, ->fff_fallback
    //|.endmacro
    //|
    //|.macro .ffunc_nn, name
    //| .ffunc_2 name
    //| ldd 0, BASE, 0x0, CARG1
    //| checknumtp CARG1, ->fff_fallback
    //| ldd 0, BASE, 0x8, CARG2
    //| checknumtp CARG2, ->fff_fallback
    //|.endmacro
    //|
    //|// Inlined GC threshold check.
    //|.macro ffgccheck
    //| ldd 0, DISPATCH, DISPATCH_GL(gc.total), RB
    //| ldd 0, DISPATCH, DISPATCH_GL(gc.threshold), TMP0
    //| cmpbdb 0, RB, TMP0, pred0
    //| disp ctpr1, >1
    //| ct ctpr1, pred0
    //|
    //| ldd 0, STACK, SAVE_L, RB
    //| std 2, STACK, SAVE_PC, PC
    //| std 2, RB, L->base, BASE
    //| addd 0, BASE, RD, RD
    //| subd 0, RD, 0x8, RD
    //| addd 0, RB, 0x0, CARG1
    //| std 2, RB, L->top, RD
    //| disp ctpr1, extern lj_gc_step         // (lua_State *L)
    //| call ctpr1, wbs = 0x8
    //| ldd 0, RB, L->base, BASE
    //| ldd 0, RB, L->top, RD
    //| subd 0, RD, BASE, RD
    //| addd 0, RD, 0x8, RD
    //|1:
    //|.endmacro
    //|
    //|//-- Base library: checks -----------------------------------------------
    //|
    //|.ffunc_1 assert
    //| ldd 0, BASE, 0x0, ITYPE
    //| addd 0, ITYPE, 0x0, RB
    //| sard 0, ITYPE, 0x2f, ITYPE
    //| cmpbsb 0, ITYPE, LJ_TISTRUECOND, pred0
    //| disp ctpr1, ->fff_fallback
    //| ct ctpr1, ~pred0
    //| ldd 0, BASE, 0xfffffff8, PC
    //| stw 2, STACK, MULTRES, RD
    //| std 2, BASE, 0xfffffff0, RB
    //| subd 0, RD, 0x10, RD
    //| cmpedb 0, RD, 0x0, pred0
    //| disp ctpr1, >2
    //| ct ctpr1, pred0
    //| addd 0, BASE, 0x0, RA
    //|1:
    //| addd 0, RA, 0x8, RA
    //| ldd 0, RA, 0x0, RB
    //| std 2, RA, 0xfffffff0, RB
    //| subd 0, RD, 0x8, RD
    //| cmpedb 0, RD, 0x0, pred0
    //| disp ctpr1, <1
    //| ct ctpr1, ~pred0
    //|2:
    //| ldw 0, STACK, MULTRES, RD
    //| disp ctpr1, ->fff_res
    //| ct ctpr1
    //|
    //|.ffunc_1 type
    //| ldd 0, BASE, 0x0, RC
    //| sard 0, RC, 0x2f, RC
    //| adds 0, 0x0, LJ_TISNUM, RB
    //| cmpbsb 0, RC, RB, pred0
    //| disp ctpr1, >1
    //| ct ctpr1, ~pred0
    //| adds 0, RB, 0x0, RC
    //|1:
    dasm_put(Dst, 2104, Dt1(->base), Dt1(->base), Dt7(->pc), Dt1(->base), Dt1(->base), GG_DISP2STATIC, (1+1)*8, LJ_TISTRUECOND, (1+1)*8, LJ_TISNUM);
#line 1226 "vm_e2k.dasc"
    //| xors 0, RC, 0xffffffff, RC
    //| shls 0, RC, 0x3, RC
    //| sxt 0, 0x6, RC, RC
    //|2:
    //| ldd 0, BASE, 0xfffffff0, RB
    //| cleartp RB
    //| addd 0, RB, RC, TMP0
    //| ldd 0, TMP0, ((char *)(&((GCfuncC *)0)->upvalue)), RC
    //| ldd 0, BASE, 0xfffffff8, PC
    //| settp RC, LJ_TSTR
    //| std 2, BASE, 0xfffffff0, RC
    //| addd 0, 0x0, (1+1)*8, RD
    //| disp ctpr1, ->fff_res
    //| ct ctpr1
    //|
    //|//-- Base library: getters and setters ---------------------------------
    //|
    //|.ffunc_1 getmetatable
    //| ldd 0, BASE, 0x0, RB
    //| ldd 0, BASE, 0xfffffff8, PC
    //| checktab RB, >6
    //|1: // Field metatable must be at same offset for GCtab and GCudata!
    //| ldd 0, RB, TAB->metatable, RB
    //|2:
    //| cmpedb 0, RB, 0x0, pred0
    //| addd 0, 0x0, LJ_TNIL, TMP0
    //| std 2, BASE, 0xfffffff0, TMP0
    //| addd 0, 0x0, (1+1)*8, RD
    //| disp ctpr1, ->fff_res
    //| ct ctpr1, pred0
    //| settp RC, RB, LJ_TTAB
    //| std 2, BASE, 0xfffffff0, RC              // Store metatable as default result.
    //| ldd 0, DISPATCH, DISPATCH_GL(gcroot)+8*(GCROOT_MMNAME+MM_metatable), RC
    //| ldw 0, RB, TAB->hmask, RA
    //| ldw 0, RC, STR->sid, TMP0
    //| andd 0, RA, TMP0, RA
    //| settp RC, LJ_TSTR
    //| smulx 0, RA, #NODE, RA
    //| ldd 0, RB, TAB->node, TMP0
    //| addd 0, RA, TMP0, RA
    //|3: // Rearranged logic, because we expect _not_ to find the key.
    dasm_put(Dst, 2363, ((char *)(&((GCfuncC *)0)->upvalue)), LJ_TSTR, (1+1)*8, (1+1)*8, LJ_TTAB, Dt6(->metatable), LJ_TNIL, (1+1)*8, LJ_TTAB, DISPATCH_GL(gcroot)+8*(GCROOT_MMNAME+MM_metatable), Dt6(->hmask), Dt5(->sid), LJ_TSTR, sizeof(Node), Dt6(->node));
#line 1267 "vm_e2k.dasc"
    //| ldd 0, RA, NODE->key, TMP0
    //| cmpedb 0, TMP0, RC, pred0
    //| disp ctpr1, >5
    //| ct ctpr1, pred0
    //|4:
    //| ldd 0, RA, NODE->next, RA
    //| cmpedb 0, RA, 0x0, pred0
    //| disp ctpr1, <3
    //| ct ctpr1, ~pred0
    //| addd 0, 0x0, (1+1)*8, RD
    //| disp ctpr1, ->fff_res                 // Not found, keep default result.
    //| ct ctpr1
    //|5:
    //| ldd 0, RA, NODE->val, RB
    //| cmpedb 0, RB, LJ_TNIL, pred0
    //| addd 0, 0x0, (1+1)*8, RD
    //| disp ctpr1, ->fff_res                 // Ditto for nil value.
    //| ct ctpr1, pred0
    //| std 2, BASE, 0xfffffff0, RB           // Return value of mt.__metatable.
    //| addd 0, 0x0, (1+1)*8, RD
    //| disp ctpr1, ->fff_res
    //| ct ctpr1
    //|6:
    //| cmpesb 0, ITYPE, LJ_TUDATA, pred0
    //| disp ctpr1, <1
    //| ct ctpr1, pred0
    //| cmpbesb 0, ITYPE, LJ_TISNUM, pred0
    //| disp ctpr1, >7
    //| ct ctpr1, ~pred0
    //| addd 0, 0x0, LJ_TISNUM, ITYPE
    //|7:
    //| xord 0, ITYPE, U64x(0xffffffff,0xffffffff), ITYPE
    //| shld 0, ITYPE, 0x3, TMP0
    //| addd 0, TMP0, DISPATCH_GL(gcroot[GCROOT_BASEMT]), TMP0
    //| ldd 0, DISPATCH, TMP0, RB
    //| disp ctpr1, <2
    //| ct ctpr1
    //|
    //|.ffunc_2 setmetatable
    dasm_put(Dst, 2546, DtB(->key), DtB(->next), (1+1)*8, DtB(->val), LJ_TNIL, (1+1)*8, (1+1)*8, LJ_TUDATA, LJ_TISNUM, LJ_TISNUM, DISPATCH_GL(gcroot[GCROOT_BASEMT]));
#line 1306 "vm_e2k.dasc"
    //| ldd 0, BASE, 0x0, RB
    //| addd 0, RB, 0x0, TMP1
    //| checktab RB, ->fff_fallback
    //| // Fast path: no mt for table yet and not clearing the mt.
    //| ldd 0, RB, TAB->metatable, TMP0
    //| cmpedb 0, TMP0, 0x0, pred0
    //| disp ctpr1, ->fff_fallback
    //| ct ctpr1, ~pred0
    //| ldd 0, BASE, 0x8, RA
    //| checktab RA, ->fff_fallback
    //| std 2, RB, TAB->metatable, RA
    //| ldd 0, BASE, 0xfffffff8, PC
    //| std 2, BASE, 0xfffffff0, TMP1            // Return original table.
    //| ldb 0, RB, TAB->marked, TMP0
    //| cmpandedb 0, TMP0, LJ_GC_BLACK, pred0    // isblack(table)
    //| disp ctpr1, >1
    //| ct ctpr1, pred0
    //| // Possible write barrier. Table is black, but skip iswhite(mt) check.
    //| barrierback RB, TMP0, TMP1
    //|1:
    //| addd 0, 0x0, (1+1)*8, RD
    //| disp ctpr1, ->fff_res
    //| ct ctpr1
    //|
    //|.ffunc_2 rawget
    //| ldd 0, BASE, 0x0, CARG2
    //| checktab CARG2, ->fff_fallback
    //| addd 0, BASE, 0x8, CARG3
    //| ldd 0, STACK, SAVE_L, CARG1
    //| disp ctpr1, extern lj_tab_get         // (lua_State *L, GCtab *t, cTValue *key)
    //| call ctpr1, wbs = 0x8
    //| // cTValue * returned.
    //| ldd 0, CRET1, 0x0, RB
    //| ldd 0, BASE, 0xfffffff8, PC
    //| std 2, BASE, 0xfffffff0, RB
    //| addd 0, 0x0, (1+1)*8, RD
    //| disp ctpr1, ->fff_res
    //| ct ctpr1
    //|
    //|//-- Base library: conversions ------------------------------------------
    //|
    //|.ffunc tonumber
    dasm_put(Dst, 2663, (2+1)*8, LJ_TTAB, Dt6(->metatable), LJ_TTAB, Dt6(->metatable), Dt6(->marked), LJ_GC_BLACK, Dt6(->marked), ~LJ_GC_BLACK, Dt6(->marked), DISPATCH_GL(gc.grayagain), DISPATCH_GL(gc.grayagain), Dt6(->gclist), (1+1)*8, (2+1)*8, LJ_TTAB, (1+1)*8);
#line 1348 "vm_e2k.dasc"
    //| // Only handles the number case inline (without a base argument).
    //| cmpedb 0, RD, (1+1)*8, pred0
    //| disp ctpr1, ->fff_fallback            // Exactly one argument.
    //| ct ctpr1, ~pred0
    //| ldd 0, BASE, 0x0, RB
    //| checknumber RB, ->fff_fallback
    //| ldd 0, BASE, 0xfffffff8, PC
    //| std 2, BASE, 0xfffffff0, RB
    //| addd 0, 0x0, (1+1)*8, RD
    //| disp ctpr1, ->fff_res
    //| ct ctpr1
    //|
    //|.ffunc_1 tostring
    //| // Only handles the string or number case inline.
    //| ldd 0, BASE, 0xfffffff8, PC
    //| ldd 0, BASE, 0x0, RB
    //| checktp_nc RB, LJ_TSTR, >3
    //| // A __tostring method in the string base metatable is ignored.
    //|2:
    //| std 2, BASE, 0xfffffff0, RB
    //| addd 0, 0x0, (1+1)*8, RD
    //| disp ctpr1, ->fff_res
    //| ct ctpr1
    //|3: // Handle numbers inline, unless a number base metatable is present.
    //| cmpbesb 0, ITYPE, LJ_TISNUM, pred0
    //| disp ctpr1, ->fff_fallback_1
    //| ct ctpr1, ~pred0
    //| ldd 0, DISPATCH, DISPATCH_GL(gcroot[GCROOT_BASEMT_NUM]), TMP0
    //| cmpedb 0, TMP0, 0x0, pred0
    //| disp ctpr1, ->fff_fallback
    //| ct ctpr1, ~pred0
    //| ffgccheck
    dasm_put(Dst, 2880, (1+1)*8, LJ_TISNUM, (1+1)*8, (1+1)*8, LJ_TSTR, (1+1)*8, LJ_TISNUM, DISPATCH_GL(gcroot[GCROOT_BASEMT_NUM]), DISPATCH_GL(gc.total), DISPATCH_GL(gc.threshold), Dt1(->base), Dt1(->top), Dt1(->base), Dt1(->top));
#line 1380 "vm_e2k.dasc"
    //| ldd 0, STACK, SAVE_L, RB
    //| std 2, RB, L->base, BASE                 // Add frame since C call can throw.
    //| std 2, STACK, SAVE_PC, PC                // Redundant (but a defined value).
    //| addd 0, BASE, 0x0, CARG2
    //| addd 0, RB, 0x0, CARG1
    //| disp ctpr1, extern lj_strfmt_num      // (lua_State *L, lua_Number *np)
    //| call ctpr1, wbs = 0x8
    //| // GCstr returned.
    //| ldd 0, RB, L->base, BASE
    //| settp RB, CRET1, LJ_TSTR
    //| disp ctpr1, <2
    //| ct ctpr1
    //|
    //|//-- Base library: iterators -------------------------------------------
    //|
    //|.ffunc_1 next
    //| cmpedb 0, RD, (1+1)*8, pred0
    //| disp ctpr1, >2                        // Missing 2nd arg?
    //| ct ctpr1, pred0
    //|1:
    //| ldd 0, BASE, 0x0, CARG2
    //| checktab CARG2, ->fff_fallback
    //| ldd 0, STACK, SAVE_L, RB
    //| std 2, RB, L->base, BASE
    //| std 2, RB, L->top, BASE
    //| ldd 0, BASE, 0xfffffff8, PC
    //| addd 0, BASE, 0x8, CARG3
    //| addd 0, RB, 0x0, CARG1
    //| std 2, STACK, SAVE_PC, PC
    //| disp ctpr1, extern lj_tab_next        // (lua_State *L, GCtab *t, TValue *key)
    //| call ctpr1, wbs = 0x8
    //| // Flag returned.
    //| ldd 0, RB, L->base, BASE
    //| cmpedb 0, CRET1, 0x0, pred0
    //| disp ctpr1, >3                        // End of traversal?
    //| ct ctpr1, pred0
    //| // Copy key and value to results.
    //| ldd 0, BASE, 0x8, RB
    //| ldd 0, BASE, 0x10, RD
    //| std 2, BASE, 0xfffffff0, RB
    //| std 2, BASE, 0xfffffff8, RD
    //| addd 0, 0x0, (1+2)*8, RD
    //| disp ctpr1, ->fff_res
    //| ct ctpr1
    //|2: // Set missing 2nd arg to nil
    //| addd 0, 0x0, LJ_TNIL, TMP0
    //| std 2, BASE, 0x8, TMP0
    //| disp ctpr1, <1
    //| ct ctpr1
    //|3: // End of traversal: return nil.
    dasm_put(Dst, 3061, Dt1(->base), Dt1(->base), LJ_TSTR, (1+1)*8, (1+1)*8, LJ_TTAB, Dt1(->base), Dt1(->top), Dt1(->base), (1+2)*8, LJ_TNIL);
#line 1430 "vm_e2k.dasc"
    //| addd 0, 0x0, LJ_TNIL, TMP0
    //| std 2, BASE, 0xfffffff0, TMP0
    //| addd 0, 0x0, (1+1)*8, RD
    //| disp ctpr1, ->fff_res
    //| ct ctpr1
    //|
    //|.ffunc_1 pairs
    //| ldd 0, BASE, 0x0, RB
    //| addd 0, RB, 0x0, TMP1
    //| checktab RB, ->fff_fallback
    dasm_put(Dst, 3238, LJ_TNIL, (1+1)*8, (1+1)*8, LJ_TTAB);
#line 1440 "vm_e2k.dasc"
#if LJ_52
    //| ldd 0, RB, TAB->metatable, TMP0
    //| cmpedb 0, TMP0, 0x0, pred0
    //| disp ctpr1, ->fff_fallback
    //| ct ctpr1, ~pred0
    dasm_put(Dst, 3298, Dt6(->metatable));
#line 1445 "vm_e2k.dasc"
#endif
    //| ldd 0, BASE, 0xfffffff0, RD
    //| cleartp RD
    //| ldd 0, RD, CFUNC->upvalue[0], RD
    //| settp RD, LJ_TFUNC
    //| ldd 0, BASE, 0xfffffff8, PC
    //| std 2, BASE, 0xfffffff0, RD
    //| std 2, BASE, 0xfffffff8, TMP1
    //| addd 0, 0x0, LJ_TNIL, TMP0
    //| std 2, BASE, 0x0, TMP0
    //| addd 0, 0x0, (1+3)*8, RD
    //| disp ctpr1, ->fff_res
    //| ct ctpr1
    //|
    //|.ffunc_2 ipairs_aux
    //| ldd 0, BASE, 0x0, RB
    //| checktab RB, ->fff_fallback
    //| ldd 0, BASE, 0x8, TMP0
    //| checknumtp TMP0, ->fff_fallback
    //| ldd 0, BASE, 0xfffffff8, PC
    //| faddd 0, TMP0, U64x(0x3ff00000,0x00000000), TMP0   // +1.0e0
    //| fdtoistr 0, TMP0, RA
    //| std 2, BASE, 0xfffffff0, TMP0
    //| ldw 0, RB, TAB->asize, TMP0
    //| cmpbsb 0, RA, TMP0, pred0
    //| disp ctpr1, >2                        // Not in array part?
    //| ct ctpr1, ~pred0
    //| ldd 0, RB, TAB->array, RD
    //| sxt 0, 0x2, RA, RA
    //| shld 0, RA, 0x3, RA
    //| addd 0, RD, RA, RD
    //|1:
    //| ldw 0, RD, 0x0, TMP0
    //| cmpesb 0, TMP0, LJ_TNIL, pred0
    //| disp ctpr1, ->fff_res0
    //| ct ctpr1, pred0
    //| // Copy array slot.
    //| ldd 0, RD, 0x0, RB
    //| std 2, BASE, 0xfffffff8, RB
    //| addd 0, 0x0, (1+2)*8, RD
    //| disp ctpr1, ->fff_res
    //| ct ctpr1
    //|2: // Check for empty hash part first. Otherwise call C function.
    //| ldw 0, RB, TAB->hmask, TMP0
    //| cmpedb 0, TMP0, 0x0, pred0
    //| disp ctpr1, ->fff_res0
    //| ct ctpr1, pred0
    //| addd 0, RB, 0x0, CARG1
    //| addd 0, RA, 0x0, CARG2
    //| disp ctpr1, extern lj_tab_getinth     // (GCtab *t, int32_t key)
    //| call ctpr1, wbs = 0x8
    //| // cTValue * or NULL returned.
    //| cmpedb 0, CRET1, 0x0, pred0
    //| disp ctpr1, <1
    //| ct ctpr1, ~pred0
    //|->fff_res0:
    dasm_put(Dst, 3311, Dt8(->upvalue[0]), LJ_TFUNC, LJ_TNIL, (1+3)*8, (2+1)*8, LJ_TTAB, LJ_TISNUM, Dt6(->asize), Dt6(->array), LJ_TNIL, (1+2)*8, Dt6(->hmask));
#line 1501 "vm_e2k.dasc"
    //| addd 0, 0x0, (0+1)*8, RD
    //| disp ctpr1, ->fff_res
    //| ct ctpr1
    //|
    //|.ffunc_1 ipairs
    //| ldd 0, BASE, 0x0, RB
    //| addd 0, RB, 0x0, TMP1
    //| checktab RB, ->fff_fallback
    dasm_put(Dst, 3521, (0+1)*8, (1+1)*8, LJ_TTAB);
#line 1509 "vm_e2k.dasc"
#if LJ_52
    //| ldd 0, RB, TAB->metatable, TMP0
    //| cmpedb 0, TMP0, 0x0, pred0
    //| disp ctpr1, ->fff_fallback
    //| ct ctpr1, ~pred0
    dasm_put(Dst, 3572, Dt6(->metatable));
#line 1514 "vm_e2k.dasc"
#endif
    //| ldd 0, BASE, 0xfffffff0, RD
    //| cleartp RD
    //| ldd 0, RD, CFUNC->upvalue[0], RD
    //| settp RD, LJ_TFUNC
    //| ldd 0, BASE, 0xfffffff8, PC
    //| std 2, BASE, 0xfffffff0, RD
    //| std 2, BASE, 0xfffffff8, TMP1
    //| addd 0, 0x0, 0x0, TMP0
    //| std 2, BASE, 0x0, TMP0
    //| addd 0, 0x0, (1+3)*8, RD
    //| disp ctpr1, ->fff_res
    //| ct ctpr1
    //|
    //|//-- Base library: catch errors ----------------------------------------
    //|
    //|.ffunc_1 pcall
    //| addd 0, BASE, 0x10, RA
    //| subd 0, RD, 0x8, RD
    //| addd 0, 0x0, 16+FRAME_PCALL, PC
    //|1:
    //| ldb 0, DISPATCH, DISPATCH_GL(hookmask), RB
    //| shrd 0, RB, HOOK_ACTIVE_SHIFT, RB
    //| andd 0, RB, 0x1, RB
    //| addd 0, PC, RB, PC                       // Remember active hook before pcall.
    //| // Note: this does a (harmless) copy of the function to the PC slot, too.
    //| addd 0, RD, 0x0, KBASE
    //|2:
    //| addd 0, RA, KBASE, TMP0
    //| ldd 0, TMP0, 0xffffffe8, RB
    //| std 2, TMP0, 0xfffffff0, RB
    //| subd 0, KBASE, 0x8, KBASE
    //| cmpbedb 0, KBASE, 0x0, pred0
    //| disp ctpr1, <2
    //| ct ctpr1, ~pred0
    //| // BASE = old base, RA = new base, RD = (nargs+1)*8, PC = caller PC
    //| ldd 0, RA, 0xfffffff0, RB
    //| checkfunc RB, ->vmeta_call
    //| addd 0, RA, 0x0, BASE
    //| ins_call
    //|
    //|.ffunc_2 xpcall
    //| ldd 0, BASE, 0x8, RA
    //| checktp_nc RA, LJ_TFUNC, ->fff_fallback
    //| ldd 0, BASE, 0x0, RB                     // Swap function and traceback.
    //| std 2, BASE, 0x0, RA
    //| std 2, BASE, 0x8, RB
    //| addd 0, BASE, 0x18, RA
    //| subd 0, RD, 0x10, RD
    //| addd 0, 0x0, 0x18+FRAME_PCALL, PC
    //| disp ctpr1, <1
    //| ct ctpr1
    //|
    //|//-- Coroutine library --------------------------------------------------
    //|
    //|.macro coroutine_resume_wrap, resume
    //|.if resume
    //|.ffunc_1 coroutine_resume
    //| ldd 0, BASE, 0x0, RB
    //| cleartp RB
    //|.else
    //|.ffunc coroutine_wrap_aux
    //| ldd 0, BASE, 0xfffffff0, RB
    //| cleartp RB
    //| ldd 0, RB, CFUNC->upvalue[0].gcr, RB
    //| cleartp RB
    //|.endif
    //| ldd 0, BASE, 0xfffffff8, PC
    //| std 2, STACK, SAVE_PC, PC
    //| addd 0, RB, 0x0, TMP1
    //|.if resume
    //| ldd 0, BASE, 0x0, TMP0
    //| checktptp, TMP0, LJ_TTHREAD, ->fff_fallback
    //|.endif
    //| disp ctpr1, ->fff_fallback
    //| ldd 0, RB, L->cframe, TMP0
    //| cmpedb 0, TMP0, 0x0, pred0
    //| ct ctpr1, ~pred0
    //| ldb 0, RB, L->status, TMP0
    //| cmpbedb 0, TMP0, LUA_YIELD, pred0
    //| ct ctpr1, ~pred0
    //| ldd 0, RB, L->top, RA
    //| cmpedb 0, TMP0, LUA_YIELD, pred0
    //| disp ctpr1, >1                        // Status != LUA_YIELD (i.e. 0)?
    //| ct ctpr1, pred0
    //| ldd 0, RB, L->base, TMP0
    //| cmpbedb 0, RA, TMP0, pred0               // Check for presence of initial func.
    //| disp ctpr1, ->fff_fallback
    //| ct ctpr1, pred0
    //| ldd 0, RA, 0xfffffff8, PC                // Move initial function up.
    //| std 2, RA, 0x0, PC
    //| addd 0, RA, 0x8, RA
    //|1:
    //|.if resume
    //| addd 0, RA, RD, PC                       // Check stack space (-1-thread).
    //| subd 0, PC, 0x10, PC
    //|.else
    //| addd 0, RA, RD, PC                       // Check stack space (-1).
    //| subd 0, PC, 0x8, PC
    //|.endif
    //| ldd 0, RB, L->maxstack, TMP0
    //| cmpbedb 0, PC, TMP0, pred0
    //| disp ctpr1, ->fff_fallback
    //| ct ctpr1, ~pred0
    //| std 2, RB, L->top, PC
    //| ldd 0, STACK, SAVE_L, RB
    //| std 2, RB, L->base, BASE
    //|.if resume
    //| addd 0, BASE, 0x8, BASE                  // Keep resumed thread in stack for GC.
    //|.endif
    //| std 2, RB, L->top, BASE
    //|.if resume
    //| addd 0, BASE, RD, RB                     // RB = end of source for stack move.
    //| subd 0, RB, 0x18, RB
    //|.else
    //| addd 0, BASE, RD, RB                     // RB = end of source for stack move.
    //| subd 0, RB, 0x10, RB
    //|.endif
    //| subd 0, RB, PC, RB                       // Relative to PC.
    //| cmpedb 0, PC, RA, pred0
    //| disp ctpr1, >3
    //| ct ctpr1, pred0
    //|2: // Move args to coroutine.
    //| ldd 0, PC, RB, RC
    //| std 2, PC, 0xfffffff8, RC
    //| subd 0, PC, 0x8, PC
    //| cmpedb 0, PC, RA, pred0
    //| disp ctpr1, <2
    //| ct ctpr1, ~pred0
    //|3:
    //| addd 0, RA, 0x0, CARG2
    //| addd 0, TMP1, 0x0, CARG1
    //| disp ctpr1, ->vm_resume               // (lua_State *L, TValue *base, 0, 0)
    //| call ctpr1, wbs = 0x8
    //| ldd 0, STACK, SAVE_L, RB
    //| addd 0, TMP1, 0x0, PC
    //| ldd 0, RB, L->base, BASE
    //| std 2, DISPATCH, DISPATCH_GL(cur_L), RB
    //| set_vmstate INTERP
    //| cmpbedb 0, CRET1, LUA_YIELD, pred0
    //| disp ctpr1, >8
    //| ct ctpr1, ~pred0
    //|4:
    //| ldd 0, PC, L->base, RA
    //| ldd 0, PC, L->top, KBASE
    //| std 2, PC, L->top, RA                    // Clear coroutine stack.
    //| addd 0, KBASE, 0x0, PC
    //| subd 0, PC, RA, PC
    //| cmpedb 0, PC, 0x0, pred0
    //| disp ctpr1, >6                        // No results?
    //| ct ctpr1, pred0
    //| addd 0, BASE, PC, RD
    //| ldd 0, RB, L->maxstack, TMP0
    //| cmpbedb 0, RD, TMP0, pred0
    //| disp ctpr1, >9                        // Need to grow stack?
    //| ct ctpr1, ~pred0
    //| addd 0, BASE, 0x0, RB
    //| subd 0, RB, RA, RB
    //|5: // Move results from coroutine.
    //| ldd 0, RA, 0x0, RD
    //| std 2, RA, RB, RD
    //| addd 0, RA, 0x8, RA
    //| cmpedb 0, RA, KBASE, pred0
    //| disp ctpr1, <5
    //| ct ctpr1, ~pred0
    //|6:
    //|.if resume
    //| addd 0, PC, (1+1)*8, RD                  // (nresults+1)*8 = (1 + true)*8 + results*8.
    //| mov_true ITYPE                        // Prepend true to results.
    //| std 2, BASE, 0xfffffff8, ITYPE
    //|.else
    //| addd 0, PC, 1*8, RD                      // (nresults+1)*8 = 8 + results*8.
    //|.endif
    //|7:
    //| ldd 0, STACK, SAVE_PC, PC
    //| stw 2, STACK, MULTRES, RD
    //|.if resume
    //| subd 0, 0x0, 0x8, RA
    //|.else
    //| addd 0, 0x0, 0x0, RA
    //|.endif
    //| cmpandesb 0, PC, FRAME_TYPE, pred0
    //| disp ctpr1, ->BC_RET_Z
    //| ct ctpr1, pred0
    //| disp ctpr1, ->vm_return
    //| ct ctpr1
    //|8: // Coroutine returned with error (at co->top-1).
    //|.if resume
    //| mov_false ITYPE                       // Prepend false to results.
    //| std 2, BASE, 0xfffffff8, ITYPE
    //| ldd 0, PC, L->top, RA
    //| subd 0, RA, 0x8, RA
    //| std 2, PC, L->top, RA                    // Clear error from coroutine stack.
    //| // Copy error message.
    //| ldd 0, RA, 0x0, RD
    //| std 2, BASE, 0x0, RD
    //| addd 0, 0x0, (1+2)*8, RD                 // (nresults+1)*8 = (1 + false + error)*8.
    //| disp ctpr1, <7
    //| ct ctpr1
    //|.else
    //| addd 0, PC, 0x0, CARG2
    //| addd 0, RB, 0x0, CARG1
    //| disp ctpr1, extern lj_ffh_coroutine_wrap_err // (lua_State *L, lua_State *co)
    //| call ctpr1, wbs = 0x8
    //| // Error function does not return.
    //|.endif
    //|9:  // Handle stack expansion on return from yield.
    //| addd 0, TMP1, 0x0, RA
    //| std 2, RA, L->top, KBASE                 // Undo coroutine stack clearing.
    //| shrd 0, PC, 0x3, PC
    //| addd 0, PC, 0x0, CARG2
    //| addd 0, RB, 0x0, CARG1
    //| disp ctpr1, extern lj_state_growstack // (lua_State *L, int n)
    //| call ctpr1, wbs = 0x8
    //| addd 0, TMP1, 0x0, PC
    //| ldd 0, RB, L->base, BASE
    //| disp ctpr1, <4                        // Retry the stack move.
    //| ct ctpr1
    //|.endmacro
    //|
    //| coroutine_resume_wrap 1        // coroutine.resume
    dasm_put(Dst, 3585, Dt8(->upvalue[0]), LJ_TFUNC, (1+3)*8, (1+1)*8, 16+FRAME_PCALL, DISPATCH_GL(hookmask), HOOK_ACTIVE_SHIFT, LJ_TFUNC, Dt7(->pc), (2+1)*8, LJ_TFUNC, 0x18+FRAME_PCALL, (1+1)*8, LJ_TTHREAD, Dt1(->cframe), Dt1(->status), LUA_YIELD, Dt1(->top), LUA_YIELD, Dt1(->base));
    dasm_put(Dst, 3921, Dt1(->maxstack), Dt1(->top), Dt1(->base), Dt1(->top), Dt1(->base), DISPATCH_GL(cur_L), ~LJ_VMST_INTERP, DISPATCH_GL(vmstate), LUA_YIELD, Dt1(->base), Dt1(->top), Dt1(->top), Dt1(->maxstack));
#line 1735 "vm_e2k.dasc"
    //| coroutine_resume_wrap 0        // coroutine.wrap
    dasm_put(Dst, 4086, (1+1)*8, FRAME_TYPE, Dt1(->top), Dt1(->top), (1+2)*8, Dt1(->top), Dt1(->base), Dt8(->upvalue[0].gcr), Dt1(->cframe), Dt1(->status), LUA_YIELD, Dt1(->top), LUA_YIELD, Dt1(->base));
    dasm_put(Dst, 4302, Dt1(->maxstack), Dt1(->top), Dt1(->base), Dt1(->top), Dt1(->base), DISPATCH_GL(cur_L), ~LJ_VMST_INTERP, DISPATCH_GL(vmstate), LUA_YIELD, Dt1(->base), Dt1(->top), Dt1(->top), Dt1(->maxstack));
#line 1736 "vm_e2k.dasc"
    //|
    //|.ffunc coroutine_yield
    //| ldd 0, STACK, SAVE_L, RB
    //| ldd 0, RB, L->cframe, TMP0
    //| cmpandedb 0, TMP0, CFRAME_RESUME, pred0
    //| disp ctpr1, ->fff_fallback
    //| ct ctpr1, pred0
    //| std 2, RB, L->base, BASE
    //| addd 0, BASE, RD, RD
    //| subd 0, RD, 0x8, RD
    //| std 2, RB, L->top, RD
    //| addd 0, 0x0, 0x0, RD
    //| std 2, RB, L->cframe, RD
    //| addd 0, 0x0, LUA_YIELD, RRET1
    //| stb 2, RB, L->status, RRET1
    //| return ctpr3
    //| ct ctpr3
    //|
    //|//-- Math library -------------------------------------------------------
    //|
    //|.ffunc_1 math_abs
    dasm_put(Dst, 4463, 1*8, FRAME_TYPE, Dt1(->top), Dt1(->base), Dt1(->cframe), CFRAME_RESUME, Dt1(->base), Dt1(->top), Dt1(->cframe), LUA_YIELD, Dt1(->status));
#line 1757 "vm_e2k.dasc"
    //| ldd 0, BASE, 0x0, RB
    //| checknum RB, ->fff_fallback
    //| shld 0, RB, 0x1, RB
    //| shrd 0, RB, 0x1, RB
    //| ldd 0, BASE, 0xfffffff8, PC
    //| std 2, BASE, 0xfffffff0, RB
    //| addd 0, 0x0, (1+1)*8, RD
    //| disp ctpr1, ->fff_res
    //| ct ctpr1
    //|
    //|.ffunc_n math_sqrt
    //| fsqrtid 5, CARG1, TMP1
    //| fsqrttd 5, CARG1, TMP1, TMP0
    //| // fallthrough
    //|
    //|->fff_resb:
    //| ldd 0, BASE, 0xfffffff8, PC
    //| std 2, BASE, 0xfffffff0, TMP0
    //| addd 0, 0x0, (1+1)*8, RD
    //| // fallthrough
    //|
    //|->fff_res:
    //|<
    //| cmpandedb 0, PC, FRAME_TYPE, pred0
    //| ldbsm 2, PC, 0x0, CARG4
    //| addd 3, 0x0, LJ_TNIL, TMP1
    //| stw 5, STACK, MULTRES, RD
    //| disp ctpr1, ->vm_return
    //|>
    //|<
    //| ldb 3, PC, PC_RB, RB, pred0
    //| ldw 5, PC, 0x0, CARG3, pred0
    //| disp ctpr2, >2
    //| nop 1
    //|>
    //| ldb 3, PC, PC_RA, RA, pred0
    //|<
    //| shld 0, CARG4, 0x3, CARG4, pred0
    //| addd 1, PC, 0x4, PC, pred0
    //| subd 3, 0x0, 0x10, RA, ~pred0         // Results start at BASE+RA = BASE-16
    //| shld 4, RB, 0x3, RB, pred0
    //| disp ctpr3, >1
    //|>
    //|<
    //| ldd 0, CARG4, DISPATCH, CARG4, pred0
    //| cmpbedbsm 3, RB, RD, pred1            // More results expected?
    //| ct ctpr1, ~pred0                      // Non-standard return case.
    //|>
    //|<
    //| shld 3, RA, 0x3, CARG5
    //| ct ctpr2, pred1
    //|>
    //|1:                                     // Fill up results with nil.
    //|<
    //| subd 3, RD, 0x18, TMP0
    //| addd 4, RD, 0x8, RD
    //|>
    //|<
    //| cmpbedb 3, RB, RD, pred1
    //| std 5, BASE, TMP0, TMP1
    //|>
    //| ct ctpr3, ~pred1
    //|2:
    //|<
    //| movtd 0, CARG4, ctpr1
    //| subd 3, BASE, 0x10, BASE
    //|>
    //|<
    //| shrd 3, CARG3, 0x5, RA
    //| shrd 4, CARG3, 0x15, RB
    //| shrd 5, CARG3, 0xd, RD
    //|>
    //|<
    //| subd 3, BASE, CARG5, BASE                   // base = base - (RA+2)*8
    //| andd 4, RD, 0x7fff8, RD
    //| andd 5, RA, 0x7f8, RA
    //|>
    //|<
    //| andd 3, RB, 0x7f8, RB
    //| andd 4, RD, 0x7f8, RC
    //| ct ctpr1
    //|>
    //|
    //|.macro math_round, func
    //|.ffunc math_ .. func
    //| ldd 0, BASE, 0x0, CARG1
    //| checknumtp CARG1, ->fff_fallback
    //| disp ctpr1, ->vm_ .. func
    //| call ctpr1, wbs = 0x8
    //| addd 0, CRET1, 0x0, TMP0
    //| disp ctpr1, ->fff_resb
    //| ct ctpr1
    //|.endmacro
    //|
    //| math_round floor
    //| math_round ceil
    dasm_put(Dst, 4608, (1+1)*8, LJ_TISNUM, (1+1)*8, (1+1)*8, LJ_TISNUM, (1+1)*8, LJ_TNIL, FRAME_TYPE, LJ_TISNUM);
#line 1853 "vm_e2k.dasc"
    //|
    //|.ffunc math_log
    //| cmpedb 0, RD, (1+1)*8, pred0
    //| disp ctpr1, ->fff_fallback            // Exactly one argument.
    //| ct ctpr1, ~pred0
    //| ldd 0, BASE, 0x0, CARG1
    //| checknumtp CARG1, ->fff_fallback
    //| disp ctpr1, extern log
    //| call ctpr1, wbs = 0x8
    //| addd 0, CRET1, 0x0, TMP0
    //| disp ctpr1, ->fff_resb
    //| ct ctpr1
    //|
    //|.macro math_extern, func
    //|.ffunc_n math_ .. func
    //| disp ctpr1, extern func
    //| call ctpr1, wbs = 0x8
    //| addd 0, CRET1, 0x0, TMP0
    //| disp ctpr1, ->fff_resb
    //| ct ctpr1
    //|.endmacro
    //|
    //|.macro math_extern2, func
    //|.ffunc_nn math_ .. func
    //| disp ctpr1, extern func
    //| call ctpr1, wbs = 0x8
    //| addd 0, CRET1, 0x0, TMP0
    //| disp ctpr1, ->fff_resb
    //| ct ctpr1
    //|.endmacro
    //|
    //| math_extern log10
    //| math_extern exp
    //| math_extern sin
    dasm_put(Dst, 4818, LJ_TISNUM, (1+1)*8, LJ_TISNUM, (1+1)*8, LJ_TISNUM, (1+1)*8, LJ_TISNUM);
#line 1887 "vm_e2k.dasc"
    //| math_extern cos
    //| math_extern tan
    //| math_extern asin
    //| math_extern acos
    dasm_put(Dst, 4981, (1+1)*8, LJ_TISNUM, (1+1)*8, LJ_TISNUM, (1+1)*8, LJ_TISNUM, (1+1)*8, LJ_TISNUM);
#line 1891 "vm_e2k.dasc"
    //| math_extern atan
    //| math_extern sinh
    //| math_extern cosh
    //| math_extern tanh
    dasm_put(Dst, 5154, (1+1)*8, LJ_TISNUM, (1+1)*8, LJ_TISNUM, (1+1)*8, LJ_TISNUM, (1+1)*8, LJ_TISNUM);
#line 1895 "vm_e2k.dasc"
    //| math_extern2 pow
    //| math_extern2 atan2
    //| math_extern2 fmod
    dasm_put(Dst, 5327, (1+1)*8, LJ_TISNUM, (2+1)*8, LJ_TISNUM, LJ_TISNUM, (2+1)*8, LJ_TISNUM, LJ_TISNUM);
#line 1898 "vm_e2k.dasc"
    //|
    //|.ffunc_2 math_ldexp
    //| ldd 0, BASE, 0x0, TMP0
    //| ldd 0, BASE, 0x8, TMP1
    //| checknumtp TMP0, ->fff_fallback
    //| checknumtp TMP1, ->fff_fallback
    //| fdtoidtr 0, TMP1, TMP1
    //| fscaled 1, TMP0, TMP1, TMP0
    //| ldd 0, BASE, 0xfffffff8, PC
    //| std 2, BASE, 0xfffffff0, TMP0
    //| addd 0, 0x0, (1+1)*8, RD
    //| disp ctpr1, ->fff_res
    //| ct ctpr1
    //|
    //|.ffunc_n math_frexp
    //| addd 0, STACK, STACK_TMP, CARG2
    //| disp ctpr1, extern frexp
    //| call ctpr1, wbs = 0x8
    //| ldd 0, BASE, 0xfffffff8, PC
    //| std 2, BASE, 0xfffffff0, CRET1
    //| ldw 0, STACK, STACK_TMP, TMP0
    //| istofd 0, TMP0, TMP0
    //| std 2, BASE, 0xfffffff8, TMP0
    //| addd 0, 0x0, (1+2)*8, RD
    //| disp ctpr1, ->fff_res
    //| ct ctpr1
    //|
    //|.ffunc_n math_modf
    dasm_put(Dst, 5493, (2+1)*8, LJ_TISNUM, LJ_TISNUM, (2+1)*8, LJ_TISNUM, LJ_TISNUM, (1+1)*8, (1+1)*8, LJ_TISNUM, (1+2)*8);
#line 1926 "vm_e2k.dasc"
    //| subd 0, BASE, 0x10, CARG2
    //| disp ctpr1, extern modf
    //| call ctpr1, wbs = 0x8
    //| ldd 0, BASE, 0xfffffff8, PC
    //| std 2, BASE, 0xfffffff8, CRET1
    //| addd 0, 0x0, (1+2)*8, RD
    //| disp ctpr1, ->fff_res
    //| ct ctpr1
    //|
    //|.macro math_minmax, name, ins
    //| .ffunc_1 name
    //| addd 0, 0x0, 0x10, RA
    //| ldd 0, BASE, 0x0, TMP0
    //| checknumtp TMP0, ->fff_fallback
    //|1: //  Handle numbers or integers.
    //| cmpbsb 0, RA, RD, pred0
    //| disp ctpr1, ->fff_resb
    //| ct ctpr1, ~pred0
    //| addd 0, BASE, RA, TMP1
    //| ldd 0, TMP1, 0xfffffff8, TMP1
    //| checknumtp TMP1, ->fff_fallback
    //| ins 0, TMP0, TMP1, TMP0
    //| addd 0, RA, 0x8, RA
    //| disp ctpr1, <1
    //| ct ctpr1
    //|.endmacro
    //|
    //| math_minmax math_min, fmind
    //| math_minmax math_max, fmaxd
    //|
    //|//-- String library -----------------------------------------------------
    //|
    //|.ffunc string_byte                     // Only handle the 1-arg case here.
    dasm_put(Dst, 5694, (1+1)*8, LJ_TISNUM, (1+2)*8, (1+1)*8, LJ_TISNUM, LJ_TISNUM, (1+1)*8, LJ_TISNUM, LJ_TISNUM);
#line 1959 "vm_e2k.dasc"
    //| cmpedb 0, RD, (1+1)*8, pred0
    //| disp ctpr1, ->fff_fallback
    //| ct ctpr1, ~pred0
    //| ldd 0, BASE, 0x0, RB
    //| checkstr RB, ->fff_fallback
    //| ldd 0, BASE, 0xfffffff8, PC
    //| ldw 0, RB, STR->len, TMP0
    //| cmpbsb 0, TMP0, 0x1, pred0
    //| disp ctpr1, ->fff_res0                // Return no results for empty string.
    //| ct ctpr1, pred0
    //| ldb 0, RB, STR[1], RB
    //| istofd 0, RB, TMP0
    //| disp ctpr1, ->fff_resb
    //| ct ctpr1
    //|
    //|.ffunc string_char                     // Only handle the 1-arg case here.
    //| ffgccheck
    //| cmpedb 0, RD, (1+1)*8, pred0
    //| disp ctpr1, ->fff_fallback            // *Exactly* 1 arg.
    //| ct ctpr1, ~pred0
    //| ldd 0, BASE, 0x0, TMP0
    //| checknumtp TMP0, ->fff_fallback
    //| fdtoistr 0, TMP0, RB
    //| cmpbesb 0, RB, 255, pred0
    //| disp ctpr1, ->fff_fallback
    //| ct ctpr1, ~pred0
    //| stw 2, STACK, STACK_TMP, RB
    //| addd 0, 0x0, 0x1, TMP1
    //| addd 0, STACK, STACK_TMP, RD                 // Points to stack. Little-endian.
    //|->fff_newstr:
    dasm_put(Dst, 5897, (1+1)*8, LJ_TSTR, Dt5(->len), Dt5([1]), DISPATCH_GL(gc.total), DISPATCH_GL(gc.threshold), Dt1(->base), Dt1(->top), Dt1(->base), Dt1(->top), (1+1)*8, LJ_TISNUM);
#line 1989 "vm_e2k.dasc"
    //| ldd 0, STACK, SAVE_L, RB
    //| std 2, RB, L->base, BASE
    //| sxt 0, 0x2, TMP1, CARG3               // Zero-extended to size_t.
    //| addd 0, RD, 0x0, CARG2
    //| addd 0, RB, 0x0, CARG1
    //| std 2, STACK, SAVE_PC, PC
    //| disp ctpr1, extern lj_str_new         // (lua_State *L, char *str, size_t l)
    //| call ctpr1, wbs = 0x8
    //| // GStr * returned.
    //| ldd 0, RB, L->base, BASE
    //| ldd 0, BASE, 0xfffffff8, PC
    //| settp CRET1, LJ_TSTR
    //| std 2, BASE, 0xfffffff0, CRET1
    //| addd 0, 0x0, (1+1)*8, RD
    //| disp ctpr1, ->fff_res
    //| ct ctpr1
    //|
    //|.ffunc string_sub
    //| ffgccheck
    //| adds 0, 0x0, 0xffffffff, TMP1
    //| cmpbdb 0, RD, (1+2)*8, pred0
    //| disp ctpr1, ->fff_fallback
    //| ct ctpr1, pred0
    //| cmpbedb 0, RD, (1+2)*8, pred0
    //| disp ctpr1, >2
    //| ct ctpr1, pred0
    //| ldd 0, BASE, 0x10, TMP0
    //| checknumtp TMP0, ->fff_fallback
    //| fdtoistr 0, TMP0, TMP1
    //|2:
    //| ldd 0, BASE, 0x0, RB
    //| checkstr RB, ->fff_fallback
    //| ldd 0, BASE, 0x8, TMP0
    //| checknumtp TMP0, ->fff_fallback
    //| addd 0, 0x0, 0x0, RA
    //| fdtoistr 0, TMP0, RA
    //| ldw 0, RB, STR->len, RC
    //| cmpbsb 0, RC, TMP1, pred0
    //| disp ctpr1, >6                        // len < end? (unsigned compare)
    //| ct ctpr1, pred0
    //|3:
    dasm_put(Dst, 6076, Dt1(->base), Dt1(->base), LJ_TSTR, (1+1)*8, DISPATCH_GL(gc.total), DISPATCH_GL(gc.threshold), Dt1(->base), Dt1(->top), Dt1(->base), Dt1(->top), (1+2)*8, (1+2)*8, LJ_TISNUM, LJ_TSTR, LJ_TISNUM, Dt5(->len));
#line 2030 "vm_e2k.dasc"
    //| cmplesb 0, RA, 0x0, pred0
    //| disp ctpr1, >8                        // start <= 0?
    //| ct ctpr1, pred0
    //|4:
    //| subs 0, TMP1, RA, TMP1
    //| cmplsb 0, TMP1, 0x0, pred0
    //| disp ctpr1, ->fff_emptystr            // start > end?
    //| ct ctpr1, pred0
    //| addd 0, RB, RA, RD
    //| addd 0, RD, #STR-1, RD
    //| adds 0, TMP1, 0x1, TMP1
    //|5:
    //| disp ctpr1, ->fff_newstr
    //| ct ctpr1
    //|6: // Negative end or overflow.
    //| cmplsb 0, RC, TMP1, pred0
    //| disp ctpr1, >7
    //| ct ctpr1, pred0
    //| adds 0, TMP1, RC, TMP1                   // end = end+(len+1)
    //| adds 0, TMP1, 0x1, TMP1
    //| disp ctpr1, <3
    //| ct ctpr1
    //|7: // Overflow.
    //| adds 0, RC, 0x0, TMP1                    // end = len
    //| disp ctpr1, <3
    //| ct ctpr1
    //|8: // Negative start or underflow.
    //| cmpesb 0, RA, 0x0, pred0
    //| disp ctpr1, >9
    //| ct ctpr1, pred0
    //| adds 0, RA, RC, RA                       // start = start+(len+1)
    //| adds 0, RA, 0x1, RA
    //| cmplesb 0, RA, 0x0, pred0
    //| disp ctpr1, <4                        // start >0?
    //| ct ctpr1, ~pred0
    //|9: // Underflow.
    //| adds 0, 0x0, 0x1, RA                     // start = 1
    //| disp ctpr1, <4
    //| ct ctpr1
    //|
    //|->fff_emptystr:                        // Range underflow.
    //| xors 0, TMP1, TMP1, TMP1                 // Zero length. Any ptr in RD is ok.
    //| disp ctpr1, <5
    //| ct ctpr1
    //|
    //|.macro ffstring_op, name
    //| .ffunc_1 string_ .. name
    //| ffgccheck
    //| ldd 0, BASE, 0x0, CARG2
    //| checkstr CARG2, ->fff_fallback
    //| ldd 0, STACK, SAVE_L, RB
    //| addd 0, DISPATCH, DISPATCH_GL(tmpbuf), CARG1
    //| std 2, RB, L->base, BASE
    //| ldd 0, CARG1, SBUF->b, RC
    //| std 2, CARG1, SBUF->L, RB
    //| std 2, CARG1, SBUF->p, RC
    //| std 2, STACK, SAVE_PC, PC
    //| disp ctpr1, extern lj_buf_putstr_ .. name
    //| call ctpr1, wbs = 0x8
    //| addd 0, CRET1, 0x0, CARG1
    //| disp ctpr1, extern lj_buf_tostr
    //| call ctpr1, wbs = 0x8
    //| // GStr * returned.
    //| ldd 0, RB, L->base, BASE
    //| ldd 0, BASE, 0xfffffff8, PC
    //| settp CRET1, LJ_TSTR
    //| std 2, BASE, 0xfffffff0, CRET1
    //| addd 0, 0x0, (1+1)*8, RD
    //| disp ctpr1, ->fff_res
    //| ct ctpr1
    //|.endmacro
    //|
    //| ffstring_op reverse
    dasm_put(Dst, 6309, sizeof(GCstr)-1, (1+1)*8, DISPATCH_GL(gc.total), DISPATCH_GL(gc.threshold), Dt1(->base), Dt1(->top), Dt1(->base), Dt1(->top));
#line 2103 "vm_e2k.dasc"
    //| ffstring_op lower
    dasm_put(Dst, 6476, LJ_TSTR, DISPATCH_GL(tmpbuf), Dt1(->base), DtE(->b), DtE(->L), DtE(->p), Dt1(->base), LJ_TSTR, (1+1)*8, (1+1)*8, DISPATCH_GL(gc.total), DISPATCH_GL(gc.threshold), Dt1(->base), Dt1(->top), Dt1(->base), Dt1(->top));
#line 2104 "vm_e2k.dasc"
    //| ffstring_op upper
    dasm_put(Dst, 6660, LJ_TSTR, DISPATCH_GL(tmpbuf), Dt1(->base), DtE(->b), DtE(->L), DtE(->p), Dt1(->base), LJ_TSTR, (1+1)*8, (1+1)*8, DISPATCH_GL(gc.total), DISPATCH_GL(gc.threshold), Dt1(->base), Dt1(->top), Dt1(->base), Dt1(->top));
#line 2105 "vm_e2k.dasc"
    //|
    //|//-- Bit library --------------------------------------------------------
    //|
    //|.macro .ffunc_bit, name, fdef
    //| fdef bit_ .. name
    //| ldd 0, BASE, 0x0, TMP0
    //| checknumtp TMP0, ->fff_fallback
    //| faddd 0, TMP0, U64x(0x43380000,0x00000000), TMP0
    //| adds 0, TMP0, 0x0, RB
    //|.endmacro
    //|
    //|.macro .ffunc_bit_op, name, ins
    //| .ffunc_bit name, .ffunc_1
    //| addd 0, RD, 0x0, TMP1                    // Save for fallback.
    //| addd 0, BASE, RD, RD
    //| subd 0, RD, 0x10, RD
    //|1:
    //| istofd 0, RB, TMP0
    //| cmpbedb 0, RD, BASE, pred0
    //| disp ctpr1, ->fff_resb
    //| ct ctpr1, pred0
    //| ldd 0, RD, 0x0, TMP0
    //| checknumtp TMP0, ->fff_fallback_bit_op
    //| faddd 0, TMP0, U64x(0x43380000,0x00000000), TMP0
    //| adds 0, TMP0, 0x0, RA
    //| ins 0, RB, RA, RB
    //| subd 0, RD, 0x8, RD
    //| disp ctpr1, <1
    //| ct ctpr1
    //|.endmacro
    //|
    //|.ffunc_bit_op band, ands
    //|.ffunc_bit_op bor, ors
    dasm_put(Dst, 6844, LJ_TSTR, DISPATCH_GL(tmpbuf), Dt1(->base), DtE(->b), DtE(->L), DtE(->p), Dt1(->base), LJ_TSTR, (1+1)*8, (1+1)*8, LJ_TISNUM, LJ_TISNUM);
#line 2138 "vm_e2k.dasc"
    //|.ffunc_bit_op bxor, xors
    //|
    //|.ffunc_bit tobit, .ffunc_1
    //| istofd 0, RB, TMP0
    //| disp ctpr1, ->fff_resb
    //| ct ctpr1
    //|
    //|.ffunc_bit bswap, .ffunc_1
    dasm_put(Dst, 7041, (1+1)*8, LJ_TISNUM, LJ_TISNUM, (1+1)*8, LJ_TISNUM, LJ_TISNUM, (1+1)*8, LJ_TISNUM);
#line 2146 "vm_e2k.dasc"
    //| sxt 0, 0x6, RB, RB
    //| addd 0, 0x0, U64x(0x80808080,0x00010203), TMP0
    //| pshufb 0, RB, RB, TMP0, RB
    //| istofd 0, RB, TMP0
    //| disp ctpr1, ->fff_resb
    //| ct ctpr1
    //|
    //|.ffunc_bit bnot, .ffunc_1
    //| xors 0, RB, 0xffffffff, RB
    //| istofd 0, RB, TMP0
    //| disp ctpr1, ->fff_resb
    //| ct ctpr1
    //|
    //|->fff_fallback_bit_op:
    //| addd 0, TMP1, 0x0, RD                    // Restore for fallback
    //| disp ctpr1, ->fff_fallback
    //| ct ctpr1
    //|
    //|.macro .ffunc_bit_sh, name, ins
    //| .ffunc_nn bit_..name
    //| faddd 0, CARG1, U64x(0x43380000,0x00000000), TMP0
    //| faddd 0, CARG2, U64x(0x43380000,0x00000000), TMP1
    //| adds 0, TMP0, 0x0, RB
    //| adds 0, TMP1, 0x0, RA
    //| ands 0, RA, 0xff, RA
    //| ins 0, RB, RA, RB
    //| istofd 0, RB, TMP0
    //| disp ctpr1, ->fff_resb
    //| ct ctpr1
    //|.endmacro
    //|
    //|.ffunc_bit_sh lshift, shls
    //|.ffunc_bit_sh rshift, shrs
    //|.ffunc_bit_sh arshift, sars
    dasm_put(Dst, 7256, (1+1)*8, LJ_TISNUM, (1+1)*8, LJ_TISNUM, (2+1)*8, LJ_TISNUM, LJ_TISNUM, (2+1)*8, LJ_TISNUM, LJ_TISNUM);
#line 2180 "vm_e2k.dasc"
    //|.ffunc_bit_sh rol, scls
    //|.ffunc_bit_sh ror, scrs
    //|
    //|//-----------------------------------------------------------------------
    //|
    //|->fff_fallback_1:
    dasm_put(Dst, 7507, (2+1)*8, LJ_TISNUM, LJ_TISNUM, (2+1)*8, LJ_TISNUM, LJ_TISNUM, (2+1)*8, LJ_TISNUM, LJ_TISNUM);
#line 2186 "vm_e2k.dasc"
    //| addd 0, 0x0, (1+1)*8, RD                 // Other args are ignored, anyway.
    //|->fff_fallback:                        // Call fast function fallback handler.
    //| // BASE = new base, RD = (nargs+1)*8
    //| ldd 0, STACK, SAVE_L, RB
    //| ldd 0, BASE, 0xfffffff8, PC              // Fallback may overwrite PC.
    //| std 2, STACK, SAVE_PC, PC                // Redundant (but a defined value).
    //| std 2, RB, L->base, BASE
    //| addd 0, BASE, RD, RD
    //| subd 0, RD, 0x8, RD
    //| addd 0, RD, 8*LUA_MINSTACK, RA           // Ensure enough space for handler.
    //| std 2, RB, L->top, RD
    //| ldd 0, BASE, 0xfffffff0, RD
    //| cleartp RD
    //| ldd 0, RB, L->maxstack, TMP0
    //| cmpbedb 0, RA, TMP0, pred0
    //| disp ctpr1, >5                        // Need to grow stack.
    //| ct ctpr1, ~pred0
    //| addd 0, RB, 0x0, CARG1
    //| ldd 0, RD, CFUNC->f, TMP0
    //| movtd 0, TMP0, ctpr1
    //| call ctpr1, wbs = 0x8                 // (lua_State *L)
    //| // Either throws an error, or recovers and returns -1, 0 or nresults+1.
    //| ldd 0, RB, L->base, BASE
    //| shld 0, CRET1, 0x3, RD
    //| cmpledb 0, CRET1, 0x0, pred0
    //| disp ctpr1, ->fff_res                 // Returned nresults+1?
    //| ct ctpr1, ~pred0
    //|1:
    //| ldd 0, RB, L->top, RA
    //| subd 0, RA, BASE, RA
    //| cmpedb 0, CRET1, 0x0, pred0
    //| addd 0, RA, 0x8, RD
    //| ldd 0, BASE, 0xfffffff0, RB
    //| disp ctpr1, ->vm_call_tail            // Returned -1?
    //| ct ctpr1, ~pred0
    //| cleartp RB
    //| ins_callt                             // Returned 0: retry fast path.
    //|
    //|// Reconstruct previous base for vmeta_call during tailcall.
    //|->vm_call_tail:
    //| addd 0, BASE, 0x0, RA
    //| cmpandesb 0, PC, FRAME_TYPE, pred0
    //| disp ctpr1, >3
    //| ct ctpr1, ~pred0
    //| ldb 0, PC, PC_RA, RB
    //| subd 0, 0x0, RB, RB
    //| shld 0, RB, 0x3, TMP0
    //| addd 0, BASE, TMP0, BASE
    //| subd 0, BASE, 0x10, BASE                 // base = base - (RB+2)*8
    //| // BASE = old base, RA = new base, RD = (nargs+1)*8, PC = caller PC
    //| ldd 0, RA, 0xfffffff0, RB
    //| checkfunc RB, ->vmeta_call
    //| addd 0, RA, 0x0, BASE
    //| ins_call
    //| // BASE = new base, RB = func, RD = (nargs+1)*8, PC = caller PC
    //|3:
    //| addd 0, PC, 0x0, RB
    //| andd 0, RB, 0xfffffff8, RB
    //| subd 0, BASE, RB, BASE
    //| // BASE = old base, RA = new base, RD = (nargs+1)*8, PC = caller PC
    //| ldd 0, RA, 0xfffffff0, RB
    //| checkfunc RB, ->vmeta_call
    //| addd 0, RA, 0x0, BASE
    //| ins_call
    //| // BASE = new base, RB = func, RD = (nargs+1)*8, PC = caller PC
    //|5: // Grow stack for fallback handler.
    dasm_put(Dst, 7724, (1+1)*8, Dt1(->base), 8*LUA_MINSTACK, Dt1(->top), Dt1(->maxstack), Dt8(->f), Dt1(->base), Dt1(->top), Dt7(->pc), FRAME_TYPE, LJ_TFUNC, Dt7(->pc), LJ_TFUNC, Dt7(->pc));
#line 2252 "vm_e2k.dasc"
    //| addd 0, 0x0, LUA_MINSTACK, CARG2
    //| addd 0, RB, 0x0, CARG1
    //| disp ctpr1, extern lj_state_growstack // (lua_State *L, int n)
    //| call ctpr1, wbs = 0x8
    //| ldd 0, RB, L->base, BASE
    //| addd 0, 0x0, 0x0, CRET1                  // Simulate a return 0.
    //| disp ctpr1, <1                        // Dumb retry (goes through ff first).
    //| ct ctpr1
    //|
    //|//-----------------------------------------------------------------------
    //|//-- Special dispatch targets -------------------------------------------
    //|//-----------------------------------------------------------------------
    //|
    //|->vm_record:                           // Dispatch target for recording phase.
    //| do_fault
    //|
    //|->vm_rethook:                          // Dispatch target for return hooks.
    //| ldb 0, DISPATCH, DISPATCH_GL(hookmask), RD
    //| cmpandedb 0, RD, HOOK_ACTIVE, pred0
    //| disp ctpr1, >5                        // Hook already active?
    //| ct ctpr1, ~pred0
    //| disp ctpr1, >1
    //| ct ctpr1
    //|
    //|->vm_inshook:                          // Dispatch target for instr/line hooks.
    //| ldb 0, DISPATCH, DISPATCH_GL(hookmask), RD
    //| cmpandedb 0, RD, HOOK_ACTIVE, pred0
    //| disp ctpr1, >5                        // Hook already active?
    //| ct ctpr1, ~pred0
    //| cmpandedb 0, RD, LUA_MASKLINE|LUA_MASKCOUNT, pred0
    //| disp ctpr1, >5
    //| ct ctpr1, pred0
    //| ldw 0, DISPATCH, DISPATCH_GL(hookcount), TMP0
    //| subd 0, TMP0, 0x1, TMP0
    //| stw 2, DISPATCH, DISPATCH_GL(hookcount), TMP0
    //| cmpedb 0, TMP0, 0x0, pred0
    //| disp ctpr1, >1
    //| ct ctpr1, pred0
    //| cmpandedb 0, RD, LUA_MASKLINE, pred0
    //| disp ctpr1, >5
    //| ct ctpr1, pred0
    //|1:
    //| ldd 0, STACK, SAVE_L, RB
    //| std 2, RB, L->base, BASE
    //| addd 0, PC, 0x0, CARG2
    //| addd 0, RB, 0x0, CARG1
    //| // SAVE_PC must hold the _previous_ PC. The callee updates it with PC.
    //| disp ctpr1, extern lj_dispatch_ins    // (lua_State *L, const BCIns *pc)
    //| call ctpr1, wbs = 0x8
    //|3:
    dasm_put(Dst, 8028, LUA_MINSTACK, Dt1(->base), DISPATCH_GL(hookmask), HOOK_ACTIVE, DISPATCH_GL(hookmask), HOOK_ACTIVE, LUA_MASKLINE|LUA_MASKCOUNT, DISPATCH_GL(hookcount), DISPATCH_GL(hookcount), LUA_MASKLINE, Dt1(->base));
#line 2302 "vm_e2k.dasc"
    //| ldd 0, RB, L->base, BASE
    //|4:
    //| ldb 0, PC, PC_RA, RA
    //| shld 0, RA, 0x3, RA
    //|5:
    //| ldb 0, PC, PC_OP, TMP1
    //| shld 0, TMP1, 0x3, TMP1
    //| ldh 0, PC, PC_RD, RD
    //| shrd 0, RD, 0x5, RB
    //| shld 0, RD, 0x3, RD
    //| andd 0, RB, 0x7f8, RB
    //| andd 0, RD, 0x7f8, RC
    //| addd 0, DISPATCH, TMP1, TMP1
    //| ldd 0, TMP1, GG_DISP2STATIC, TMP1
    //| movtd 0, TMP1, ctpr1
    //| ct ctpr1
    //|
    //|->cont_hook:                           // Continue from hook yield.
    //| do_fault
    //|
    //|->vm_callhook:                         // Dispatch target for call hooks.
    //| std 2, STACK, SAVE_PC, PC
    //|
    //|->vm_hotcall:                          // Hot call counter underflow.
    //| addd 0, BASE, RD, RD
    //| subd 0, RD, 0x8, RD
    //| ldd 0, STACK, SAVE_L, RB
    //| std 2, RB, L->base, BASE
    //| std 2, RB, L->top, RD
    //| addd 0, PC, 0x0, CARG2
    //| addd 0, RB, 0x0, CARG1
    //| disp ctpr1, extern lj_dispatch_call   // (lua_State *L, const BCIns *pc)
    //| call ctpr1, wbs = 0x8
    //| // ASMFunction returned.
    //| addd 0, 0x0, 0x0, TMP0
    //| std 2, STACK, SAVE_PC, TMP0              // Invalidate for subsequent line hook.
    //| ldd 0, RB, L->base, BASE
    //| addd 0, CRET1, 0x0, RA
    //| ldd 0, RB, L->top, RD
    //| subd 0, RD, BASE, RD
    //| movtd 0, RA, ctpr1
    //| ldb 0, PC, PC_RA, RA
    //| shld 0, RA, 0x3, RA
    //| addd 0, RD, 0x8, RD
    //| ct ctpr1
    //|
    //|->vm_profhook:                         // Dispatch target for profiler hook.
    dasm_put(Dst, 8158, Dt1(->base), GG_DISP2STATIC, Dt1(->base), Dt1(->top), Dt1(->base), Dt1(->top));
#line 2349 "vm_e2k.dasc"
#if LJ_HASPROFILE
    //| ldd 0, STACK, SAVE_L, RB
    //| std 2, RB, L->base, BASE
    //| addd 0, PC, 0x0, CARG2
    //| addd 0, RB, 0x0, CARG1
    //| disp ctpr1, extern lj_dispatch_profile // (lua_State *L, const BCIns *pc)
    //| call ctpr1, wbs = 0x8
    //| ldd 0, RB, L->base, BASE
    //| // HOOK_PROFILE is off again, so re-dispatch to dynamic instruction.
    //| subd 0, PC, 0x4, PC
    //| ins_next
    dasm_put(Dst, 8279, Dt1(->base), Dt1(->base));
#line 2360 "vm_e2k.dasc"
#endif
    //|
    //|//-----------------------------------------------------------------------
    //|//-- Trace exit handler -------------------------------------------------
    //|//-----------------------------------------------------------------------
    //|
    //| // Unsupported
    //|
    //|//-----------------------------------------------------------------------
    //|//-- Math helper functions ----------------------------------------------
    //|//-----------------------------------------------------------------------
    //|
    //|// FP value rounding. Called by math.floor/math.ceil fast functions.
    //|.macro vm_round, name, mode
    //|->name:
    //| set_frame_4
    //| andd 0, RARG1, U64x(0x80000000,0x00000000), RARG2 // Isolate sign bit.
    //| andd 0, RARG1, U64x(0x7fffffff,0xffffffff), RARG3 // |x|
    //| fcmpnltdb 0, RARG3, U64x(0x43300000,0x00000000), pred0 // No truncation if |x| >= 2^52.
    //| disp ctpr1, >3
    //| ct ctpr1, pred0
    //|.if mode == 2                          // trunc(x)?
    //| faddd 0, RARG3, U64x(0x43300000,0x00000000), RARG4 // (|x| + 2^52) - 2^52
    //| fsubd 0, RARG4, U64x(0x43300000,0x00000000), RARG4
    //| fcmpltdb 0, RARG3, RARG4, pred0          // |x| < result?
    //| disp ctpr1, >1
    //| ct ctpr1, ~pred0
    //| fsubd 0, RARG4, U64x(0x3ff00000,0x00000000), RARG4 // if yes, substruct -1.
    //|1:
    //| ord 0, RARG4, RARG2, RARG4               // Merge sign bit back in.
    //|.else
    //| faddd 0, RARG3, U64x(0x43300000,0x00000000), RARG4 // (|x| + 2^52) - 2^52
    //| fsubd 0, RARG4, U64x(0x43300000,0x00000000), RARG4
    //| ord 0, RARG4, RARG2, RARG4               // Merge sign bit back in.
    //| .if mode == 1                         // ceil(x)?
    //|  fcmpnledb 0, RARG1, RARG4, pred0        // x > result?
    //|  addd 0, 0x0, U64x(0xbff00000,0x00000000), RARG2
    //| .else                                 // floor(x)?
    //|  fcmpltdb 0, RARG1, RARG4, pred0         // x < result?
    //|  addd 0, 0x0, U64x(0x3ff00000,0x00000000), RARG2
    //| .endif
    //| disp ctpr1, >2
    //| ct ctpr1, ~pred0
    //| fsubd 0, RARG4, RARG2, RARG4             // If yes, substruct +-1.
    //|.endif
    //|2:
    //| addd 0, RARG4, 0x0, RRET1
    //|3:
    //| return ctpr3
    //| ct ctpr3
    //|.endmacro
    //|
    //| vm_round vm_floor, 0
    //| vm_round vm_ceil,  1
    //| vm_round vm_trunc, 2
    //|
    //|// modulo x%y. Called by BC_MOD* and vm_arith.
    //|->vm_mod:
    //| set_frame_4
    //| fdivd 5, RARG1, RARG2, RARG3
    //| andd 0, RARG3, U64x(0x7fffffff,0xffffffff), RARG4 // |x/y|
    //| fcmpnltdb 0, RARG4, U64x(0x43300000,0x00000000), pred0 // |x/y| >= 2^52
    //| disp ctpr1, >2
    //| ct ctpr1, pred0
    //| andd 0, RARG3, U64x(0x80000000,0x00000000), RARG5 // Isolate sign bit.
    //| faddd 0, RARG4, U64x(0x43300000,0x00000000), RARG4 // (|x/y| + 2^52) - 2^52
    //| fsubd 0, RARG4, U64x(0x43300000,0x00000000), RARG4
    //| ord 0, RARG4, RARG5, RARG4               // Merge sign bit back in.
    //| fcmpltdb 0, RARG3, RARG4, pred0
    //| disp ctpr1, >1                        // x/y < result?
    //| ct ctpr1, ~pred0
    //| fsubd 0, RARG4, U64x(0x3ff00000,0x00000000), RARG4 // If yes, subtract 1.0.
    //|1:
    //| fmuld 0, RARG2, RARG4, RARG2
    //| fsubd 0, RARG1, RARG2, RRET1
    //| return ctpr3
    //| ct ctpr3
    //|2:
    //| fmuld 0, RARG2, RARG3, RARG2
    //| fsubd 0, RARG1, RARG2, RRET1
    //| return ctpr3
    //| ct ctpr3
    //|
    //|//-----------------------------------------------------------------------
    //|//-- Miscellaneous functions --------------------------------------------
    //|//-----------------------------------------------------------------------
    //|
    //|//-----------------------------------------------------------------------
    //|//-- Assertions ---------------------------------------------------------
    //|//-----------------------------------------------------------------------
    //|
    //|->assert_bad_for_arg_type:
    //| addd 0, 0x5, 0x0, CARG1
    //| disp ctpr1, extern raise              // sigtrap
    //| call ctpr1, wbs = 0x8
    //|
    //|//-----------------------------------------------------------------------
    //|//-- FFI helper functions -----------------------------------------------
    //|//-----------------------------------------------------------------------
    //|
    //|// Handler for callback functions.
    //|->vm_ffi_callback:
    //|.if FFI
    //| .type CTSTATE, CTState
#define DtF(_V) (int)(ptrdiff_t)&(((CTState *)0)_V)
#line 2464 "vm_e2k.dasc"
    //| // unsupported ??
    //| addd 0, 0x0, 0x0, TMP0
    //|.endif
    //|
    //|->cont_ffi_callback:                   // Return from FFI callback.
    dasm_put(Dst, 8333);
#line 2469 "vm_e2k.dasc"
    //|.if FFI
    //| ldd 0, STACK, SAVE_L, RA
    //| ldd 0, DISPATCH, DISPATCH_GL(ctype_state), PC
    //| std 2, PC, CTSTATE->L, RA
    //| std 2, RA, L->base, BASE
    //| std 2, RA, L->top, RB
    //| addd 0, PC, 0x0, CARG1
    //| addd 0, CRET1, 0x0, CARG2
    //| disp ctpr1, extern lj_ccallback_leave // (CTState *cts, TValue *o)
    //| call ctpr1, wbs = 0x8
    //| ldd 0, PC, CTSTATE->cb.gpr[0], RRET1
    //| return ctpr3
    //| ct ctpr3
    //|.endif
    //|
    //|->vm_ffi_call:                         // Call C function via FFI.
    //|.if FFI
    //| setwd wsz = 0x8, nfx = 0x1, dbl = 0x0
    //| setbn rsz = 0x3, rbs = 0x4, rcur = 0x0
    //| .type CCSTATE, CCallState
#define Dt10(_V) (int)(ptrdiff_t)&(((CCallState *)0)_V)
#line 2489 "vm_e2k.dasc"
    //| ldw 0, RARG1, CCSTATE->spadj, RARG3
    //| subd 0, 0x0, RARG3, RARG3
    //| getsp 0, RARG3, RARG4                    // allocate stack for parameters and return value
    //|
    //| // Copy stack slots.
    //| ldb 0, RARG1, CCSTATE->nsp, RARG5
    //| subd 0, RARG5, 0x1, RARG5
    //| cmpldb 0, RARG5, 0x0, pred0
    //| disp ctpr1, >2
    //| ct ctpr1, pred0
    //| shld 0, RARG5, 0x3, RARG5
    //|1:
    //| addd 0, RARG5, 0x40, RARG2
    //| addd 0, RARG1, offsetof(CCallState, stack), RARG6
    //| ldd 0, RARG6, RARG5, RARG6               // read stack parameters
    //| std 2, RARG4, RARG2, RARG6               // write to allocated stack
    //| subd 0, RARG5, 0x8, RARG5
    //| cmpldb 0, RARG5, 0x0, pred0
    //| disp ctpr1, <1
    //| ct ctpr1, ~pred0
    //|2: // wrire register parameters on stack too
    //| ldd 0, RARG1, CCSTATE->gpr[0], CARG1
    //| std 2, RARG4, 0x0, CARG1
    //| ldd 0, RARG1, CCSTATE->gpr[1], CARG2
    //| std 2, RARG4, 0x8, CARG2
    //| ldd 0, RARG1, CCSTATE->gpr[2], CARG3
    //| std 2, RARG4, 0x10, CARG3
    //| ldd 0, RARG1, CCSTATE->gpr[3], CARG4
    //| std 2, RARG4, 0x18, CARG4
    //| ldd 0, RARG1, CCSTATE->gpr[4], CARG5
    //| std 2, RARG4, 0x20, CARG5
    //| ldd 0, RARG1, CCSTATE->gpr[5], CARG6
    //| std 2, RARG4, 0x28, CARG6
    //| ldd 0, RARG1, CCSTATE->gpr[6], CARG7
    //| std 2, RARG4, 0x30, CARG7
    //| ldd 0, RARG1, CCSTATE->gpr[7], CARG8
    //| std 2, RARG4, 0x38, CARG8
    //| // Now we are ready to call
    //| ldd 0, RARG1, CCSTATE->func, RARG2
    //| movtd 0, RARG2, ctpr1
    //| call ctpr1, wbs = 0x4
    //| // speculatively write from return regs, if result > 8*8 bytes, read all from stack
    //| ldw 0, RARG1, CCSTATE->ret_size, RARG2
    //| cmpedb 0, RARG2, 0x0, pred0
    //| disp ctpr1, >3
    //| ct ctpr1, pred0
    //| addd 0, RARG2, 0x0, CARG3
    //| addd 0, RARG4, 0x0, CARG2
    //| ldd 0, RARG1, CCSTATE->ret_stack, CARG1
    //| disp ctpr1, extern memcpy
    //| call ctpr1, wbs = 0x4
    //| return ctpr3
    //| ct ctpr3
    //|3:
    dasm_put(Dst, 8568, DISPATCH_GL(ctype_state), DtF(->L), Dt1(->base), Dt1(->top), DtF(->cb.gpr[0]), Dt10(->spadj), Dt10(->nsp), offsetof(CCallState, stack), Dt10(->gpr[0]), Dt10(->gpr[1]), Dt10(->gpr[2]), Dt10(->gpr[3]), Dt10(->gpr[4]), Dt10(->gpr[5]), Dt10(->gpr[6]), Dt10(->gpr[7]), Dt10(->func), Dt10(->ret_size), Dt10(->ret_stack));
#line 2543 "vm_e2k.dasc"
    //| stdsm 2, RARG1, CCSTATE->gpr[0], CRET1
    //| stdsm 2, RARG1, CCSTATE->gpr[1], CRET2
    //| stdsm 2, RARG1, CCSTATE->gpr[2], CRET3
    //| stdsm 2, RARG1, CCSTATE->gpr[3], CRET4
    //| stdsm 2, RARG1, CCSTATE->gpr[4], CRET5
    //| stdsm 2, RARG1, CCSTATE->gpr[5], CRET6
    //| stdsm 2, RARG1, CCSTATE->gpr[6], CRET7
    //| stdsm 2, RARG1, CCSTATE->gpr[7], CRET8
    //| return ctpr3
    //| ct ctpr3
    //|.endif
    //|//-----------------------------------------------------------------------
    dasm_put(Dst, 8783, Dt10(->gpr[0]), Dt10(->gpr[1]), Dt10(->gpr[2]), Dt10(->gpr[3]), Dt10(->gpr[4]), Dt10(->gpr[5]), Dt10(->gpr[6]), Dt10(->gpr[7]));
#line 2555 "vm_e2k.dasc"
}

/* Generate the code for a single instruction. */
static void build_ins(BuildCtx *ctx, BCOp op, int defop)
{
    int vk = 0;
    //|=>defop:
    dasm_put(Dst, 8829, defop);
#line 2562 "vm_e2k.dasc"

    switch (op) {

    /* -- Comparison ops ---------------------------------------------------- */

    /* Remember: all ops branch for a true comparison, fall through otherwise. */

    //|.macro jmp_comp, lt, ge, le, gt, target
    //||switch (op) {
    //|| case BC_ISLT:
    //| lt 0, RA, RD, pred0
    //||  break;
    //|| case BC_ISGE:
    //| ge 0, RA, RD, pred0
    //||  break;
    //|| case BC_ISLE:
    //| le 0, RA, RD, pred0
    //||  break;
    //|| case BC_ISGT:
    //| gt 0, RA, RD, pred0
    //||  break;
    //|| default: break;
    //||}
    //| disp ctpr1, target
    //| ct ctpr1, ~pred0
    //|.endmacro

    case BC_ISLT: case BC_ISGE: case BC_ISLE: case BC_ISGT:
        //| ins_AD // RA = src1*8, RD = src2*8, JMP with RD = target
        //| ldd 0, BASE, RA, ITYPE
        //| ldd 0, BASE, RD, RB
        //| addd 0, ITYPE, 0x0, RA
        //| addd 0, RB, 0x0, RD
        //| sard 0, ITYPE, 0x2f, ITYPE
        //| sard 0, RB, 0x2f, RB
        //| disp ctpr1, ->vmeta_comp
        //| cmpbsb 0, ITYPE, LJ_TISNUM, pred0
        //| ct ctpr1, ~pred0
        //| cmpbsb 0, RB, LJ_TISNUM, pred0
        //| ct ctpr1, ~pred0
        //| addd 0, PC, 0x4, PC
        //| // To preserve NaN semantics GE/GT branch on unordered, but LT/LE don't.
        //| jmp_comp fcmpltdb, fcmpnltdb, fcmpledb, fcmpnledb, >1
        dasm_put(Dst, 8831, LJ_TISNUM, LJ_TISNUM);
        switch (op) {
         case BC_ISLT:
        dasm_put(Dst, 8867);
          break;
         case BC_ISGE:
        dasm_put(Dst, 8870);
          break;
         case BC_ISLE:
        dasm_put(Dst, 8873);
          break;
         case BC_ISGT:
        dasm_put(Dst, 8876);
          break;
         default: break;
        }
#line 2605 "vm_e2k.dasc"
        //| ldh 0, PC, PC_RD, RD
        //| branchPC RD
        //|1:
        //| ins_next
        dasm_put(Dst, 8879, BCBIAS_J*4);
#line 2609 "vm_e2k.dasc"
        break;

    case BC_ISEQV: case BC_ISNEV:
        vk = op == BC_ISEQV;
        //| ins_AD // RA = src1*8, RD = src2*8, JMP with RD = target
        //| ldd 0, BASE, RD, RB
        //| ldd 0, BASE, RA, ITYPE
        //| addd 0, PC, 0x4, PC
        //| addd 0, RB, 0x0, RD
        //| addd 0, ITYPE, 0x0, RA
        //| sard 0, RB, 0x2f, RB
        //| sard 0, ITYPE, 0x2f, ITYPE
        //| disp ctpr1, >5
        //| cmpbsb 0, RB, LJ_TISNUM, pred0
        //| ct ctpr1, ~pred0
        //| cmpbsb 0, ITYPE, LJ_TISNUM, pred0
        //| ct ctpr1, ~pred0
        //| fcmpuoddb 0, RA, RD, pred0
        //| fcmpeqdb 0, RA, RD, pred1
        dasm_put(Dst, 8925, LJ_TISNUM, LJ_TISNUM);
#line 2628 "vm_e2k.dasc"
        if (vk) {
        //| disp ctpr1, >2
        //| ct ctpr1, pred0
        //| ct ctpr1, ~pred1
        //|1: // EQ: Branch to the target.
        //| ldh 0, PC, PC_RD, RD
        //| branchPC RD
        //|2: // NE: Fallthrough to next instruction.
        dasm_put(Dst, 8965, BCBIAS_J*4);
#line 2636 "vm_e2k.dasc"
        } else {
        //| disp ctpr1, >2
        //| ct ctpr1, pred0
        //| disp ctpr1, >1
        //| ct ctpr1, pred1
        //|2: // NE: Branch to the target.
        //| ldh 0, PC, PC_RD, RD
        //| branchPC RD
        //|1: // EQ: Fallthrough to next instruction.
        dasm_put(Dst, 8988, BCBIAS_J*4);
#line 2645 "vm_e2k.dasc"
        }
        //| ins_next
        //|5: // Either or both types are not numbers.
        //|.if FFI
        //| cmpesb 0, RB, LJ_TCDATA, pred0
        //| disp ctpr1, ->vmeta_equal_cd
        //| ct ctpr1, pred0
        //| cmpesb 0, ITYPE, LJ_TCDATA, pred0
        //| ct ctpr1, pred0
        //|.endif
        //| cmpedb 0, RA, RD, pred0
        //| disp ctpr1, <1                    // Same GCobjs or pvalues?
        //| ct ctpr1, pred0
        //| cmpesb 0, RB, ITYPE, pred0
        //| disp ctpr1, <2                    // Not the same type?
        //| ct ctpr1, ~pred0
        //| cmpbesb 0, RB, LJ_TISTABUD, pred0
        //| ct ctpr1, ~pred0                  // Different objects and not table/ud?
        //| // Different tables or userdatas. Need to check __eq metamethod.
        //| // Field metatable must be at same offset for GCtab and GCudata!
        //| cleartp RA
        //| ldd 0, RA, TAB->metatable, RB
        //| cmpedb 0, RB, 0x0, pred0
        //| disp ctpr1, <2                    // No metatable?
        //| ct ctpr1, pred0
        //| ldb 0, RB, TAB->nomm, TMP0
        //| cmpandedb 0, TMP0, 1<<MM_eq, pred0
        //| ct ctpr1, ~pred0                  //  Or 'no __eq' flag set?
        dasm_put(Dst, 9014, LJ_TCDATA, LJ_TCDATA, LJ_TISTABUD, Dt6(->metatable), Dt6(->nomm), 1<<MM_eq);
#line 2673 "vm_e2k.dasc"
        if (vk) {
        //| addd 0, 0x0, 0x0, RB                 // ne = 0
        dasm_put(Dst, 9112);
#line 2675 "vm_e2k.dasc"
        } else {
        //| addd 0, 0x0, 0x1, RB                 // ne = 1
        dasm_put(Dst, 9115);
#line 2677 "vm_e2k.dasc"
        }
        //| disp ctpr1, ->vmeta_equal         // Handle __eq metamethod.
        //| ct ctpr1
        dasm_put(Dst, 9118);
#line 2680 "vm_e2k.dasc"
        break;

    case BC_ISEQS: case BC_ISNES:
        vk = op == BC_ISEQS;
        //| ins_AND // RA = src*8, RD = str_const*8, JMP with RD = target
        //| ldd 0, BASE, RA, RB
        //| subd 0, KBASE, RD, TMP0
        //| ldd 0, TMP0, 0xfffffff8, RD
        //| addd 0, PC, 0x4, PC
        //| checkstr RB, >3
        //| cmpedb 0, RB, RD, pred0
        dasm_put(Dst, 9124, LJ_TSTR);
#line 2691 "vm_e2k.dasc"
        if (vk) {
        //| disp ctpr1, >2
        //| ct ctpr1, ~pred0
        //|1: // EQ: Branch to the target.
        //| ldh 0, PC, PC_RD, RD
        //| branchPC RD
        //|2: // NE: Fallthrough to next instruction.
        //|.if not FFI
        //|3:
        //|.endif
        dasm_put(Dst, 9161, BCBIAS_J*4);
#line 2701 "vm_e2k.dasc"
        } else {
        //| disp ctpr1, >1
        //| ct ctpr1, pred0
        //|.if not FFI
        //|3:
        //|.endif
        //|2: // NE: Branch to the target.
        //| ldh 0, PC, PC_RD, RD
        //| branchPC RD
        //|1: // EQ: Fallthrough to next instruction.
        dasm_put(Dst, 9182, BCBIAS_J*4);
#line 2711 "vm_e2k.dasc"
        }
        //| ins_next
        //|.if FFI
        //|3:
        //| cmpesb 0, ITYPE, LJ_TCDATA, pred0
        //| disp ctpr1, <2
        //| ct ctpr1, ~pred0
        //| disp ctpr1, ->vmeta_equal_cd
        //| ct ctpr1
        //|.endif
        dasm_put(Dst, 9203, LJ_TCDATA);
#line 2721 "vm_e2k.dasc"
        break;

    case BC_ISEQN: case BC_ISNEN:
        vk = op == BC_ISEQN;
        //| ins_AD // RA = src*8, RD = num_const*8, JMP with RD = target
        //| ldd 0, BASE, RA, RB
        //| addd 0, PC, 0x4, PC
        //| checknum RB, >3
        //| ldd 0, KBASE, RD, TMP0
        //| ldd 0, BASE, RA, TMP1
        //| fcmpuoddb 0, TMP0, TMP1, pred0
        //| fcmpeqdb 0, TMP0, TMP1, pred1
        dasm_put(Dst, 9246, LJ_TISNUM);
#line 2733 "vm_e2k.dasc"
        if (vk) {
        //| disp ctpr1, >2
        //| ct ctpr1, pred0
        //| ct ctpr1, ~pred1
        //|1: // EQ: Branch to the target.
        //| ldh 0, PC, PC_RD, RD
        //| branchPC RD
        //|2: // NE: Fallthrough to next instruction.
        //|.if not FFI
        //|3:
        //|.endif
        dasm_put(Dst, 9275, BCBIAS_J*4);
#line 2744 "vm_e2k.dasc"
        } else {
        //| disp ctpr1, >2
        //| ct ctpr1, pred0
        //| disp ctpr1, >1
        //| ct ctpr1, pred1
        //|.if not FFI
        //|3:
        //|.endif
        //|2: // NE: Branch to the target.
        //| ldh 0, PC, PC_RD, RD
        //| branchPC RD
        //|1: // EQ: Fallthrough to next instruction.
        dasm_put(Dst, 9298, BCBIAS_J*4);
#line 2756 "vm_e2k.dasc"
        }
        //| ins_next
        //|.if FFI
        //|3:
        //| cmpesb 0, ITYPE, LJ_TCDATA, pred0
        //| disp ctpr1, <2
        //| ct ctpr1, ~pred0
        //| disp ctpr1, ->vmeta_equal_cd
        //| ct ctpr1
        //|.endif
        dasm_put(Dst, 9324, LJ_TCDATA);
#line 2766 "vm_e2k.dasc"
        break;

    case BC_ISEQP: case BC_ISNEP:
        vk = op == BC_ISEQP;
        //| ins_AND // RA = src*8, RD = primitive_type*8 (~), JMP with RD = target
        //| ldd 0, BASE, RA, RB
        //| shrd 0, RD, 0x3, RD
        //| xord 0, RD, 0xffffffff, RD
        //| sard 0, RB, 0x2f, RB
        //| addd 0, PC, 0x4, PC
        //| cmpesb 0, RB, RD, pred0
        dasm_put(Dst, 9367);
#line 2777 "vm_e2k.dasc"
        if (vk) {
        //| disp ctpr1, >2
        //| ct ctpr1, ~pred0
        //| ldh 0, PC, PC_RD, RD
        //| branchPC RD
        //|1:
        //| ins_next
        //|2:
        //| cmpesb 0, RB, LJ_TCDATA, pred0
        //| disp ctpr1, <1
        //| ct ctpr1, ~pred0
        //| disp ctpr1, ->vmeta_equal_cd
        //| ct ctpr1
        dasm_put(Dst, 9384, BCBIAS_J*4, LJ_TCDATA);
#line 2790 "vm_e2k.dasc"
        } else {
        //| disp ctpr1, >1
        //| ct ctpr1, pred0
        //| cmpesb 0, RB, LJ_TCDATA, pred0
        //| disp ctpr1, ->vmeta_equal_cd
        //| ct ctpr1, pred0
        //| ldh 0, PC, PC_RD, RD
        //| branchPC RD
        //|1:
        //| ins_next
        dasm_put(Dst, 9446, LJ_TCDATA, BCBIAS_J*4);
#line 2800 "vm_e2k.dasc"
        }
        break;

    /* -- Unary test and copy ops ------------------------------------------- */

    case BC_ISTC: case BC_ISFC: case BC_IST: case BC_ISF:
        //| ins_AD // RA = dst*8 or unused, RD = src*8, JMP with RD = target
        //| ldd 0, BASE, RD, ITYPE
        //| addd 0, PC, 0x4, PC
        dasm_put(Dst, 9502);
#line 2809 "vm_e2k.dasc"
        if (op == BC_ISTC || op == BC_ISFC) {
          //| addd 0, ITYPE, 0x0, RB
          dasm_put(Dst, 9507);
#line 2811 "vm_e2k.dasc"
        }
        //| sard 0, ITYPE, 0x2f, ITYPE
        //| cmpbsb 0, ITYPE, LJ_TISTRUECOND, pred0
        //| disp ctpr1, >1
        dasm_put(Dst, 9510, LJ_TISTRUECOND);
#line 2815 "vm_e2k.dasc"
        if (op == BC_IST || op == BC_ISTC) {
          //| ct ctpr1, ~pred0
          dasm_put(Dst, 9523);
#line 2817 "vm_e2k.dasc"
        } else {
          //| ct ctpr1, pred0
          dasm_put(Dst, 9526);
#line 2819 "vm_e2k.dasc"
        }
        if (op == BC_ISTC || op == BC_ISFC) {
          //| std 2, BASE, RA, RB
          dasm_put(Dst, 9529);
#line 2822 "vm_e2k.dasc"
        }
        //| ldh 0, PC, PC_RD, RD
        //| branchPC RD
        //|1:
        //| ins_next
        dasm_put(Dst, 9532, BCBIAS_J*4);
#line 2827 "vm_e2k.dasc"
        break;

    case BC_ISTYPE:
        //| ins_AD // RA = src*8, RD = -type*8
        //| ldd 0, BASE, RA, RB
        //| sard 0, RB, 0x2c, RB
        //| andd 0, RB, U64x(0xffffffff,0xfffffff8), RB
        //| addd 0, RB, RD, RB
        //| cmpedb 0, RB, 0x0, pred0
        //| disp ctpr1, ->vmeta_istype
        //| ct ctpr1, ~pred0
        //| ins_next
        dasm_put(Dst, 9573);
#line 2839 "vm_e2k.dasc"
        break;

    case BC_ISNUM:
        //| ins_AD // RA = src*8, RD = -(TISNUM-1)*8
        //| ldd 0, BASE, RA, TMP0
        //| checknumtp TMP0, ->vmeta_istype
        //| ins_next
        dasm_put(Dst, 9619, LJ_TISNUM);
#line 2846 "vm_e2k.dasc"
        break;

    /* -- Unary ops --------------------------------------------------------- */

    case BC_MOV:
        //| // ins_AD RA = dst*8, RD = src*8
        //|<
        //| addd 1, PC, 0x4, PC
        //| ldb 2, PC, 0x0, TMP1
        //| ldd 3, BASE, RD, CARG1
        //| ldw 5, PC, 0x0, TMP0
        //| nop 2
        //|>
        //|<
        //| shld 2, TMP1, 0x3, TMP1
        //| shrd 3, TMP0, 0xd, RD
        //| shrd 4, TMP0, 0x5, RA
        //| std 5, BASE, RA, CARG1
        //|>
        //|<
        //| ldd 2, TMP1, DISPATCH, TMP1
        //| andd 3, RD, 0x7fff8, RD
        //| shrd 4, TMP0, 0x15, RB
        //| nop 2
        //|>
        //|<
        //| movtd 0, TMP1, ctpr1
        //| andd 3, RB, 0x7f8, RB
        //| andd 4, RD, 0x7f8, RC
        //|>
        //|<
        //| andd 3, RA, 0x7f8, RA
        //| ct ctpr1
        //|>
        dasm_put(Dst, 9664);
#line 2880 "vm_e2k.dasc"
        break;

    case BC_NOT:
        //| ins_AD // RA = dst*8, RD = src*8
        //| ldd 0, BASE, RD, RB
        //| sard 0, RB, 0x2f, RB
        //| addd 0, 0x0, 0x2, RC
        //| cmpbsb 0, RB, LJ_TISTRUECOND, pred0
        //| disp ctpr1, >1
        //| ct ctpr1, ~pred0
        //| subd 0, RC, 0x1, RC
        //|1:
        //| shld 0, RC, 0x2f, RC
        //| xord 0, RC, 0xffffffff, RC
        //| std 2, BASE, RA, RC
        //| ins_next
        dasm_put(Dst, 9693, LJ_TISTRUECOND);
#line 2896 "vm_e2k.dasc"
        break;

    case BC_UNM:
        //| ins_AD // RA = dst*8, RD = src*8
        //| ldd 0, BASE, RD, RB
        //| checknum RB, ->vmeta_unm
        //| xord 0, RB, U64x(0x80000000,0x00000000), RB
        //| std 2, BASE, RA, RB
        //| ins_next
        dasm_put(Dst, 9751, LJ_TISNUM);
#line 2905 "vm_e2k.dasc"
        break;

    case BC_LEN:
        //| ins_AD // RA = dst*8, RD = src*8
        //| ldd 0, BASE, RD, RD
        //| checkstr RD, >2
        //| ldw 0, RD, STR->len, TMP0
        //| istofd 0, TMP0, TMP1
        //|1:
        //| std 2, BASE, RA, TMP1
        //| ins_next
        //|2:
        //| cmpedb 0, ITYPE, LJ_TTAB, pred0
        //| disp ctpr1, ->vmeta_len
        //| ct ctpr1, ~pred0
        //| addd 0, RD, 0x0, CARG1
        dasm_put(Dst, 9802, LJ_TSTR, Dt5(->len), LJ_TTAB);
#line 2921 "vm_e2k.dasc"
#if LJ_52
        //| ldd 0, RD, TAB->metatable, RB
        //| cmpedb 0, RB, 0x0, pred0
        //| disp ctpr1, >9
        //| ct ctpr1, ~pred0
        //|3:
        dasm_put(Dst, 9878, Dt6(->metatable));
#line 2927 "vm_e2k.dasc"
#endif
        //|->BC_LEN_Z:
        //| disp ctpr1, extern lj_tab_len     // (GCtab *t)
        //| call ctpr1, wbs = 0x8
        //| // Length of table returned.
        //| istofd 0, CRET1, TMP1
        //| ldb 0, PC, PC_RA, RA
        //| shld 0, RA, 0x3, RA
        //| disp ctpr1, <1
        //| ct ctpr1
        dasm_put(Dst, 9892);
#line 2937 "vm_e2k.dasc"
#if LJ_52
        //|9: // Check for __len.
        //| ldb 0, RB, TAB->nomm, TMP0
        //| cmpandedb 0, TMP0, 1<<MM_len, pred0
        //| disp ctpr1, <3
        //| ct ctpr1, ~pred0
        //| disp ctpr1, ->vmeta_len           // 'no __len' flag NOT set: check.
        //| ct ctpr1
        dasm_put(Dst, 9914, Dt6(->nomm), 1<<MM_len);
#line 2945 "vm_e2k.dasc"
#endif
        break;

    /* -- Binary ops -------------------------------------------------------- */

    //|.macro ins_arith_opt, ins, ch, nop_n
    //|| vk = ((int)op - BC_ADDVN) / (BC_ADDNV-BC_ADDVN);
    //|| switch (vk) {
    //||  case 0:
    //|<
    //| ldbsm 2, PC, 0x0, CARG3
    //| ldd 3, KBASE, RC, TMP1
    //| addd 4, RA, 0x0, CARG1
    //| ldd 5, BASE, RB, TMP0
    //| disp ctpr1, ->vmeta_arith_vn
    //| nop 2
    //|>
    //|<
    //| shld 1, CARG3, 0x3, CARG3
    //| sard 3, TMP0, 0x2f, ITYPE
    //| ins ch, TMP0, TMP1, CARG2
    //| nop nop_n
    //|>
    //|<
    //| ldd 2, CARG3, DISPATCH, CARG3
    //| cmpbsb 3, ITYPE, LJ_TISNUM, pred0
    //| ldwsm 5, PC, 0x0, CARG5
    //| nop 2
    //|>
    //||   break;
    //||  case 1:
    //|<
    //| ldbsm 2, PC, 0x0, CARG3
    //| ldd 3, KBASE, RC, TMP1
    //| addd 4, RA, 0x0, CARG1
    //| ldd 5, BASE, RB, TMP0
    //| disp ctpr1, ->vmeta_arith_nv
    //| nop 2
    //|>
    //|<
    //| shld 1, CARG3, 0x3, CARG3
    //| sard 3, TMP0, 0x2f, ITYPE
    //| ins ch, TMP1, TMP0, CARG2
    //| nop nop_n
    //|>
    //|<
    //| ldd 2, CARG3, DISPATCH, CARG3
    //| cmpbsb 3, ITYPE, LJ_TISNUM, pred0
    //| ldwsm 5, PC, 0x0, CARG5
    //| nop 2
    //|>
    //||   break;
    //||  default:
    //|<
    //| ldbsm 2, PC, 0x0, CARG3
    //| ldd 3, BASE, RC, TMP1
    //| addd 4, RA, 0x0, CARG1
    //| ldd 5, BASE, RB, TMP0
    //| disp ctpr1, ->vmeta_arith_vv
    //| nop 2
    //|>
    //|<
    //| shld 0, CARG3, 0x3, CARG3
    //| sard 2, TMP1, 0x2f, CARG4
    //| sard 3, TMP0, 0x2f, ITYPE
    //| ins ch, TMP0, TMP1, CARG2
    //| nop nop_n
    //|>
    //|<
    //| cmpbsb 1, CARG4, LJ_TISNUM, pred1
    //| ldd 2, CARG3, DISPATCH, CARG3
    //| cmpbsb 3, ITYPE, LJ_TISNUM, pred0
    //| ldwsm 5, PC, 0x0, CARG5
    //| nop 1
    //|>
    //|<
    //| pass pred0, p0
    //| pass pred1, p1
    //| landp p0, p1, p4
    //| pass p4, pred0
    //|>
    //||  break;
    //|| }
    //|<
    //| movtd 0, CARG3, ctpr2
    //| addd 1, PC, 0x4, PC, pred0
    //|>
    //|<
    //| shrd 3, CARG5, 0xd, RD, pred0
    //| shrd 4, CARG5, 0x15, RB, pred0
    //| shrd 5, CARG5, 0x5, RA, pred0
    //| ct ctpr1, ~pred0
    //|>
    //|<
    //| andd 3, RD, 0x7fff8, RD
    //| andd 4, RA, 0x7f8, RA
    //|>
    //|<
    //| andd 3, RB, 0x7f8, RB
    //| andd 4, RD, 0x7f8, RC
    //| std 5, BASE, CARG1, CARG2
    //| ct ctpr2
    //|>
    //|.endmacro

    case BC_ADDVN: case BC_ADDNV: case BC_ADDVV:
        //| // ins_ABC RA = dst*8, RB = src1*8, RC = src2*8 or num_const*8
        //| ins_arith_opt faddd, 4, 0
         vk = ((int)op - BC_ADDVN) / (BC_ADDNV-BC_ADDVN);
         switch (vk) {
          case 0:
        dasm_put(Dst, 9936, LJ_TISNUM);
           break;
          case 1:
        dasm_put(Dst, 9957, LJ_TISNUM);
           break;
          default:
        dasm_put(Dst, 9978, LJ_TISNUM, LJ_TISNUM);
          break;
         }
        dasm_put(Dst, 10006);
#line 3053 "vm_e2k.dasc"
        break;

    case BC_SUBVN: case BC_SUBNV: case BC_SUBVV:
        //| // ins_ABC RA = dst*8, RB = src1*8, RC = src2*8 or num_const*8
        //| ins_arith_opt fsubd, 4, 0
         vk = ((int)op - BC_ADDVN) / (BC_ADDNV-BC_ADDVN);
         switch (vk) {
          case 0:
        dasm_put(Dst, 10033, LJ_TISNUM);
           break;
          case 1:
        dasm_put(Dst, 10054, LJ_TISNUM);
           break;
          default:
        dasm_put(Dst, 10075, LJ_TISNUM, LJ_TISNUM);
          break;
         }
        dasm_put(Dst, 10103);
#line 3058 "vm_e2k.dasc"
        break;

    case BC_MULVN: case BC_MULNV: case BC_MULVV:
        //| // ins_ABC RA = dst*8, RB = src1*8, RC = src2*8 or num_const*8
        //| ins_arith_opt fmuld, 4, 1
         vk = ((int)op - BC_ADDVN) / (BC_ADDNV-BC_ADDVN);
         switch (vk) {
          case 0:
        dasm_put(Dst, 10130, LJ_TISNUM);
           break;
          case 1:
        dasm_put(Dst, 10151, LJ_TISNUM);
           break;
          default:
        dasm_put(Dst, 10172, LJ_TISNUM, LJ_TISNUM);
          break;
         }
        dasm_put(Dst, 10200);
#line 3063 "vm_e2k.dasc"
        break;

    case BC_DIVVN: case BC_DIVNV: case BC_DIVVV:
        //| // ins_ABC RA = dst*8, RB = src1*8, RC = src2*8 or num_const*8
        //| ins_arith_opt fdivd, 5, 7 
         vk = ((int)op - BC_ADDVN) / (BC_ADDNV-BC_ADDVN);
         switch (vk) {
          case 0:
        dasm_put(Dst, 10227, LJ_TISNUM);
           break;
          case 1:
        dasm_put(Dst, 10248, LJ_TISNUM);
           break;
          default:
        dasm_put(Dst, 10269, LJ_TISNUM, LJ_TISNUM);
          break;
         }
        dasm_put(Dst, 10297);
#line 3068 "vm_e2k.dasc"
        break;

    case BC_MODVN: case BC_MODNV: case BC_MODVV:
        //| ins_ABC // RA = dst*8, RB = src1*8, RC = src2*8 or num_const*8
        dasm_put(Dst, 10324);
#line 3072 "vm_e2k.dasc"
        switch (op) {
        case BC_MODVN:
          //| ldd 0, BASE, RB, CARG1
          //| ldd 0, KBASE, RC, CARG2
          //| checknumtp CARG1, ->vmeta_arith_vn
          dasm_put(Dst, 10335, LJ_TISNUM);
#line 3077 "vm_e2k.dasc"
          break;
        case BC_MODNV:
          //| ldd 0, KBASE, RC, CARG1
          //| ldd 0, BASE, RB, CARG2
          //| checknumtp CARG2, ->vmeta_arith_nv
          dasm_put(Dst, 10356, LJ_TISNUM);
#line 3082 "vm_e2k.dasc"
          break;
        case BC_MODVV:
          //| ldd 0, BASE, RB, CARG1
          //| ldd 0, BASE, RC, CARG2
          //| checknumtp CARG1, ->vmeta_arith_vv
          //| checknumtp CARG2, ->vmeta_arith_vv
          dasm_put(Dst, 10377, LJ_TISNUM, LJ_TISNUM);
#line 3088 "vm_e2k.dasc"
          break;
        default:
          break;
        }
        //| disp ctpr1, ->vm_mod
        //| call ctpr1, wbs = 0x8
        //| std 2, BASE, RA, CRET1
        //| ins_next
        dasm_put(Dst, 10414);
#line 3096 "vm_e2k.dasc"
        break;

    case BC_POW:
        //| ins_ABC // RA = dst*8, RB = src1*8, RC = src2*8 or num_const*8
        //| ldd 0, BASE, RB, CARG1
        //| ldd 0, BASE, RC, CARG2
        //| checknumtp CARG1, ->vmeta_arith_vv
        //| checknumtp CARG2, ->vmeta_arith_vv
        //| disp ctpr1, extern pow
        //| call ctpr1, wbs = 0x8
        //| ldb 0, PC, PC_RA, RA
        //| shld 0, RA, 0x3, RA
        //| std 2, BASE, RA, CRET1
        //| ins_next
        dasm_put(Dst, 10450, LJ_TISNUM, LJ_TISNUM);
#line 3110 "vm_e2k.dasc"
        break;

    case BC_CAT:
        //| ins_ABC // RA = dst*8, RB = src_start*8, RC = src_end*8
        //| ldd 0, STACK, SAVE_L, CARG1
        //| std 2, CARG1, L->base, BASE
        //| addd 0, BASE, RC, CARG2
        //| addd 0, RC, 0x0, CARG3
        //| subd 0, CARG3, RB, CARG3
        //| shrd 0, CARG3, 0x3, CARG3
        //|->BC_CAT_Z:
        //| addd 0, CARG1, 0x0, RB
        //| std 2, STACK, SAVE_PC, PC
        //| disp ctpr1, extern lj_meta_cat    // (lua_State *L, TValue *top, int left)
        //| call ctpr1, wbs = 0x8
        //| // NULL (finished) or TValue * (metamethod) returned.
        //| ldd 0, RB, L->base, BASE
        //| cmpedb 0, CRET1, 0x0, pred0
        //| disp ctpr1, ->vmeta_binop
        //| ct ctpr1, ~pred0
        //| ldb 0, PC, PC_RB, RB                 // Copy result to Stk[RA] from Stk[RB].
        //| shld 0, RB, 0x3, RB
        //| ldb 0, PC, PC_RA, RA
        //| shld 0, RA, 0x3, RA
        //| ldd 0, BASE, RB, TMP0
        //| std 2, BASE, RA, TMP0
        //| ins_next
        dasm_put(Dst, 10538, Dt1(->base), Dt1(->base));
#line 3137 "vm_e2k.dasc"
        break;

    /* -- Constant ops ------------------------------------------------------ */

    case BC_KSTR:
        //| ins_AND // RA = dst*8, RD = str_const*8 (~)
        //| subd 0, KBASE, RD, TMP0
        //| ldd 0, TMP0, 0xfffffff8, RD
        //| settp RD, LJ_TSTR
        //| std 2, BASE, RA, RD
        //| ins_next
        dasm_put(Dst, 10634, LJ_TSTR);
#line 3148 "vm_e2k.dasc"
        break;

    case BC_KCDATA:
        //|.if FFI
        //| ins_AND // RA = dst*8, RD = cdata_const*8 (~)
        //| subd 0, KBASE, RD, TMP0
        //| ldd 0, TMP0, 0xfffffff8, RD
        //| settp RD, LJ_TCDATA
        //| std 2, BASE, RA, RD
        //| ins_next
        //|.endif
        dasm_put(Dst, 10680, LJ_TCDATA);
#line 3159 "vm_e2k.dasc"
        break;

    case BC_KSHORT:
        //| ins_AD // RA = dst*8, RD = int16_literal*8
        //| shrd 0, RD, 0x3, RD
        //| sxt 0, 0x1, RD, RD                   // Sign-extend literal.
        //| idtofd 0, RD, RD
        //| std 2, BASE, RA, RD
        //| ins_next
        dasm_put(Dst, 10726);
#line 3168 "vm_e2k.dasc"
        break;

    case BC_KNUM:
        //| ins_AD // RA = dst*8, RD = num_const*8
        //| ldd 0, KBASE, RD, TMP0
        //| std 2, BASE, RA, TMP0
        //| ins_next
        dasm_put(Dst, 10761);
#line 3175 "vm_e2k.dasc"
        break;

    case BC_KPRI:
        //| ins_AD // RA = dst*8, RD = primitive_type*8 (~)
        //| shld 0, RD, 0x2c, RD
        //| xord 0, RD, 0xffffffff, RD
        //| std 2, BASE, RA, RD
        //| ins_next
        dasm_put(Dst, 10792);
#line 3183 "vm_e2k.dasc"
        break;

    case BC_KNIL:
        //| ins_AD // RA = dst_start*8, RD = dst_end*8
        //| addd 0, BASE, RA, RA
        //| addd 0, RA, 0x8, RA
        //| addd 0, BASE, RD, RD
        //| addd 0, 0x0, LJ_TNIL, RB
        //| std 2, RA, 0xfffffff8, RB            // Sets minimum 2 slots
        //|1:
        //| std 2, RA, 0x0, RB
        //| addd 0, RA, 0x8, RA
        //| cmpbedb 0, RA, RD, pred0
        //| disp ctpr1, <1
        //| ct ctpr1, pred0
        //| ins_next
        dasm_put(Dst, 10829, LJ_TNIL);
#line 3199 "vm_e2k.dasc"
        break;

    /* -- Upvalue and function ops ------------------------------------------ */

    case BC_UGET:
        //| ins_AD // RA = dst*8, RD = upvalue*8
        //| ldd 0, BASE, 0xfffffff0, RB
        //| cleartp RB
        //| addd 0, RB, RD, TMP0
        //| ldd 0, TMP0, offsetof(GCfuncL, uvptr), RB
        //| ldd 0, RB, UPVAL->v, RB
        //| ldd 0, RB, 0x0, RD
        //| std 2, BASE, RA, RD
        //| ins_next
        dasm_put(Dst, 10883, offsetof(GCfuncL, uvptr), DtA(->v));
#line 3213 "vm_e2k.dasc"
        break;

    case BC_USETV:
#define TV2MARKOFS \
 ((int32_t)offsetof(GCupval, marked)-(int32_t)offsetof(GCupval, tv))
        //| ins_AD // RA = upvalue*8, RD = src*8
        //| ldd 0, BASE, 0xfffffff0, RB
        //| cleartp RB
        //| addd 0, RB, RA, TMP0
        //| ldd 0, TMP0, offsetof(GCfuncL, uvptr), RB
        //| ldb 0, RB, UPVAL->closed, TMP0
        //| cmpedb 0, TMP0, 0x0, pred0
        //| ldd 0, RB, UPVAL->v, RB
        //| ldd 0, BASE, RD, RA
        //| std 2, RB, 0x0, RA
        //| disp ctpr1, >1
        //| ct ctpr1, pred0
        //| // Check barrier for closed upvalue.
        //| ldb 0, RB, TV2MARKOFS, TMP0
        //| cmpandedb 0, TMP0, LJ_GC_BLACK, pred0
        //| disp ctpr1, >2                    // isblack(uv)
        //| ct ctpr1, ~pred0
        //|1:
        //| ins_next
        //|2: // Upvalue is black. Check if new value is collectable and white.
        //| addd 0, RA, 0x0, RD
        //| sard 0, RD, 0x2f, RD
        //| subs 0, RD, LJ_TISGCV, RD
        //| cmpbesb 0, RD, LJ_TNUMX - LJ_TISGCV, pred0
        //| disp ctpr1, <1                    // tvisgcv(v)
        //| ct ctpr1, pred0
        //| cleartp RA
        //| ldb 0, RA, GCOBJ->gch.marked, TMP0
        //| cmpandedb 0, TMP0, LJ_GC_WHITES, pred0
        //| disp ctpr1, <1                    // iswhite(v)
        //| ct ctpr1, pred0
        //| // Crossed a write barrier. Move the barrier forward.
        //| addd 0, RB, 0x0, CARG2
        //| addd 0, DISPATCH, GG_DISP2G, CARG1
        //| disp ctpr1, extern lj_gc_barrieruv // (global_State *g, TValue *tv)
        //| call ctpr1, wbs = 0x8
        //| disp ctpr1, <1
        //| ct ctpr1
        dasm_put(Dst, 10938, offsetof(GCfuncL, uvptr), DtA(->closed), DtA(->v), TV2MARKOFS, LJ_GC_BLACK, LJ_TISGCV, LJ_TNUMX - LJ_TISGCV, Dt4(->gch.marked), LJ_GC_WHITES, GG_DISP2G);
#line 3256 "vm_e2k.dasc"
        break;
#undef TV2MARKOFS

    case BC_USETS:
        //| ins_AND // RA = upvalue*8, RD = str_const*8 (~)
        //| ldd 0, BASE, 0xfffffff0, RB
        //| cleartp RB
        //| addd 0, RB, RA, TMP0
        //| ldd 0, TMP0, offsetof(GCfuncL, uvptr), RB
        //| subd 0, KBASE, RD, TMP0
        //| ldd 0, TMP0, 0xfffffff8, RA
        //| ldd 0, RB, UPVAL->v, RD
        //| settp ITYPE, RA, LJ_TSTR
        //| std 2, RD, 0x0, ITYPE
        //| ldb 0, RB, UPVAL->marked, TMP0
        //| cmpandedb 0, TMP0, LJ_GC_BLACK, pred0
        //| disp ctpr1, >2                    // isblack(uv)
        //| ct ctpr1, ~pred0
        //|1:
        //| ins_next
        //|2: // Check if string is white and ensure upvalue is closed.
        //| ldb 0, RA, GCOBJ->gch.marked, TMP0
        //| cmpandedb 0, TMP0, LJ_GC_WHITES, pred0
        //| disp ctpr1, <1                    // iswhite(str)
        //| ct ctpr1, pred0
        //| ldb 0, RB, UPVAL->closed, TMP0
        //| cmpedb 0, TMP0, 0x0, pred0
        //| disp ctpr1, <1
        //| ct ctpr1, pred0
        //| // Crossed a write barrier. Move the barrier forward.
        //| addd 0, RD, 0x0, CARG2
        //| addd 0, DISPATCH, GG_DISP2G, CARG1
        //| disp ctpr1, extern lj_gc_barrieruv // (global_State *g, TValue *tv)
        //| call ctpr1, wbs = 0x8
        //| disp ctpr1, <1
        //| ct ctpr1
        dasm_put(Dst, 11085, offsetof(GCfuncL, uvptr), DtA(->v), LJ_TSTR, DtA(->marked), LJ_GC_BLACK, Dt4(->gch.marked), LJ_GC_WHITES, DtA(->closed), GG_DISP2G);
#line 3292 "vm_e2k.dasc"
        break;

    case BC_USETN:
        //| ins_AD // RA = upvalue*8, RD = num_const*8
        //| ldd 0, BASE, 0xfffffff0, RB
        //| cleartp RB
        //| ldd 0, KBASE, RD, TMP0
        //| addd 0, RB, RA, TMP1
        //| ldd 0, TMP1, offsetof(GCfuncL, uvptr), RB
        //| ldd 0, RB, UPVAL->v, RA
        //| std 2, RA, 0x0, TMP0
        //| ins_next
        dasm_put(Dst, 11218, offsetof(GCfuncL, uvptr), DtA(->v));
#line 3304 "vm_e2k.dasc"
        break;

    case BC_USETP:
        //| ins_AD // RA = upvalue*8, RD = primitive_type*8 (~)
        //| ldd 0, BASE, 0xfffffff0, RB
        //| cleartp RB
        //| addd 0, RB, RA, TMP0
        //| ldd 0, TMP0, offsetof(GCfuncL, uvptr), RB
        //| shld 0, RD, 0x2c, RD
        //| xord 0, RD, 0xffffffff, RD
        //| ldd 0, RB, UPVAL->v, RA
        //| std 2, RA, 0x0, RD
        //| ins_next
        dasm_put(Dst, 11273, offsetof(GCfuncL, uvptr), DtA(->v));
#line 3317 "vm_e2k.dasc"
        break;

    case BC_UCLO:
        //| ins_AD // RA = level*8, RD = target*8
        //| shrd 0, RD, 0x3, RD
        //| branchPC RD                       // Do this first to free RD.
        //| ldd 0, STACK, SAVE_L, RB
        //| ldd 0, RB, L->openupval, TMP0
        //| cmpedb 0, TMP0, 0x0, pred0
        //| disp ctpr1, >1
        //| ct ctpr1, pred0
        //| std 2, RB, L->base, BASE
        //| addd 0, BASE, RA, CARG2
        //| addd 0, RB, 0x0, CARG1
        //| disp ctpr1, extern lj_func_closeuv // (lua_State *L, TValue *level)
        //| call ctpr1, wbs = 0x8
        //| ldd 0, RB, L->base, BASE
        //|1:
        //| ins_next
        dasm_put(Dst, 11334, BCBIAS_J*4, Dt1(->openupval), Dt1(->base), Dt1(->base));
#line 3336 "vm_e2k.dasc"
        break;

    case BC_FNEW:
        //| // ins_AND RA = dst*8, RD = proto_const*8 (~) (holding function prototype)
        //| disp ctpr1, extern lj_func_newL_gc // (lua_State *L, GCproto *pt, GCfuncL *parent)
        //|<
        //| ldd 0, STACK, SAVE_L, RB
        //| ldd 3, BASE, 0xfffffff0, CARG3
        //| subd 4, KBASE, RD, TMP0
        //| nop 1
        //|>
        //| ldd 3, TMP0, 0xfffffff8, CARG2       // Fetch GCproto *.
        //|<
        //| addd 0, RB, 0x0, CARG1
        //| std 2, RB, L->base, BASE
        //|>
        //|<
        //| std 2, STACK, SAVE_PC, PC
        //| andd 3, CARG3, U64x(0x00007fff,0xffffffff), CARG3
        //| call ctpr1, wbs = 0x8
        //|>
        //| // GCfuncL * returned.
        //|<
        //| ldb 0, PC, PC_RA, RA
        //| ldb 2, PC, 0x0, TMP1
        //| ldw 3, PC, 0x0, TMP0
        //| ldd 5, RB, L->base, BASE
        //| nop 2
        //|>
        //|<
        //| shld 0, TMP1, 0x3, TMP1
        //| shld 1, RA, 0x3, RA
        //| addd 2, 0x0, LJ_TFUNC, ITYPE
        //| shrd 3, TMP0, 0xd, RD
        //| shrd 4, TMP0, 0x15, RB
        //|>
        //|<
        //| ldd 0, TMP1, DISPATCH, TMP1
        //| shld 1, ITYPE, 0x2f, ITYPE
        //| addd 2, PC, 0x4, PC
        //| andd 3, RD, 0x7fff8, RD
        //|>
        //|<
        //| ord 0, CRET1, ITYPE, CRET1
        //| andd 3, RB, 0x7f8, RB
        //| andd 4, RD, 0x7f8, RC
        //|>
        //|<
        //| std 2, BASE, RA, CRET1
        //| shrd 5, TMP0, 0x5, RA
        //|>
        //|<
        //| movtd 0, TMP1, ctpr1
        //| andd 4, RA, 0x7f8, RA
        //|>
        //| ct ctpr1
        dasm_put(Dst, 11410, Dt1(->base), Dt1(->base), LJ_TFUNC);
#line 3392 "vm_e2k.dasc"
        break;

    /* -- Table ops --------------------------------------------------------- */

    case BC_TNEW:
        //| ins_AD // RA = dst*8, RD = (hbits|asize)*8
        //| ldd 0, STACK, SAVE_L, RB
        //| std 2, RB, L->base, BASE
        //| ldd 0, DISPATCH, DISPATCH_GL(gc.total), TMP0
        //| ldd 0, DISPATCH, DISPATCH_GL(gc.threshold), TMP1
        //| cmpbdb 0, TMP0, TMP1, pred0
        //| std 2, STACK, SAVE_PC, PC
        //| disp ctpr1, >5
        //| ct ctpr1, ~pred0
        //| shrd 0, RD, 0x3, RD
        //|1:
        //| shrd 0, RD, 0xb, CARG3
        //| andd 0, RD, 0x7ff, RD
        //| cmpedb 0, RD, 0x7ff, pred0
        //| disp ctpr1, >3
        //| ct ctpr1, pred0
        //|2:
        //| addd 0, RB, 0x0, CARG1
        //| addd 0, RD, 0x0, CARG2
        //| disp ctpr1, extern lj_tab_new     // (lua_State *L, int32_t asize, uint32_t hbits)
        //| call ctpr1, wbs = 0x8
        //| // Table * returned.
        //| ldd 0, RB, L->base, BASE
        //| ldb 0, PC, PC_RA, RA
        //| shld 0, RA, 0x3, RA
        //| settp CRET1, LJ_TTAB
        //| std 2, BASE, RA, CRET1
        //| ins_next
        //|3:                                 // Turn 0x7ff into 0x801.
        //| addd 0, 0x0, 0x801, RD
        //| disp ctpr1, <2
        //| ct ctpr1
        //|5:
        //| addd 0, RB, 0x0, CARG1
        //| disp ctpr1, extern lj_gc_step_fixtop // (lua_State *L)
        //| call ctpr1, wbs = 0x8
        //| ldh 0, PC, PC_RD, RD
        //| disp ctpr1, <1
        //| ct ctpr1
        dasm_put(Dst, 11479, Dt1(->base), DISPATCH_GL(gc.total), DISPATCH_GL(gc.threshold), Dt1(->base), LJ_TTAB);
#line 3436 "vm_e2k.dasc"
        break;

    case BC_TDUP:
        //| ins_AND // RA = dst*8, RD = table_const*8 (~)
        //| ldd 0, STACK, SAVE_L, RB
        //| ldd 0, DISPATCH, DISPATCH_GL(gc.total), TMP0
        //| ldd 0, DISPATCH, DISPATCH_GL(gc.threshold), TMP1
        //| std 2, STACK, SAVE_PC, PC
        //| std 2, RB, L->base, BASE
        //| cmpbdb 0, TMP0, TMP1, pred0
        //| disp ctpr1, >3
        //| ct ctpr1, ~pred0
        //|2:
        //| subd 0, KBASE, RD, TMP0
        //| ldd 0, TMP0, 0xfffffff8, CARG2
        //| addd 0, RB, 0x0, CARG1
        //| disp ctpr1, extern lj_tab_dup     // (lua_State *L, Table *kt)
        //| call ctpr1, wbs = 0x8
        //| ldd 0, RB, L->base, BASE
        //| ldb 0, PC, PC_RA, RA
        //| shld 0, RA, 0x3, RA
        //| settp CRET1, LJ_TTAB              // returned Table *
        //| std 2, BASE, RA, CRET1
        //| ins_next
        //|3:
        //| addd 0, RB, 0x0, CARG1
        //| disp ctpr1, extern lj_gc_step_fixtop // (lua_State *L)
        //| call ctpr1, wbs = 0x8
        //| ldh 0, PC, PC_RD, RD
        //| shld 0, RD, 0x3, RD
        //| disp ctpr1, <2
        //| ct ctpr1
        dasm_put(Dst, 11619, DISPATCH_GL(gc.total), DISPATCH_GL(gc.threshold), Dt1(->base), Dt1(->base), LJ_TTAB);
#line 3468 "vm_e2k.dasc"
        break;

    case BC_GGET:
        //| // ins_AND RA = dst*8, RD = str_const*8 (~)
        //|<
        //| ldb 2, PC, 0x0, CARG4
        //| ldd 3, BASE, 0xfffffff0, RB
        //| addd 4, 0x0, LJ_TSTR, CARG1
        //| subd 5, KBASE, RD, TMP0
        //| nop 1
        //|>
        //| ldw 3, PC, 0x0, CARG3
        //|<
        //| ldd 3, TMP0, 0xfffffff8, RC
        //| andd 4, RB, U64x(0x00007fff,0xffffffff), RB
        //|>
        //|<
        //| shld 0, CARG4, 0x3, CARG4
        //| ldd 3, RB, LFUNC->env, RB
        //| shld 4, CARG1, 0x2f, CARG1
        //| nop 2
        //|>
        //|<
        //| ldw 3, RB, TAB->hmask, TMP0       // RB = GCtab *, RC = GCstr *
        //| ldw 5, RC, STR->sid, TMP1
        //|>
        //|<
        //| ldd 2, CARG4, DISPATCH, CARG4
        //| ldd 3, RB, TAB->node, CARG2
        //| nop 1
        //|>
        //|<
        //| andd 4, TMP0, TMP1, TMP1          // idx = str->sid & tab->hmask
        //|>
        //|<
        //| movtd 0, CARG4, ctpr3
        //| shld 3, TMP1, 0x5, TMP0
        //| shld 4, TMP1, 0x3, TMP1
        //|>
        //| subd 3, TMP0, TMP1, TMP1
        //|<
        //| addd 3, CARG2, TMP1, TMP0         // node = tab->node + (idx*32-idx*8)
        //| ord 4, RC, CARG1, ITYPE
        //|>
        //|<
        //| ldd 3, TMP0, NODE->key, TMP1
        //| lddsm 5, TMP0, NODE->next, CARG5
        //| nop 2
        //|>
        //|1:
        //|<
        //| disp ctpr2, <1
        //| cmpedbsm 3, CARG5, 0x0, pred2
        //| cmpedb 4, TMP1, ITYPE, pred3
        //| lddsm 5, TMP0, NODE->val, CARG4    // Get node value.
        //| nop 1
        //|>
        //|<
        //| disp ctpr1, >2
        //| pass pred3, p0
        //| pass pred2, p1
        //| landp ~p0, ~p1, p4
        //| pass p4, pred4
        //| landp ~p0, p1, p5
        //| pass p5, pred2
        //|>
        //|<
        //| addd 3, CARG5, 0x0, TMP0, ~pred3   // Follow hash chain.
        //| addd 4, CARG4, 0x0, ITYPE, pred3
        //|>
        //|<
        //| ldd 3, TMP0, NODE->key, TMP1, pred4
        //| cmpedbsm 4, ITYPE, LJ_TNIL, pred1
        //| lddsm 5, TMP0, NODE->next, CARG5, pred4
        //| nop 1
        //|>
        //| ct ctpr2, pred4
        //|<
        //| addd 3, 0x0, LJ_TNIL, ITYPE, pred2 // End of hash chain: key not found, nil result.
        //| ct ctpr1, pred2
        //|>
        //|<
        //| addd 2, PC, 0x4, PC, ~pred1
        //| shrd 3, CARG3, 0xd, RD, ~pred1
        //| shrd 4, CARG3, 0x15, RB, ~pred1
        //| std 5, BASE, RA, ITYPE, ~pred1
        //| ct ctpr1, pred1
        //|>
        //|<
        //| andd 3, RD, 0x7fff8, RD
        //| andd 4, RB, 0x7f8, RB
        //| shrd 5, CARG3, 0x5, RA
        //|>
        //|<
        //| andd 4, RD, 0x7f8, RC
        //| andd 5, RA, 0x7f8, RA
        //| ct ctpr3
        //|>
        //|2:
        //|<
        //| disp ctpr1, ->vmeta_tgets
        //| ldd 3, RB, TAB->metatable, TMP0   //  Check for __index if table value is nil
        //| nop 2
        //|>
        //|<
        //| ldbsm 3, TMP0, TAB->nomm, TMP1
        //| cmpedb 4, TMP0, 0x0, pred0
        //| nop 2
        //|>
        //| cmpandedbsm 4, TMP1, 1<<MM_index, pred1
        //|<
        //| pass pred0, p0                    // No metatable: done
        //| pass pred1, p1                    // 'no __index' flag set: done.
        //| landp ~p0, p1, p4
        //| pass p4, pred0
        //|>
        //|<
        //| addd 0, PC, 0x4, PC, ~pred0
        //| shrd 3, CARG3, 0xd, RD, ~pred0
        //| shrd 4, CARG3, 0x15, RB, ~pred0
        //| std 5, BASE, RA, ITYPE, ~pred0
        //| ct ctpr1, pred0
        //|>
        //|<
        //| shrd 3, CARG3, 0x5, RA
        //| andd 4, RB, 0x7f8, RB
        //| andd 5, RD, 0x7fff8, RD
        //|>
        //|<
        //| andd 3, RA, 0x7f8, RA
        //| andd 4, RD, 0x7f8, RC
        //| ct ctpr3
        //|>
        dasm_put(Dst, 11737, LJ_TSTR, Dt7(->env), Dt5(->sid), Dt6(->hmask), Dt6(->node), DtB(->next), DtB(->key), DtB(->val), DtB(->next), LJ_TNIL, DtB(->key), LJ_TNIL, Dt6(->metatable), Dt6(->nomm), 1<<MM_index);
#line 3601 "vm_e2k.dasc"
        break;

    case BC_GSET:
        //| ins_AND // RA = src*8, RD = str_const*8 (~)
        //| ldd 0, BASE, 0xfffffff0, RB
        //| cleartp RB
        //| ldd 0, RB, LFUNC->env, RB
        //| subd 0, KBASE, RD, TMP0
        //| ldd 0, TMP0, 0xfffffff8, RC
        //| disp ctpr1, ->BC_TSETS_Z
        //| ct ctpr1
        dasm_put(Dst, 11896, Dt7(->env));
#line 3612 "vm_e2k.dasc"
        break;

    case BC_TGETV:
        //| ins_ABC // RA = dst*8, RB = table*8, RC = key*8
        //| ldd 0, BASE, RB, RB
        //| ldd 0, BASE, RC, RC
        //| checktab RB, ->vmeta_tgetv
        //| // Integer key?
        //| // Convert number to int and back and compare.
        //| checknum RC, >5
        //| fdtoistr 0, RC, TMP0
        //| istofd 0, TMP0, TMP1
        //| fcmpeqdb 0, RC, TMP1, pred0
        //| disp ctpr1, ->vmeta_tgetv         // Generic numeric key? Use fallback.
        //| ct ctpr1, ~pred0
        //| sxt 0, 0x2, TMP0, RC
        //| ldw 0, RB, TAB->asize, TMP0
        //| cmpbsb 0, RC, TMP0, pred0
        //| disp ctpr1, ->vmeta_tgetv
        //| ct ctpr1, ~pred0
        //| shld 0, RC, 0x3, RC
        //| ldd 0, RB, TAB->array, TMP0
        //| addd 0, RC, TMP0, RC
        //| // Get array slot.
        //| ldd 0, RC, 0x0, ITYPE
        //| cmpedb 0, ITYPE, LJ_TNIL, pred0
        //| disp ctpr1, >2
        //| ct ctpr1, pred0
        //|1:
        //| std 2, BASE, RA, ITYPE
        //| ins_next
        //|2: // Check for __index if table value is nil.
        //| ldd 0, RB, TAB->metatable, TMP0
        //| cmpedb 0, TMP0, 0x0, pred0
        //| disp ctpr1, <1
        //| ct ctpr1, pred0
        //| ldb 0, TMP0, TAB->nomm, TMP0
        //| cmpandedb 0, TMP0, 1<<MM_index, pred0
        //| disp ctpr1, ->vmeta_tgetv         // 'no __index' flag NOT set: check.
        //| ct ctpr1, pred0
        //| disp ctpr1, <1
        //| ct ctpr1
        //|5: // String key?
        //| cmpesb 0, ITYPE, LJ_TSTR, pred0
        //| disp ctpr1, ->vmeta_tgetv
        //| ct ctpr1, ~pred0
        //| cleartp RC
        //|<
        //| ldw 0, RB, TAB->hmask, TMP0
        //| ldw 2, RC, STR->sid, TMP1
        //|>
        //| andd 0, TMP0, TMP1, TMP1             // idx = str->sid & tab->hmask
        //| smulx 0, TMP1, #NODE, TMP0
        //| ldd 0, RB, TAB->node, TMP1
        //|<
        //| addd 0, TMP1, TMP0, TMP0
        //| addd 1, 0x0, LJ_TSTR, ITYPE
        //|>
        //| shld 0, ITYPE, 0x2f, ITYPE
        //| ord 0, ITYPE, RC, ITYPE
        //|6:
        dasm_put(Dst, 11925, LJ_TTAB, LJ_TISNUM, Dt6(->asize), Dt6(->array), LJ_TNIL, Dt6(->metatable), Dt6(->nomm), 1<<MM_index, LJ_TSTR, Dt5(->sid), Dt6(->hmask), sizeof(Node), Dt6(->node), LJ_TSTR);
#line 3673 "vm_e2k.dasc"
        //| ldd 0, TMP0, NODE->key, TMP1
        //| cmpedb 0, TMP1, ITYPE, pred0
        //| disp ctpr1, >8
        //| ct ctpr1, ~pred0
        //| // Get node value.
        //| ldd 0, TMP0, NODE->val, ITYPE
        //| cmpedb 0, ITYPE, LJ_TNIL, pred0
        //| disp ctpr1, >9                    // Key found, but nil value?
        //| ct ctpr1, pred0
        //|7:
        //| std 2, BASE, RA, ITYPE
        //| ins_next
        //|8:                                 // Follow hash chain.
        //| ldd 0, TMP0, NODE->next, TMP0
        //| cmpedb 0, TMP0, 0x0, pred0
        //| disp ctpr1, <6
        //| ct ctpr1, ~pred0
        //| // End of hash chain: key not found, nil result.
        //| addd 0, 0x0, LJ_TNIL, ITYPE
        //|9:                                 // Check for __index if table value is nil
        //| ldd 0, RB, TAB->metatable, TMP0
        //| cmpedb 0, TMP0, 0x0, pred0
        //| disp ctpr1, <7                    // No metatable: done
        //| ct ctpr1, pred0
        //| ldb 0, TMP0, TAB->nomm, TMP1
        //| cmpandedb 0, TMP1, 1<<MM_index, pred0
        //| disp ctpr1, <7                    // 'no __index' flag set: done.
        //| ct ctpr1, ~pred0
        //| disp ctpr1, ->vmeta_tgets
        //| ct ctpr1
        dasm_put(Dst, 12138, DtB(->key), DtB(->val), LJ_TNIL, DtB(->next), LJ_TNIL, Dt6(->metatable), Dt6(->nomm), 1<<MM_index);
#line 3703 "vm_e2k.dasc"
        break;

    case BC_TGETS:
        //| // ins_ABC RA = dst*8, RB = table*8, RC = str_const*8 (~)
        //|<
        //| ldb 2, PC, 0x0, CARG4
        //| ldd 3, BASE, RB, RB
        //| addd 4, 0x0, LJ_TSTR, CARG1
        //| subd 5, KBASE, RC, TMP0
        //| disp ctpr1, ->vmeta_tgets
        //| nop 2
        //|>
        //|<
        //| ldd 3, TMP0, 0xfffffff8, RC
        //| sard 4, RB, 0x2f, ITYPE
        //| andd 5, RB, U64x(0x00007fff,0xffffffff), RB
        //| nop 1
        //|>
        //|<
        //| shld 0, CARG4, 0x3, CARG4
        //| cmpesb 3, ITYPE, LJ_TTAB, pred0
        //| shld 4, CARG1, 0x2f, CARG1
        //| ldw 5, PC, 0x0, CARG3
        //|>
        //|<
        //| ldw 3, RB, TAB->hmask, TMP0, pred0 // RB = GCtab *, RC = GCstr *
        //| ldw 5, RC, STR->sid, TMP1, pred0
        //|>
        //|<
        //| ldd 2, CARG4, DISPATCH, CARG4
        //| ldd 3, RB, TAB->node, CARG2, pred0
        //| nop 1
        //|>
        //|<
        //| andd 4, TMP0, TMP1, TMP1, pred0   // idx = str->sid & tab->hmask
        //| ct ctpr1, ~pred0
        //|>
        //|<
        //| movtd 0, CARG4, ctpr3
        //| shld 3, TMP1, 0x5, TMP0
        //| shld 4, TMP1, 0x3, TMP1
        //|>
        //| subd 3, TMP0, TMP1, TMP1
        //|<
        //| addd 3, CARG2, TMP1, TMP0         // node = tab->node + (idx*32-idx*8)
        //| ord 4, RC, CARG1, ITYPE
        //|>
        //|<
        //| ldd 3, TMP0, NODE->key, TMP1
        //| lddsm 5, TMP0, NODE->next, CARG5
        //| nop 2
        //|>
        //|1:
        //|<
        //| disp ctpr2, <1
        //| cmpedbsm 3, CARG5, 0x0, pred2
        //| cmpedb 4, TMP1, ITYPE, pred3
        //| lddsm 5, TMP0, NODE->val, CARG4    // Get node value.
        //| nop 1
        //|>
        //|<
        //| disp ctpr1, >2
        //| pass pred3, p0
        //| pass pred2, p1
        //| landp ~p0, ~p1, p4
        //| pass p4, pred4
        //| landp ~p0, p1, p5
        //| pass p5, pred2
        //|>
        //|<
        //| addd 3, CARG5, 0x0, TMP0, ~pred3   // Follow hash chain.
        //| addd 4, CARG4, 0x0, ITYPE, pred3
        //|>
        //|<
        //| ldd 3, TMP0, NODE->key, TMP1, pred4
        //| cmpedbsm 4, ITYPE, LJ_TNIL, pred1
        //| lddsm 5, TMP0, NODE->next, CARG5, pred4
        //| nop 1
        //|>
        //| ct ctpr2, pred4
        //|<
        //| addd 3, 0x0, LJ_TNIL, ITYPE, pred2 // End of hash chain: key not found, nil result.
        //| ct ctpr1, pred2
        //|>
        //|<
        //| addd 0, PC, 0x4, PC, ~pred1
        //| shrd 3, CARG3, 0xd, RD, ~pred1
        //| shrd 4, CARG3, 0x15, RB, ~pred1
        //| std 5, BASE, RA, ITYPE, ~pred1
        //| ct ctpr1, pred1
        //|>
        //|<
        //| andd 3, RD, 0x7fff8, RD
        //| andd 4, RB, 0x7f8, RB
        //| shrd 5, CARG3, 0x5, RA
        //|>
        //|<
        //| andd 3, RD, 0x7f8, RC
        //| andd 4, RA, 0x7f8, RA
        //| ct ctpr3
        //|>
        //|2:
        //|<
        //| disp ctpr1, ->vmeta_tgets
        //| ldd 3, RB, TAB->metatable, TMP0   //  Check for __index if table value is nil
        //| nop 2
        //|>
        //|<
        //| ldbsm 3, TMP0, TAB->nomm, TMP1
        //| cmpedb 4, TMP0, 0x0, pred0
        //| nop 2
        //|>
        //| cmpandedbsm 4, TMP1, 1<<MM_index, pred1
        //|<
        //| pass pred0, p0                    // No metatable: done
        //| pass pred1, p1                    // 'no __index' flag set: done.
        //| landp ~p0, p1, p4
        //| pass p4, pred0
        //|>
        //|<
        //| addd 0, PC, 0x4, PC, ~pred0
        //| shrd 3, CARG3, 0xd, RD, ~pred0
        //| shrd 4, CARG3, 0x15, RB, ~pred0
        //| std 5, BASE, RA, ITYPE, ~pred0
        //| ct ctpr1, pred0
        //|>
        //|<
        //| andd 3, RD, 0x7fff8, RD
        //| shrd 4, CARG3, 0x5, RA
        //| andd 5, RB, 0x7f8, RB
        //|>
        //|<
        //| andd 3, RA, 0x7f8, RA
        //| andd 4, RD, 0x7f8, RC
        //| ct ctpr3
        //|>
        dasm_put(Dst, 12247, LJ_TSTR, LJ_TTAB, Dt5(->sid), Dt6(->hmask), Dt6(->node), DtB(->next), DtB(->key), DtB(->val), DtB(->next), LJ_TNIL, DtB(->key), LJ_TNIL, Dt6(->metatable), Dt6(->nomm), 1<<MM_index);
#line 3839 "vm_e2k.dasc"
        break;

    case BC_TGETB:
        //| ins_ABC // RA = dst*8, RB = table*8, RC = index*8
        //| ldd 0, BASE, RB, RB
        //| checktab RB, ->vmeta_tgetb
        //| ldw 0, RB, TAB->asize, TMP0
        //| sard 0, RC, 0x3, TMP1
        //| cmpbdb 0, TMP1, TMP0, pred0
        //| disp ctpr1, ->vmeta_tgetb
        //| ct ctpr1, ~pred0
        //| ldd 0, RB, TAB->array, TMP0
        //| addd 0, RC, TMP0, RC
        //| // Get array slot.
        //| ldd 0, RC, 0x0, ITYPE
        //| cmpedb 0, ITYPE, LJ_TNIL, pred0
        //| disp ctpr1, >2
        //| ct ctpr1, pred0
        //|1:
        //| std 2, BASE, RA, ITYPE
        //| ins_next
        //|2:                                 // Check for __index if table value is nil.
        //| ldd 0, RB, TAB->metatable, TMP0
        //| cmpedb 0, TMP0, 0x0, pred0
        //| disp ctpr1, <1
        //| ct ctpr1, pred0
        //| ldb 0, TMP0, TAB->nomm, TMP1
        //| cmpandedb 0, TMP1, 1<<MM_index, pred0
        //| disp ctpr1, ->vmeta_tgetb         // 'no __index' flag NOT set: check.
        //| ct ctpr1, pred0
        //| disp ctpr1, <1
        //| ct ctpr1
        dasm_put(Dst, 12413, LJ_TTAB, Dt6(->asize), Dt6(->array), LJ_TNIL, Dt6(->metatable), Dt6(->nomm), 1<<MM_index);
#line 3871 "vm_e2k.dasc"
        break;

    case BC_TGETR:
        //| ins_ABC // RA = dst*8, RB = table*8, RC = key*8
        //| ldd 0, BASE, RB, RB
        //| cleartp RB
        //| ldd 0, BASE, RC, RC
        //| fdtoistr 0, RC, RC
        //| ldw 0, RB, TAB->asize, TMP0
        //| cmpbsb 0, RC, TMP0, pred0
        //| disp ctpr1, ->vmeta_tgetr         // Not in array part? Use fallback.
        //| ct ctpr1, ~pred0
        //| shls 0, RC, 0x3, RC
        //| sxt 0, 0x2, RC, RC
        //| ldd 0, RB, TAB->array, TMP0
        //| addd 0, TMP0, RC, RC
        //| // Get array slot.
        //| ldd 0, RC, 0x0, ITYPE
        //| std 2, BASE, RA, ITYPE
        //| ins_next
        dasm_put(Dst, 12545, Dt6(->asize), Dt6(->array));
#line 3891 "vm_e2k.dasc"
        break;

    case BC_TSETV:
        //| ins_ABC // RA = src*8, RB = table*8, RC = key*8
        //| ldd 0, BASE, RB, RB
        //| ldd 0, BASE, RC, RC
        //| checktab RB, ->vmeta_tsetv
        //| // Integer key?  Convert number to int and back and compare.
        //| checknum RC, >5
        //| fdtoistr 0, RC, TMP0
        //| istofd 0, TMP0, TMP1
        //| fcmpeqdb 0, RC, TMP1, pred0
        //| disp ctpr1, ->vmeta_tsetv         // Generic numeric key? Use fallback.
        //| ct ctpr1, ~pred0
        //| sxt 0, 0x2, TMP0, RC
        //| ldw 0, RB, TAB->asize, TMP0
        //| cmpbsb 0, RC, TMP0, pred0
        //| disp ctpr1, ->vmeta_tsetv
        //| ct ctpr1, ~pred0
        //| shld 0, RC, 0x3, RC
        //| ldd 0, RB, TAB->array, TMP0
        //| addd 0, RC, TMP0, RC
        //| ldw 0, RC, 0x0, TMP0
        //| cmpesb 0, TMP0, LJ_TNIL, pred0
        //| disp ctpr1, >3                    // Previous value is nil?
        //| ct ctpr1, pred0
        //|1:
        //| ldb 0, RB, TAB->marked, TMP0
        //| cmpandedb 0, TMP0, LJ_GC_BLACK, pred0 // isblack(table)
        //| disp ctpr1, >7
        //| ct ctpr1, ~pred0
        //|2:                                 // Set array slot
        //| ldd 0, BASE, RA, RB
        //| std 2, RC, 0x0, RB
        //| ins_next
        //|3: // Check for __newindex if previous value is nil.
        //| ldd 0, RB, TAB->metatable, TMP1
        //| cmpedb 0, TMP1, 0x0, pred0
        //| disp ctpr1, <1
        //| ct ctpr1, pred0
        //| ldb 0, TMP1, TAB->nomm, TMP0
        //| cmpandedb 0, TMP0, 1<<MM_newindex, pred0
        //| disp ctpr1, ->vmeta_tsetv         // 'no __newindex' flag NOT set: check.
        //| ct ctpr1, pred0
        //| disp ctpr1, <1
        //| ct ctpr1
        //|5: // String key?
        //| cmpesb 0, ITYPE, LJ_TSTR, pred0
        //| disp ctpr1, ->vmeta_tsetv
        //| ct ctpr1, ~pred0
        //| cleartp RC
        //| disp ctpr1, ->BC_TSETS_Z
        //| ct ctpr1
        //|7: // Possible table write barrier for the value. Skip valiswhite check.
        dasm_put(Dst, 12623, LJ_TTAB, LJ_TISNUM, Dt6(->asize), Dt6(->array), LJ_TNIL, Dt6(->marked), LJ_GC_BLACK, Dt6(->metatable), Dt6(->nomm), 1<<MM_newindex, LJ_TSTR);
#line 3945 "vm_e2k.dasc"
        //| barrierback RB, TMP1, TMP0
        //| disp ctpr1, <2
        //| ct ctpr1
        dasm_put(Dst, 12828, Dt6(->marked), ~LJ_GC_BLACK, Dt6(->marked), DISPATCH_GL(gc.grayagain), DISPATCH_GL(gc.grayagain), Dt6(->gclist));
#line 3948 "vm_e2k.dasc"
        break;

    case BC_TSETS:
        //| ins_ABC // RA = src*8, RB = table*8, RC = str_const*8 (~)
        //| ldd 0, BASE, RB, RB
        //| subd 0, KBASE, RC, TMP0
        //| ldd 0, TMP0, 0xfffffff8, RC
        //| checktab RB, ->vmeta_tsets
        //|->BC_TSETS_Z:
        //| // RB = GCtab *, RC = GCstr *
        //| ldw 0, RB, TAB->hmask, TMP0
        //| ldw 0, RC, STR->sid, TMP1
        //| andd 0, TMP0, TMP1, TMP1             // idx = str->sid & tab->hmask
        //| smulx 0, TMP1, #NODE, TMP0
        //| addd 0, 0x0, 0x0, TMP1
        //| stb 2, RB, TAB->nomm, TMP1           // Clear metamethod cache.
        //| ldd 0, RB, TAB->node, TMP1
        //| addd 0, TMP1, TMP0, TMP0
        //| settp ITYPE, RC, LJ_TSTR
        //|1:
        //| ldd 0, TMP0, NODE->key, TMP1
        //| cmpedb 0, TMP1, ITYPE, pred0
        //| disp ctpr1, >5
        //| ct ctpr1, ~pred0
        //| // Ok, key found. Assumes: offsetof(Node, val) == 0
        //| ldd 0, TMP0, 0x0, TMP1
        //| cmpedb 0, TMP1, LJ_TNIL, pred0
        //| disp ctpr1, >4                    // Previous value is nil?
        //| ct ctpr1, pred0
        //|2:
        //| ldb 0, RB, TAB->marked, TMP1
        //| cmpandedb 0, TMP1, LJ_GC_BLACK, pred0
        //| disp ctpr1, >7                    // isblack(table)
        //| ct ctpr1, ~pred0
        //|3:                                 // Set node value.
        //| ldd 0, BASE, RA, ITYPE
        //| std 2, TMP0, 0x0, ITYPE
        //| ins_next
        //|4:                                 // Check for __newindex if previous value is nil.
        //| ldd 0, RB, TAB->metatable, ITYPE
        //| cmpedb 0, ITYPE, 0x0, pred0
        //| disp ctpr1, <2
        //| ct ctpr1, pred0
        //| ldb 0, ITYPE, TAB->nomm, TMP1
        //| cmpandedb 0, TMP1, 1<<MM_newindex, pred0
        //| disp ctpr1, ->vmeta_tsets         // 'no __newindex' flag NOT set: check.
        //| ct ctpr1, pred0
        //| disp ctpr1, <2
        //| ct ctpr1
        //|5:                                 // Follow hash chain.
        dasm_put(Dst, 12865, LJ_TTAB, Dt6(->hmask), Dt5(->sid), sizeof(Node), Dt6(->nomm), Dt6(->node), LJ_TSTR, DtB(->key), LJ_TNIL, Dt6(->marked), LJ_GC_BLACK, Dt6(->metatable), Dt6(->nomm), 1<<MM_newindex);
#line 3998 "vm_e2k.dasc"
        //| ldd 0, TMP0, NODE->next, TMP0
        //| cmpedb 0, TMP0, 0x0, pred0
        //| disp ctpr1, <1
        //| ct ctpr1, ~pred0
        //| // End of hash chain: key not found, add a new one.
        //| // But check for __newindex first.
        //| ldd 0, RB, TAB->metatable, TMP0
        //| cmpedb 0, TMP0, 0x0, pred0
        //| disp ctpr1, >6                    // No metatable: continue.
        //| ct ctpr1, pred0
        //| ldb 0, TMP0, TAB->nomm, TMP1
        //| cmpandedb 0, TMP1, 1<<MM_newindex, pred0
        //| disp ctpr1, ->vmeta_tsets         // 'no __newindex' flag NOT set: check.
        //| ct ctpr1, pred0
        //|6:
        //| ldd 0, STACK, SAVE_L, CARG1
        //| std 2, CARG1, L->base, BASE
        //| addd 0, RB, 0x0, CARG2
        //| addd 0, DISPATCH, DISPATCH_GL(tmptv), CARG3
        //| std 2, CARG3, 0x0, ITYPE
        //| std 2, STACK, SAVE_PC, PC
        //| disp ctpr1, extern lj_tab_newkey  // (lua_State *L, GCtab *t, TValue *k)
        //| call ctpr1, wbs = 0x8
        //| // Handles write barrier for the new key. TValue * returned.
        //| ldd 0, STACK, SAVE_L, TMP1
        //| ldd 0, TMP1, L->base, BASE
        //| addd 0, CRET1, 0x0, TMP0
        //| ldb 0, PC, PC_RA, RA
        //| shld 0, RA, 0x3, RA
        //| disp ctpr1, <2                    // Must check write barrier for value.
        //| ct ctpr1
        //|7:                                 // Possible table write barrier for the value. Skip valiswhite check.
        //| barrierback RB, ITYPE, TMP1
        //| disp ctpr1, <3
        //| ct ctpr1
        dasm_put(Dst, 13056, DtB(->next), Dt6(->metatable), Dt6(->nomm), 1<<MM_newindex, Dt1(->base), DISPATCH_GL(tmptv), Dt1(->base), Dt6(->marked), ~LJ_GC_BLACK, Dt6(->marked), DISPATCH_GL(gc.grayagain), DISPATCH_GL(gc.grayagain), Dt6(->gclist));
#line 4033 "vm_e2k.dasc"
        break;

    case BC_TSETB:
        //| ins_ABC // RA = src*8, RB = table*8, RC = byte_literal*8
        //| ldd 0, BASE, RB, RB
        //| checktab RB, ->vmeta_tsetb
        //| ldw 0, RB, TAB->asize, TMP0
        //| shld 0, TMP0, 0x3, TMP0
        //| cmpbdb 0, RC, TMP0, pred0
        //| disp ctpr1, ->vmeta_tsetb
        //| ct ctpr1, ~pred0
        //| ldd 0, RB, TAB->array, TMP0
        //| addd 0, RC, TMP0, RC
        //| ldd 0, RC, 0x0, TMP0
        //| cmpedb 0, TMP0, LJ_TNIL, pred0
        //| disp ctpr1, >3                    // Previous value is nil?
        //| ct ctpr1, pred0
        //|1:
        //| ldb 0, RB, TAB->marked, TMP0
        //| cmpandedb 0, TMP0, LJ_GC_BLACK, pred0
        //| disp ctpr1, >7                    // isblack(table)
        //| ct ctpr1, ~pred0
        //|2: // Set array slot.
        //| ldd 0, BASE, RA, ITYPE
        //| std 2, RC, 0x0, ITYPE
        //| ins_next
        //|3: // Check for __newindex if previous value is nil.
        //| ldd 0, RB, TAB->metatable, TMP1
        //| cmpedb 0, TMP1, 0x0, pred0
        //| disp ctpr1, <1
        //| ct ctpr1, pred0
        //| ldb 0, TMP1, TAB->nomm, TMP0
        //| cmpandedb 0, TMP0, 1<<MM_newindex, pred0
        //| disp ctpr1, ->vmeta_tsetb         // 'no __newindex' flag NOT set: check.
        //| ct ctpr1, pred0
        //| disp ctpr1, <1
        //| ct ctpr1
        //|7: // Possible table write barrier for the value. Skip valiswhite check.
        //| barrierback RB, TMP1, TMP0
        //| disp ctpr1, <2
        //| ct ctpr1
        dasm_put(Dst, 13185, LJ_TTAB, Dt6(->asize), Dt6(->array), LJ_TNIL, Dt6(->marked), LJ_GC_BLACK, Dt6(->metatable), Dt6(->nomm), 1<<MM_newindex, Dt6(->marked), ~LJ_GC_BLACK, Dt6(->marked), DISPATCH_GL(gc.grayagain), DISPATCH_GL(gc.grayagain), Dt6(->gclist));
#line 4074 "vm_e2k.dasc"
        break;

    case BC_TSETR:
        //| ins_ABC // RA = src*8, RB = table*8, RC = key*8
        //| ldd 0, BASE, RB, RB
        //| cleartp RB
        //| ldd 0, BASE, RC, RC
        //| fdtoistr 0, RC, RC
        //| ldb 0, RB, TAB->marked, TMP0
        //| cmpandedb 0, TMP0, LJ_GC_BLACK, pred0
        //| disp ctpr1, >7
        //| ct ctpr1, ~pred0
        //|2:
        //| ldw 0, RB, TAB->asize, TMP0
        //| cmpbsb 0, RC, TMP0, pred0
        //| disp ctpr1, ->vmeta_tsetr
        //| ct ctpr1, ~pred0
        //| shls 0, RC, 0x3, RC
        //| sxt 0, 0x2, RC, RC
        //| ldd 0, RB, TAB->array, TMP0
        //| addd 0, TMP0, RC, RC
        //| // Set array slot.
        //| ldd 0, BASE, RA, ITYPE
        //| std 2, RC, 0x0, ITYPE
        //| ins_next
        //|7: // Possible table write barrier for the value. Skip valiswhite check.
        //| barrierback RB, TMP1, TMP0
        //| disp ctpr1, <2
        //| ct ctpr1
        dasm_put(Dst, 13371, Dt6(->marked), LJ_GC_BLACK, Dt6(->asize), Dt6(->array), Dt6(->marked), ~LJ_GC_BLACK, Dt6(->marked), DISPATCH_GL(gc.grayagain), DISPATCH_GL(gc.grayagain), Dt6(->gclist));
#line 4103 "vm_e2k.dasc"
        break;

    case BC_TSETM:
        //| ins_AD // RA = base*8 (table at base-1), RD = num_const*8 (start_index)
        //|1:
        //| ldw 0, KBASE, RD, TMP1               // Integer constant is in lo-word.
        //| shld 0, TMP1, 0x3, TMP1
        //| addd 0, BASE, RA, RA
        //| ldd 0, RA, 0xfffffff8, RB            // Guaranteed to be a table.
        //| cleartp RB
        //| ldb 0, RB, TAB->marked, TMP0
        //| cmpandedb 0, TMP0, LJ_GC_BLACK, pred0
        //| disp ctpr1, >7                    // isblack(table)
        //| ct ctpr1, ~pred0
        //|2:
        //| ldw 0, STACK, MULTRES, RD
        //| subd 0, RD, 0x8, RD
        //| cmpedb 0, RD, 0x0, pred0
        //| disp ctpr1, >4                    // Nothing to copy?
        //| ct ctpr1, pred0
        //| addd 0, RD, TMP1, RD                 // Compute needed size.
        //| ldw 0, RB, TAB->asize, TMP0
        //| shld 0, TMP0, 0x3, TMP0
        //| cmpbedb 0, RD, TMP0, pred0
        //| disp ctpr1, >5                    // Doesn't fit into array part?
        //| ct ctpr1, ~pred0
        //| subd 0, RD, TMP1, RD
        //| ldd 0, RB, TAB->array, TMP0
        //| addd 0, TMP1, TMP0, TMP1
        //|3: // Copy result slots to table.
        //| ldd 0, RA, 0x0, RB
        //| addd 0, RA, 0x8, RA
        //| std 2, TMP1, 0x0, RB
        //| addd 0, TMP1, 0x8, TMP1
        //| subd 0, RD, 0x8, RD
        //| cmpedb 0, RD, 0x0, pred0
        //| disp ctpr1, <3
        //| ct ctpr1, ~pred0
        //|4:
        //| ins_next
        //|5: // Need to resize array part.
        //| ldd 0, STACK, SAVE_L, CARG1
        //| std 2, CARG1, L->base, BASE
        //| addd 0, RB, 0x0, CARG2
        //| addd 0, RD, 0x0, CARG3
        //| shrd 0, CARG3, 0x3, CARG3
        //| addd 0, CARG1, 0x0, RB
        //| std 2, STACK, SAVE_PC, PC
        //| disp ctpr1, extern lj_tab_reasize // (lua_State *L, GCtab *t, int nasize)
        //| call ctpr1, wbs = 0x8
        //| ldd 0, RB, L->base, BASE
        //| ldb 0, PC, PC_RA, RA                 // Restore RA.
        //| shld 0, RA, 0x3, RA
        //| ldh 0, PC, PC_RD, RD                 // Restore RD.
        //| shld 0, RD, 0x3, RD
        //| disp ctpr1, <1
        //| ct ctpr1                          // Retry.
        //|7: // Possible table write barrier for any value. Skip valiswhite check.
        //| barrierback RB, RD, TMP0
        //| disp ctpr1, <2
        //| ct ctpr1
        dasm_put(Dst, 13501, Dt6(->marked), LJ_GC_BLACK, Dt6(->asize), Dt6(->array), Dt1(->base), Dt1(->base), Dt6(->marked), ~LJ_GC_BLACK, Dt6(->marked), DISPATCH_GL(gc.grayagain), DISPATCH_GL(gc.grayagain), Dt6(->gclist));
#line 4164 "vm_e2k.dasc"
        break;

    /* -- Calls and vararg handling ----------------------------------------- */

    case BC_CALL: case BC_CALLM:
        //| // ins_A_C  RA = base*8, (RB = (nresults+1)*8,) RD = (nargs+1)*8 | extra_nargs*8
        //|<
        //| ldw 3, STACK, MULTRES, TMP0
        //| addd 4, RA, 0x10, RA
        //| ldd 5, BASE, RA, RB
        //| disp ctpr1, ->vmeta_call
        //| nop 1
        //|>
        //| andd 4, RD, 0x7f8, RD
        dasm_put(Dst, 13705);
#line 4178 "vm_e2k.dasc"
        if (op == BC_CALLM) {
          //|<
          //| sard 3, RB, 0x2f, ITYPE
          //| andd 4, RB, U64x(0x00007fff,0xffffffff), RB
          //| addd 5, RD, TMP0, RD
          //|>
          dasm_put(Dst, 13717);
#line 4184 "vm_e2k.dasc"
        } else {
          //|<
          //| sard 3, RB, 0x2f, ITYPE
          //| andd 4, RB, U64x(0x00007fff,0xffffffff), RB
          //|>
          dasm_put(Dst, 13726);
#line 4189 "vm_e2k.dasc"
        }
        //|<
        //| cmpesb 3, ITYPE, LJ_TFUNC, pred0
        //| addd 4, BASE, RA, CARG1
        //| lddsm 5, RB, LFUNC->pc, CARG2
        //| nop 1
        //|>
        //|<
        //| addd 3, BASE, RA, BASE, pred0
        //| addd 4, BASE, RA, RA, ~pred0
        //|>
        //|<
        //| ldw 3, CARG2, 0x0, RA, pred0
        //| addd 4, CARG2, 0x4, PC, pred0
        //| std 5, CARG1, 0xfffffff8, PC, pred0
        //| nop 1
        //|>
        //| ct ctpr1, ~pred0
        //|<
        //| andd 3, RA, 0xff, TMP0
        //| shrd 4, RA, 0x5, RA
        //|>
        //|<
        //| andd 3, RA, 0x7f8, RA
        //| shld 4, TMP0, 0x3, TMP0                      // jmp to [DISPATCH+OP*8]
        //|>
        //|<
        //| ldd 3, TMP0, DISPATCH, TMP0
        //| nop 2
        //|>
        //| movtd 0, TMP0, ctpr1
        //| ct ctpr1
        dasm_put(Dst, 13733, Dt7(->pc), LJ_TFUNC);
#line 4221 "vm_e2k.dasc"
        break;

    case BC_CALLMT:
        //| ins_AD // RA = base*8, RD = extra_nargs*8
        //| ldd 0, STACK, MULTRES, TMP0
        //| addd 0, RD, TMP0, RD
        //| // Fall through. Assumes BC_CALLT follows and ins AD is a no-op.
        dasm_put(Dst, 13770);
#line 4228 "vm_e2k.dasc"
        break;

    case BC_CALLT:
        //| ins_AD // RA = base*8, RD = (nargs+1)*8
        //| addd 0, BASE, RA, RA
        //| addd 0, RA, 0x10, RA
        //| addd 0, BASE, 0x0, KBASE             // Use KBASE for move + vmeta_call hint.
        //| ldd 0, RA, 0xfffffff0, RB
        //| checktp_nc RB, LJ_TFUNC, ->vmeta_call
        //|->BC_CALLT_Z:
        //| ldd 0, BASE, 0xfffffff8, PC
        //| cmpandedb 0, PC, FRAME_TYPE, pred0
        //| disp ctpr1, >7
        //| ct ctpr1, ~pred0
        //|1:
        //| std 2, BASE, 0xfffffff0, RB          // Copy func+tag down, reloaded below.
        //| stw 2, STACK, MULTRES, RD
        //| subd 0, RD, 0x8, RD
        //| cmpedb 0, RD, 0x0, pred0
        //| disp ctpr1, >3
        //| ct ctpr1, pred0
        //|2: // Move args down.
        //| ldd 0, RA, 0x0, RB
        //| addd 0, RA, 0x8, RA
        //| std 2, KBASE, 0x0, RB
        //| addd 0, KBASE, 0x8, KBASE
        //| subd 0, RD, 0x8, RD
        //| cmpedb 0, RD, 0x0, pred0
        //| disp ctpr1, <2
        //| ct ctpr1, ~pred0
        //| ldd 0, BASE, 0xfffffff0, RB
        //|3:
        //| cleartp RB
        //| ldw 0, STACK, MULTRES, RD
        //| ldb 0, RB, LFUNC->ffid, TMP0
        //| cmpbedb 0, TMP0, 0x1, pred0          // (> FF_C) Calling a fast function?
        //| disp ctpr1, >5
        //| ct ctpr1, ~pred0
        //|4:
        //| ins_callt
        //|5: // Tailcall to a fast function.
        //| cmpandedb 0, PC, FRAME_TYPE, pred0
        //| disp ctpr1, <4
        //| ct ctpr1, ~pred0
        //| ldb 0, PC, PC_RA, RA
        //| shld 0, RA, 0x3, RA
        //| subd 0, BASE, RA, TMP0
        //| ldd 0, TMP0, 0xffffffe0, KBASE       // Need to prepare KBASE.
        //| cleartp KBASE
        //| ldd 0, KBASE, LFUNC->pc, KBASE
        //| ldd 0, KBASE, PC2PROTO(k), KBASE
        //| disp ctpr1, <4
        //| ct ctpr1
        //|7: // Tailcall from a vararg function.
        //| subd 0, PC, FRAME_VARG, PC
        //| cmpandedb 0, PC, FRAME_TYPEP, pred0
        //| disp ctpr1, >8                    // Vararg frame below?
        //| ct ctpr1, ~pred0
        //| subd 0, BASE, PC, BASE               // Need to relocate BASE/KBASE down.
        //| addd 0, BASE, 0x0, KBASE
        //| ldd 0, BASE, 0xfffffff8, PC
        //| disp ctpr1, <1
        //| ct ctpr1
        //|8:
        dasm_put(Dst, 13775, LJ_TFUNC, FRAME_TYPE, Dt7(->ffid), Dt7(->pc), FRAME_TYPE, Dt7(->pc), PC2PROTO(k), FRAME_VARG, FRAME_TYPEP);
#line 4292 "vm_e2k.dasc"
        //| addd 0, PC, FRAME_VARG, PC
        //| disp ctpr1, <1
        //| ct ctpr1
        dasm_put(Dst, 13983, FRAME_VARG);
#line 4295 "vm_e2k.dasc"
        break;

    case BC_ITERC:
        //| ins_A // RA = base*8, (RB = nresults+1)*8, RD=(nargs+1)*8 (2+1)*8
        //| addd 0, BASE, RA, RA                 // fb = base+2
        //| addd 0, RA, 0x10, RA
        //| ldd 0, RA, 0xffffffe0, RB            // Copy state. fb[0] = fb[-4].
        //| ldd 0, RA, 0xffffffe8, RC            // Copy control var. fb[1] = fb[-3].
        //| std 2, RA, 0x0, RB
        //| std 2, RA, 0x8, RC
        //| ldd 0, RA, 0xffffffd8, RB            // Copy callable. fb[-2] = fb[-5]
        //| std 2, RA, 0xfffffff0, RB
        //| addd 0, 0x0, 0x18, RD                // Handle like a regular 2-arg call.
        //| checkfunc RB, ->vmeta_call
        //| addd 0, RA, 0x0, BASE
        //| ins_call
        dasm_put(Dst, 13995, LJ_TFUNC, Dt7(->pc));
#line 4311 "vm_e2k.dasc"
        break;

    case BC_ITERN:
        //| ins_A // RA = base*8, (RB = (nresults+1)*8, RC = (nargs+1)*8 (2+1)*8)
        //| addd 0, BASE, RA, TMP0
        //| ldd 0, TMP0, 0xfffffff0, RB
        //| cleartp RB
        //| ldw 0, TMP0, 0xfffffff8, RC          // Get index from control var.
        //| ldw 0, RB, TAB->asize, TMP1
        //| addd 0, PC, 0x4, PC
        //| ldd 0, RB, TAB->array, ITYPE
        //|1: // Traverse array part.
        //| cmpbsb 0, RC, TMP1, pred0
        //| disp ctpr1, >5                    // Index points after array part?
        //| ct ctpr1, ~pred0
        //| shls 0, RC, 0x3, TMP0
        //| ldd 0, ITYPE, TMP0, TMP0
        //| cmpedb 0, TMP0, LJ_TNIL, pred0
        //| disp ctpr1, >4
        //| ct ctpr1, pred0
        //| // Copy array slot to returned value.
        //| addd 0, TMP0, 0x0, RB
        //| addd 0, BASE, RA, TMP0
        //| std 2, TMP0, 0x8, RB
        //| // Return array index as a numeric key
        //| istofd 0, RC, TMP1
        //| std 2, TMP0, 0x0, TMP1
        //| adds 0, RC, 0x1, RC
        //| stw 2, TMP0, 0xfffffff8, RC          // Update control var.
        //|2:
        //| ldh 0, PC, PC_RD, RD                 // Get target from ITERL.
        //| branchPC RD
        //|3:
        //| ins_next
        //|4: // Skip holes in array part.
        //| adds 0, RC, 0x1, RC
        //| disp ctpr1, <1
        //| ct ctpr1
        //|5: // Traverse hash part.
        //| subs 0, RC, TMP1, RC
        //|6:
        //| ldw 0, RB, TAB->hmask, TMP0
        //| cmpbesb 0, RC, TMP0, pred0
        //| disp ctpr1, <3                    // End of iteration? Branch to ITERL+1.
        //| ct ctpr1, ~pred0
        //| smulx 0, RC, #NODE, ITYPE
        //| ldd 0, RB, TAB->node, TMP0
        //| addd 0, ITYPE, TMP0, ITYPE
        //| ldd 0, ITYPE, NODE->val, TMP0
        //| cmpedb 0, TMP0, LJ_TNIL, pred0
        //| disp ctpr1, >7
        //| ct ctpr1, pred0
        //| adds 0, RC, TMP1, TMP1
        //| adds 0, TMP1, 0x1, TMP1
        //| // Copy key and value from hash slot.
        //| ldd 0, ITYPE, NODE->key, RB
        //| ldd 0, ITYPE, NODE->val, RC
        //| addd 0, BASE, RA, TMP0
        //| std 2, TMP0, 0x0, RB
        //| std 2, TMP0, 0x8, RC
        //| stw 2, TMP0, 0xfffffff8, TMP1
        //| disp ctpr1, <2
        //| ct ctpr1
        //|7: // Skip holes in hash part.
        //| adds 0, RC, 0x1, RC
        //| disp ctpr1, <6
        //| ct ctpr1
        dasm_put(Dst, 14083, Dt6(->asize), Dt6(->array), LJ_TNIL, BCBIAS_J*4, Dt6(->hmask), sizeof(Node), Dt6(->node), DtB(->val), LJ_TNIL, DtB(->key), DtB(->val));
#line 4378 "vm_e2k.dasc"
        break;

    case BC_ISNEXT:
        //| ins_AD // RA = base*8, RD = target*8 (points to ITERN)
        //| shrd 0, RD, 0x3, RD
        //| addd 0, BASE, RA, TMP0
        //| ldd 0, TMP0, 0xffffffe8, RB
        //| checkfunc RB, >5
        //| ldd 0, TMP0, 0xfffffff0, TMP1
        //| checktptp TMP1, LJ_TTAB, >5
        //| ldd 0, TMP0, 0xffffffe8, TMP1
        //| cmpedb 0, TMP1, LJ_TNIL, pred0
        //| disp ctpr1, >5
        //| ct ctpr1, ~pred0
        //| ldb 0, RB, CFUNC->ffid, TMP1
        //| cmpedb 0, TMP1, FF_next_N, pred0
        //| disp ctpr1, >5
        //| ct ctpr1, ~pred0
        //| branchPC RD
        //| addd 0, 0x0, U64x(0xfffe7fff,0x00000000), TMP1
        //| std 2, TMP0, 0xfffffff8, TMP1        // Initialize control var.
        //|1:
        //| ins_next
        //|5: // Despecialize bytecode if any of the checks fail.
        //| addd 0, 0x0, BC_JMP, TMP1
        //| stb 2, PC, PC_OP, TMP1
        //| branchPC RD
        //| addd 0, 0x0, BC_ITERC, TMP1
        //| stb 2, PC, 0x0, TMP1
        //| disp ctpr1, <1
        //| ct ctpr1
        dasm_put(Dst, 14281, LJ_TFUNC, LJ_TTAB, LJ_TNIL, Dt8(->ffid), FF_next_N, BCBIAS_J*4, BC_JMP, BCBIAS_J*4, BC_ITERC);
#line 4409 "vm_e2k.dasc"
        break;

    case BC_VARG:
        //| ins_ABC // RA = base*8, RB = (nresults+1)*8, RC = numparams*8
        //| addd 0, BASE, RC, TMP1
        //| addd 0, TMP1, FRAME_VARG+0x10, TMP1
        //| addd 0, BASE, RA, RA
        //| ldd 0, BASE, 0xfffffff8, TMP0
        //| subd 0, TMP1, TMP0, TMP1
        //| // Note: TMP1 may now be even _above_ BASE if nargs was < numparams.
        //| cmpedb 0, RB, 0x0, pred0
        //| disp ctpr1, >5                    // Copy all varargs?
        //| ct ctpr1, pred0
        //| addd 0, RA, RB, TMP0
        //| subd 0, TMP0, 0x8, RB
        //| cmpbdb 0, TMP1, BASE, pred0
        //| disp ctpr1, >2                    // No vrarg slots?
        //| ct ctpr1, ~pred0
        //|1: // Copy vararg slots to destination slots.
        //| ldd 0, TMP1, 0xfffffff0, RC
        //| addd 0, TMP1, 0x8, TMP1
        //| std 2, RA, 0x0, RC
        //| addd 0, RA, 0x8, RA
        //| cmpbdb 0, RA, RB, pred0
        //| disp ctpr1, >3                    // All destination slots filled?
        //| ct ctpr1, ~pred0
        //| cmpbdb 0, TMP1, BASE, pred0
        //| disp ctpr1, <1                    // No more vararg slots?
        //| ct ctpr1, pred0
        //|2: // Fill up remainder with nil.
        //| addd 0, 0x0, LJ_TNIL, TMP0
        //| std 2, RA, 0x0, TMP0
        //| addd 0, RA, 0x8, RA
        //| cmpbdb 0, RA, RB, pred0
        //| disp ctpr1, <2
        //| ct ctpr1, pred0
        //|3:
        //| ins_next
        //|5: // Copy all varargs.
        //| addd 0, 0x0, (0+1)*8, TMP0
        //| stw 2, STACK, MULTRES, TMP0
        //| addd 0, BASE, 0x0, RC
        //| cmpbedb 0, RC, TMP1, pred0
        //| subd 0, RC, TMP1, RC
        //| disp ctpr1, <3                    // No vararg slots?
        //| ct ctpr1, pred0
        //| addd 0, RC, 0x8, RB
        //| stw 2, STACK, MULTRES, RB            // (#varargs+1)*8
        //| ldd 0, STACK, SAVE_L, RB
        //| addd 0, RC, RA, RC
        //| ldd 0, RB, L->maxstack, TMP0
        //| cmpbedb 0, RC, TMP0, pred0
        //| disp ctpr1, >7                    // Need to grow stack?
        //| ct ctpr1, ~pred0
        //|6: // Copy all vararg slots.
        //| ldd 0, TMP1, 0xfffffff0, RC
        //| addd 0, TMP1, 0x8, TMP1
        //| std 2, RA, 0x0, RC
        //| addd 0, RA, 0x8, RA
        //| cmpbdb 0, TMP1, BASE, pred0
        //| disp ctpr1, <6                    // No more vararg slots?
        //| ct ctpr1, pred0
        //| disp ctpr1, <3
        //| ct ctpr1
        //|7: // Grow stack for varargs.
        //| std 2, RB, L->base, BASE
        //| std 2, RB, L->top, RA
        //| std 2, STACK, SAVE_PC, PC
        //| subd 0, TMP1, BASE, TMP1             // Need delta, because BASE may change.
        //| ldw 0, STACK, MULTRES, CARG2
        //| subd 0, CARG2, 0x8, CARG2
        //| shrd 0, CARG2, 0x3, CARG2
        //| addd 0, RB, 0x0, CARG1
        //| disp ctpr1, extern lj_state_growstack // (lua_State *L, int n)
        //| call ctpr1, wbs = 0x8
        //| ldd 0, RB, L->base, BASE
        //| ldd 0, RB, L->top, RA
        //| addd 0, TMP1, BASE, TMP1
        //| disp ctpr1, <6
        //| ct ctpr1
        dasm_put(Dst, 14438, FRAME_VARG+0x10, LJ_TNIL, (0+1)*8, Dt1(->maxstack), Dt1(->base), Dt1(->top), Dt1(->base), Dt1(->top));
#line 4489 "vm_e2k.dasc"
        break;

    /* -- Returns ----------------------------------------------------------- */

    case BC_RETM:
        //| ins_AD // RA = results*8, RD = extra_nresults*8
        //|<
        //| ldd 0, STACK, MULTRES, TMP0
        //| nop 2
        //|>
        //| addd 3, RD, TMP0, RD                 // MULTRES >=8, so RD >= 8
        //| // Fall through. Assumes BC_RET follows and ins_AD is a no-op.
        dasm_put(Dst, 14664);
#line 4501 "vm_e2k.dasc"
        break;

    case BC_RET:
        //| // ins_AD RA = results*8, RD = (nresults+1)*8
        //|1:
        //|<
        //| ldd 0, BASE, 0xfffffff8, PC
        //| disp ctpr3, ->vm_return
        //| nop 2
        //|>
        //|<
        //| stw 2, STACK, MULTRES, RD            // Save (nresults+1)*8.
        //| disp ctpr1, <1
        //|>
        //|<
        //| cmpandedb 1, PC, FRAME_TYPE, pred0   // Check frame type marker.
        //| subdsm 3, PC, FRAME_VARG, RB
        //|>
        //|<
        //| cmpandedbsm 0, RB, FRAME_TYPEP, pred1
        //|>
        //|<
        //| pass pred0, p0
        //| pass pred1, p1
        //| landp ~p0, ~p1, p4
        //| pass p4, pred1
        //|>
        //| ct ctpr3, pred1
        //|<
        //| subd 3, BASE, RB, BASE, ~pred0    // Return from vararg function: relocate BASE down and RA up.
        //| addd 4, RA, RB, RA, ~pred0
        //| ct ctpr1, ~pred0
        //|>
        //|->BC_RET_Z:
        //| // BASE = base, RA = resultptr, RD = (nresults+1)*8, PC = return
        //| addd 0, BASE, 0x0, KBASE             // Use KBASE for result move.
        //| subd 0, RD, 0x8, RD
        //| cmpedb 0, RD, 0x0, pred0
        //| disp ctpr1, >3
        //| ct ctpr1, pred0
        //|2:                                 // Move results down.
        //| ldd 0, KBASE, RA, RB
        //| std 2, KBASE, 0xfffffff0, RB
        //| addd 0, KBASE, 0x8, KBASE
        //| subd 0, RD, 0x8, RD
        //| cmpedb 0, RD, 0x0, pred0
        //| disp ctpr1, <2
        //| ct ctpr1, ~pred0
        //|3:
        //| ldw 0, STACK, MULTRES, RD          // Note: MULTRES may be >255.
        //| ldb 0, PC, PC_RB, RB
        //| shld 0, RB, 0x3, RB
        //|5:
        //| cmpbedb 0, RB, RD, pred0           // More results expected?
        //| disp ctpr1, >6
        //| ct ctpr1, ~pred0
        //| ldb 0, PC, PC_RA, RA
        //| shld 0, RA, 0x3, RA
        //| subd 0, BASE, RA, BASE
        //| subd 0, BASE, 0x10, BASE             // base = base - (RA+2)*8
        //| ldd 0, BASE, 0xfffffff0, KBASE
        //| cleartp KBASE
        //| ldd 0, KBASE, LFUNC->pc, KBASE
        //| ldd 0, KBASE, PC2PROTO(k), KBASE
        //| ins_next
        //|6:                                 // Fill up results with nil.
        //| addd 0, 0x0, LJ_TNIL, TMP0
        //| std 2, KBASE, 0xfffffff0, TMP0     // Note: relies on shifted base.
        //| addd 0, RD, 0x8, RD
        //| disp ctpr1, <5
        //| ct ctpr1
        dasm_put(Dst, 14669, FRAME_VARG, FRAME_TYPE, FRAME_TYPEP, Dt7(->pc), PC2PROTO(k), LJ_TNIL);
#line 4572 "vm_e2k.dasc"
        break;


    case BC_RET0: case BC_RET1:
        //| // ins_AD RA = results*8, RD = (nresults+1)*8
        //|1:
        //|<
        //| ldd 0, BASE, 0xfffffff8, PC
        //| disp ctpr3, ->vm_return
        //| nop 2
        //|>
        //|<
        //| stw 2, STACK, MULTRES, RD            // Save (nresults+1)*8.
        //| disp ctpr1, <1
        //|>
        //|<
        //| ldbsm 0, PC, 0x0, CARG2
        //| cmpandedb 1, PC, FRAME_TYPE, pred0   // Check frame type marker.
        //| ldwsm 3, PC, 0x0, CARG1
        //| subdsm 4, PC, FRAME_VARG, RB
        //| disp ctpr2, >3
        //|>
        //|<
        //| cmpandedbsm 3, RB, FRAME_TYPEP, pred1
        //|>
        //|<
        //| pass pred0, p0
        //| pass pred1, p1
        //| landp ~p0, ~p1, p4
        //| pass p4, pred1
        //|>
        //| ct ctpr3, pred1
        dasm_put(Dst, 14828, FRAME_VARG, FRAME_TYPE, FRAME_TYPEP);
#line 4604 "vm_e2k.dasc"
        if (op == BC_RET1) {
          //|<
          //| shld 2, CARG2, 0x3, CARG2, pred0
          //| subd 3, BASE, RB, BASE, ~pred0    // Return from vararg function: relocate BASE down and RA up.
          //| addd 4, RA, RB, RA, ~pred0
          //| ldd 5, BASE, RA, RB, pred0
          //| ct ctpr1, ~pred0
          //|>
          dasm_put(Dst, 14860);
#line 4612 "vm_e2k.dasc"
        } else {
          //|<
          //| shld 2, CARG2, 0x3, CARG2, pred0
          //| subd 3, BASE, RB, BASE, ~pred0    // Return from vararg function: relocate BASE down and RA up.
          //| ct ctpr1, ~pred0
          //|>
          dasm_put(Dst, 14869);
#line 4618 "vm_e2k.dasc"
        }
        if (op == BC_RET1) {
          //| std 5, BASE, 0xfffffff0, RB
          dasm_put(Dst, 14876);
#line 4621 "vm_e2k.dasc"
        }
        //|2:
        //|<
        //| ldb 0, PC, PC_RB, TMP0
        //| ldb 3, PC, PC_RA, RA
        //| disp ctpr1, <2
        //| nop 1
        //|>
        //| andd 4, RD, 0x7f8, TMP1
        //| shld 0, TMP0, 0x3, TMP0
        //| cmpbedb 0, TMP0, TMP1, pred0
        //|<
        //| ldd 2, CARG2, DISPATCH, CARG2, pred0
        //| shld 3, RA, 0x3, RA, pred0
        //| subd 4, BASE, 0x10, BASE, pred0
        //| ct ctpr2, ~pred0                  // More results expected?
        //|>
        //|<
        //| addd 1, PC, 0x4, PC
        //| subd 3, BASE, RA, BASE            // base = base - (RA+2)*8
        //| shrd 4, CARG1, 0xd, RD
        //| shrd 5, CARG1, 0x15, RB
        //|>
        //|<
        //| ldd 3, BASE, 0xfffffff0, KBASE
        //| shrd 4, CARG1, 0x5, RA
        //| andd 5, RD, 0x7fff8, RD
        //| nop 2
        //|>
        //|<
        //| movtd 0, CARG2, ctpr1
        //| andd 3, KBASE, U64x(0x00007fff,0xffffffff), KBASE
        //|>
        //|<
        //| ldd 3, KBASE, LFUNC->pc, KBASE
        //| andd 4, RB, 0x7f8, RB
        //| nop 2
        //|>
        //| andd 5, RA, 0x7f8, RA
        //|<
        //| ldd 3, KBASE, PC2PROTO(k), KBASE
        //| andd 4, RD, 0x7f8, RC
        //| ct ctpr1
        //|>
        //|3:                                 // Fill up results with nil.
        //|<
        //| subd 3, BASE, 0x18, TMP0
        //| addd 4, 0x0, LJ_TNIL, TMP1
        //|>
        //|<
        //| addd 3, RD, 0x8, RD
        //| std 5, TMP0, RD, TMP1
        //| ct ctpr1
        //|>
        dasm_put(Dst, 14881, Dt7(->pc), PC2PROTO(k), LJ_TNIL);
#line 4675 "vm_e2k.dasc"
        break;

    /* -- Loops and branches ------------------------------------------------ */

    case BC_FORL:
        //| // Fall through. Assumes BC_IFORL follows and ins_AJ is a no-op.
        break;

    case BC_JFORI: case BC_JFORL:
        //| // Unsupported
        break;

    case BC_IFORL:
        //| // ins_AJ RA = base*8, RD = target*8 (after end of loop or start of loop)
        //|<
        //| shrd 0, RD, 0x1, CARG2
        //| subd 1, PC, BCBIAS_J*4, CARG3
        //| addd 3, BASE, RA, RA
        //|>
        //|<
        //| ldd 3, RA, 0x10, RB
        //| ldd 5, RA, 0x0, TMP0
        //| nop 2
        //|>
        //|<
        //| faddd 3, TMP0, RB, TMP0
        //| fcmpltdb 4, RB, 0x0, pred2
        //| ldd 5, RA, 0x8, TMP1
        //| nop 5
        //|>
        //|<
        //| fcmpltdb 3, TMP1, TMP0, pred0
        //| fcmpltdb 4, TMP0, TMP1, pred1     // Invert comparison if step is negative.
        //| std 5, RA, 0x0, TMP0
        //| nop 2
        //|>
        //|<
        //| pass pred0, p0
        //| pass pred1, p1
        //| pass pred2, p2
        //| landp ~p0, ~p2, p4
        //| landp ~p1, p2, p5
        //| landp ~p4, ~p5, p6
        //| pass p6, pred0
        //|>
        //|<
        //| addd 0, CARG3, CARG2, PC, ~pred0
        //| std 5, RA, 0x18, TMP0
        //|>
        //|<
        //| ldb 0, PC, 0x0, TMP1
        //| addd 1, PC, 0x4, PC
        //| ldw 2, PC, 0x0, TMP0
        //| nop 2
        //|>
        //|<
        //| shld 2, TMP1, 0x3, TMP1
        //| shrd 3, TMP0, 0xd, RD
        //| shrd 4, TMP0, 0x15, RB
        //| shrd 5, TMP0, 0x5, RA
        //|>
        //|<
        //| ldd 0, TMP1, DISPATCH, TMP1
        //| andd 3, RD, 0x7fff8, RD
        //| andd 4, RA, 0x7f8, RA
        //| nop 2
        //|>
        //|<
        //| movtd 0, TMP1, ctpr1
        //| andd 3, RB, 0x7f8, RB
        //| andd 4, RD, 0x7f8, RC
        //|>
        //| ct ctpr1
        dasm_put(Dst, 14954, BCBIAS_J*4);
#line 4748 "vm_e2k.dasc"
        break;

    case BC_FORI:
        //| // ins_AJ RA = base*8, RD = target*8 (after end of loop or start of loop)
        //|<
        //| subd 2, PC, BCBIAS_J*4, CARG3
        //| addd 3, BASE, RA, RA
        //| addd 4, 0x0, 0x2f, CARG1
        //| disp ctpr2, ->vmeta_for
        //|>
        //|<
        //| shrd 1, RD, 0x1, CARG4
        //| ldd 2, RA, 0x10, RB
        //| ldd 3, RA, 0x0, TMP0
        //| ldd 5, RA, 0x8, TMP1
        //| nop 2
        //|>
        //|<
        //| addd 1, CARG3, CARG4, CARG3
        //| sard 2, RB, CARG1, ITYPE
        //| sard 3, TMP0, CARG1, CARG1
        //| sard 4, TMP1, CARG1, CARG2
        //|>
        //|<
        //| cmplsb 0, ITYPE, LJ_TISNUM, pred3
        //| cmpbsb 1, ITYPE, LJ_TISNUM, pred0
        //| cmpbsb 3, CARG1, LJ_TISNUM, pred1
        //| cmpbsb 4, CARG2, LJ_TISNUM, pred2
        //|>
        //|<
        //| pass pred0, p0
        //| pass pred1, p1
        //| landp p0, p1, p4
        //| pass p4, pred0
        //| pass pred2, p2
        //| landp p4, p2, p5
        //| pass p5, pred2
        //|>
        //|<
        //| fcmpltdb 3, TMP1, TMP0, pred0
        //| fcmpltdb 4, TMP0, TMP1, pred1     // Invert comparison if step is negative.
        //| nop 1
        //|>
        //|<
        //| std 5, RA, 0x18, TMP0, pred2
        //| ct ctpr2, ~pred2
        //|>
        //|<
        //| pass pred0, p0
        //| pass pred1, p1
        //| pass pred3, p3
        //| landp ~p0, ~p3, p4
        //| landp ~p1, p3, p5
        //| landp ~p4, ~p5, p6
        //| pass p6, pred0
        //|>
        //| addd 0, CARG3, 0x0, PC, pred0
        //|<
        //| ldb 0, PC, 0x0, TMP1
        //| addd 1, PC, 0x4, PC
        //| ldw 2, PC, 0x0, TMP0
        //| nop 2
        //|>
        //|<
        //| shld 2, TMP1, 0x3, TMP1
        //| shrd 3, TMP0, 0xd, RD
        //| shrd 4, TMP0, 0x15, RB
        //| shrd 5, TMP0, 0x5, RA
        //|>
        //|<
        //| ldd 2, TMP1, DISPATCH, TMP1
        //| andd 3, RD, 0x7fff8, RD
        //| andd 4, RA, 0x7f8, RA
        //| nop 2
        //|>
        //|<
        //| movtd 0, TMP1, ctpr1
        //| andd 3, RB, 0x7f8, RB
        //| andd 4, RD, 0x7f8, RC
        //|>
        //| ct ctpr1
        dasm_put(Dst, 15008, BCBIAS_J*4, LJ_TISNUM, LJ_TISNUM, LJ_TISNUM, LJ_TISNUM);
#line 4829 "vm_e2k.dasc"
        break;

    case BC_ITERL:
        //| // Fall through. Assumes BC_IITERL follows and ins_AJ is a no-op.
        break;

    case BC_JITERL:
        //| // Unsupported
        break;

    case BC_IITERL:
        //| ins_AJ // RA = base*8, RD = target*8
        //| addd 0, BASE, RA, RA
        //| ldd 0, RA, 0x0, RB
        //| cmpedb 0, RB, LJ_TNIL, pred0
        //| disp ctpr1, >1                    // Stop if iterator returned nil.
        //| ct ctpr1, pred0
        //| shrd 0, RD, 0x3, RD
        //| branchPC RD                       // Otherwise save control var + branch.
        //| std 2, RA, 0xfffffff8, RB
        //|1:
        //| ins_next
        dasm_put(Dst, 15091, LJ_TNIL, BCBIAS_J*4);
#line 4851 "vm_e2k.dasc"
        break;

    case BC_LOOP:
        //| ins_A // RA = base*8, RD = target*8 (loop extent)
        //| // Note: RA/RD is only used by trace recorder to determine scope/extent
        //| // This opcode does NOT jump, it's only purpose is to detect a hot loop.
        //| //Fall through. Assumes BC_ILOOP follows and ins_A is a no-op.
        break;

    case BC_ILOOP:
        //| ins_A // RA = base*8, RD = target*8 (loop extent)
        //| ins_next
        dasm_put(Dst, 15148);
#line 4863 "vm_e2k.dasc"
        break;

    case BC_JLOOP:
        //| // Unsupported
        break;

    case BC_JMP:
        //| ins_AJ // RA = unused, RD = target*8
        //| shrd 0, RD, 0x3, RD
        //| branchPC RD
        //| ins_next
        dasm_put(Dst, 15175, BCBIAS_J*4);
#line 4874 "vm_e2k.dasc"
        break;

    /* -- Function headers -------------------------------------------------- */

    /*
    ** Reminder: A function may be called with func/args above L->maxstack,
    ** i.e. occupying EXTRA_STACK slots. And vmeta_call may add one extra slot,
    ** too. This means all FUNC* ops (including fast functions) must check
    ** for stack overflow _before_ adding more slots!
    */

    case BC_FUNCF:
    case BC_FUNCV: /* NYI: compiled vararg functions. */
        //| // Fall through. Assumes BC_IFUNCF/BC_IFUNCV follow and ins_AD is a no-op.
        break;

    case BC_JFUNCF:
        //| // Unsupported
        break;

    case BC_IFUNCF:
        //| ins_AD // BASE = new_base*8, RA = framesize*8, RD = (nargs+1)*8
        //| ldd 0, PC, PC2PROTO(k)-4, KBASE
        //| ldd 0, STACK, SAVE_L, RB
        //| addd 0, BASE, RA, RA                 // Top of frame.
        //| ldd 0, RB, L->maxstack, TMP0
        //| cmpbedb 0, RA, TMP0, pred0
        //| disp ctpr1, ->vm_growstack_f
        //| ct ctpr1, ~pred0
        //| ldb 0, PC, PC2PROTO(numparams)-4, RA
        //| shld 0, RA, 0x3, RA
        //| cmpbedb 0, RD, RA, pred0
        //| disp ctpr1, >3                    // Check for missing parameters.
        //| ct ctpr1, pred0
        //|2:
        //| ins_next
        //|3: // Clear missing parameters.
        //| subd 0, RD, 0x8, TMP0
        //| addd 0, 0x0, LJ_TNIL, TMP1
        //| std 2, BASE, TMP0, TMP1
        //| addd 0, RD, 0x8, RD
        //| cmpbedb 0, RD, RA, pred0
        //| disp ctpr1, <3
        //| ct ctpr1, pred0
        //| disp ctpr1, <2
        //| ct ctpr1
        dasm_put(Dst, 15213, PC2PROTO(k)-4, Dt1(->maxstack), PC2PROTO(numparams)-4, LJ_TNIL);
#line 4920 "vm_e2k.dasc"
        break;

    case BC_JFUNCV:
        //| // Unsupported
        break;

    case BC_IFUNCV:
        //| ins_AD // BASE = new base, RA = framesize*8, RB = LFUNC (but we need tagged), RD = (nargs+1)*8
        //| addd 0, RD, FRAME_VARG+0x8, RB
        //| addd 0, RD, BASE, RD
        //| addd 0, RD, 0x8, RD
        //| ldd 0, BASE, 0xfffffff0, KBASE
        //| std 2, RD, 0xfffffff8, RB            // Store delta + FRAME_VARG
        //| std 2, RD, 0xfffffff0, KBASE         // Store copy of LFUNC
        //| ldd 0, STACK, SAVE_L, RB
        //| addd 0, RA, RD, RA
        //| ldd 0, RB, L->maxstack, TMP0
        //| cmpbedb 0, RA, TMP0, pred0
        //| disp ctpr1, ->vm_growstack_v      // Need to grow stack.
        //| ct ctpr1, ~pred0
        //| addd 0, BASE, 0x0, RA
        //| addd 0, RD, 0x0, BASE
        //| ldb 0, PC, PC2PROTO(numparams)-4, RB
        //| cmpedb 0, RB, 0x0, pred0
        //| disp ctpr1, >2
        //| ct ctpr1, pred0
        //| addd 0, RA, 0x8, RA
        //|1:                                 // Copy fixarg slots up to new frame.
        //| addd 0, RA, 0x8, RA
        //| cmpbdb 0, RA, BASE, pred0
        //| disp ctpr1, >3                    // Less args than parameters?
        //| ct ctpr1, ~pred0
        //| ldd 0, RA, 0xfffffff0, KBASE
        //| std 2, RD, 0x0, KBASE
        //| addd 0, RD, 0x8, RD
        //| addd 0, 0x0, LJ_TNIL, TMP1
        //| std 2, RA, 0xfffffff0, TMP1          // Clear old fixarg slot (help the GC).
        //| subd 0, RB, 0x1, RB
        //| cmpedb 0, RB, 0x0, pred0
        //| disp ctpr1, <1
        //| ct ctpr1, ~pred0
        //|2:
        //| ldd 0, PC, PC2PROTO(k)-4, KBASE
        //| ins_next
        //|3:                                 // Clear missing parameters.
        //| addd 0, 0x0, LJ_TNIL, TMP0
        //| std 2, RD, 0x0, TMP0
        //| addd 0, RD, 0x8, RD
        //| subd 0, RB, 0x1, RB
        //| cmpedb 0, RB, 0x0, pred0
        //| disp ctpr1, <3
        //| ct ctpr1, ~pred0
        //| disp ctpr1, <2
        //| ct ctpr1
        dasm_put(Dst, 15302, FRAME_VARG+0x8, Dt1(->maxstack), PC2PROTO(numparams)-4, LJ_TNIL, PC2PROTO(k)-4, LJ_TNIL);
#line 4974 "vm_e2k.dasc"
        break;

    case BC_FUNCC: case BC_FUNCCW:
        //| ins_AD // BASE = new base, RA = framesize*8, RD = (nargs+1)*8
        //| ldd 0, BASE, 0xfffffff0, RB
        //| cleartp RB
        //| ldd 0, RB, CFUNC->f, KBASE
        //| ldd 0, STACK, SAVE_L, RB
        //| addd 0, BASE, RD, RD
        //| subd 0, RD, 0x8, RD
        //| std 2, RB, L->base, BASE
        //| addd 0, RD, 8*LUA_MINSTACK, TMP0
        //| ldd 0, RB, L->maxstack, TMP1
        //| cmpbedb 0, TMP0, TMP1, pred0
        //| std 2, RB, L->top, RD
        dasm_put(Dst, 15452, Dt8(->f), Dt1(->base), 8*LUA_MINSTACK, Dt1(->maxstack), Dt1(->top));
#line 4989 "vm_e2k.dasc"
        if (op == BC_FUNCC) {
          //| addd 0, RB, 0x0, CARG1
          dasm_put(Dst, 15500);
#line 4991 "vm_e2k.dasc"
        } else {
          //| addd 0, KBASE, 0x0, CARG2
          //| addd 0, RB, 0x0, CARG1
          dasm_put(Dst, 15503);
#line 4994 "vm_e2k.dasc"
        }
        //| disp ctpr1, ->vm_growstack_c      // Need to grow stack.
        //| ct ctpr1, ~pred0
        //| set_vmstate C
        dasm_put(Dst, 15508, ~LJ_VMST_C, DISPATCH_GL(vmstate));
#line 4998 "vm_e2k.dasc"
        if (op == BC_FUNCC) {
          //| movtd 0, KBASE, ctpr1              // (lua_State *L)
          dasm_put(Dst, 15524);
#line 5000 "vm_e2k.dasc"
        } else {
          //| ldd 0, DISPATCH, DISPATCH_GL(wrapf), TMP0
          //| movtd 0, TMP0, ctpr1               // (lua_State *L, lua_CFunction f)
          dasm_put(Dst, 15527, DISPATCH_GL(wrapf));
#line 5003 "vm_e2k.dasc"
        }
        //| call ctpr1, wbs = 0x8
        //| ldd 0, RB, L->base, BASE
        //| std 2, DISPATCH, DISPATCH_GL(cur_L), RB
        //| set_vmstate INTERP
        //| shld 0, CRET1, 0x3, RD               // return nsresult
        //| addd 0, BASE, RD, RA
        //| ldd 0, RB, L->top, TMP0
        //| subd 0, TMP0, RA, RA                 // RA = (L->top - (L->base+nresults))*8
        //| ldd 0, BASE, 0xfffffff8, PC          // Fetch PC of caller
        //| disp ctpr1, ->vm_returnc
        //| ct ctpr1
        dasm_put(Dst, 15535, Dt1(->base), DISPATCH_GL(cur_L), ~LJ_VMST_INTERP, DISPATCH_GL(vmstate), Dt1(->top));
#line 5015 "vm_e2k.dasc"
        break;

    /* ---------------------------------------------------------------------- */
    default:
        fprintf(stderr, "Error: undefined opcode BC_%s\n", bc_names[op]);
        exit(2);
        break;
    }
}

static int build_backend(BuildCtx *ctx)
{
    int op;
    dasm_growpc(Dst, BC__MAX);
    build_subroutines(ctx);
    //|.code_op
    dasm_put(Dst, 15580);
#line 5031 "vm_e2k.dasc"
    for (op = 0 ; op < BC__MAX; op++)
        build_ins(ctx, (BCOp)op, op);
    return BC__MAX;
}

/* Emit pseudo frame-info for all assembler functions */
static void emit_asm_debug(BuildCtx* ctx)
{
    int fcofs = (int)((uint8_t *)ctx->glob[GLOB_vm_ffi_call] - ctx->code);
    switch  (ctx->mode) {
    case BUILD_elfasm:
        fprintf(ctx->fp, "\t.section .debug_frame,\"\",@progbits\n");
        fprintf(ctx->fp,
        ".Lframe0:\n"
        "\t.long .LECIE0-.LSCIE0\n"
        ".LSCIE0:\n"
        "\t.long 0xffffffff\n"
        "\t.byte 0x1\n"
        "\t.string \"\"\n"
        "\t.uleb128 0x1\n"
        "\t.sleb128 -8\n"
        "\t.byte 0x8c\n"
        "\t.byte 0xc\n\t.uleb128 0x19\n\t.uleb128 0\n"
        "\t.byte 0x9\n\t.uleb128 0x8c\n\t.uleb128 0\n"
        "\t.align 8\n"
        ".LECIE0:\n\n");
        fprintf(ctx->fp,
        ".LSFDE0:\n"
        "\t.long .LEFDE0-.LASFDE0\n"
        ".LASFDE0:\n"
        "\t.long .Lframe0\n"
        "\t.quad .Lbegin\n"
        "\t.quad %d\n"
        "\t.byte 0xd\n\t.uleb128 0x18\n"
        "\t.align 8\n"
        ".LEFDE0:\n\n", fcofs);
#if LJ_HASFFI
        fprintf(ctx->fp,
        ".LSFDE1:\n"
        "\t.long .LEFDE1-.LASFDE1\n"
        ".LASFDE1:\n"
        "\t.long .Lframe0\n"
        "\t.quad lj_vm_ffi_call\n"
        "\t.quad %d\n"
        "\t.byte 0xd\n\t.uleb128 0x18\n"
        "\t.align 8\n"
        ".LEFDE1:\n\n", (int)ctx->codesz - fcofs);
#endif
#if !LJ_NO_UNWIND
        fprintf(ctx->fp, "\t.section .eh_frame,\"a\",@progbits\n");
        fprintf(ctx->fp,
        "\t.globl lj_err_unwind_dwarf\n"
        ".Lframe1:\n"
        "\t.long .LECIE1-.LSCIE1\n"
        ".LSCIE1:\n"
        "\t.long 0\n"
        "\t.byte 0x1\n"
        "\t.string \"zPR\"\n"
        "\t.uleb128 0x1\n"
        "\t.sleb128 -8\n"
        "\t.byte 0x8c\n"
        "\t.uleb128 0xa\n"
        "\t.byte 0\n"
        "\t.quad lj_err_unwind_dwarf\n"
        "\t.byte 0\n"
        "\t.byte 0xc\n\t.uleb128 0x19\n\t.uleb128 0\n"
        "\t.byte 0x9\n\t.uleb128 0x8c\n\t.uleb128 0\n"
        "\t.align 8\n"
        ".LECIE1:\n\n");
        fprintf(ctx->fp,
        ".LSFDE2:\n"
        "\t.long .LEFDE2-.LASFDE2\n"
        ".LASFDE2:\n"
        "\t.long .LASFDE2-.Lframe1\n"
        "\t.quad .Lbegin\n"
        "\t.quad %d\n"
        "\t.uleb128 0\n"
        "\t.byte 0xd\n\t.uleb128 0x18\n"
        "\t.align 8\n"
        ".LEFDE2:\n\n", fcofs);
#if LJ_HASFFI
        fprintf(ctx->fp,
        ".Lframe2:\n"
        "\t.long .LECIE2-.LSCIE2\n"
        ".LSCIE2:\n"
        "\t.long 0\n"
        "\t.byte 0x1\n"
        "\t.string \"zR\"\n"
        "\t.uleb128 0x1\n"
        "\t.sleb128 -8\n"
        "\t.byte 0x8c\n"
        "\t.uleb128 1\n"
        "\t.byte 0\n"
        "\t.byte 0xc\n\t.uleb128 0x19\n\t.uleb128 0\n"
        "\t.byte 0x9\n\t.uleb128 0x8c\n\t.uleb128 0\n"
        "\t.align 8\n"
        ".LECIE2:\n\n");
        fprintf(ctx->fp,
        ".LSFDE3:\n"
        "\t.long .LEFDE3-.LASFDE3\n"
        ".LASFDE3:\n"
        "\t.long .LASFDE3-.Lframe2\n"
        "\t.quad lj_vm_ffi_call\n"
        "\t.quad %d\n"
        "\t.uleb128 0\n"
        "\t.byte 0xd\n\t.uleb128 0x18\n"
        "\t.align 8\n"
        ".LEFDE3:\n\n", (int)ctx->codesz - fcofs);
#endif
#endif
        break;
    default:
        break;
    }
}
